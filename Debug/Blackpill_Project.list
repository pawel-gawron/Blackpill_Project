
Blackpill_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007be0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011a4  08007d80  08007d80  00017d80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f24  08008f24  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008f24  08008f24  00018f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f2c  08008f2c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f2c  08008f2c  00018f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f30  08008f30  00018f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008f34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  200001dc  08009110  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000374  08009110  00020374  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014a3d  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c1e  00000000  00000000  00034c49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  00037868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00018df4  00000000  00000000  000388a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00014273  00000000  00000000  0005169c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00091cf2  00000000  00000000  0006590f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000f7601  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000ef0  00000000  00000000  000f7658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005534  00000000  00000000  000f8548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007d68 	.word	0x08007d68

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08007d68 	.word	0x08007d68

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <ssd1331_write_byte>:
   *						   0: Writes to the command register
   *						   1: Writes to the display data ram
   * @retval None
 **/
static void ssd1331_write_byte(uint8_t chData, uint8_t chCmd) 
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	460a      	mov	r2, r1
 8000f5a:	71fb      	strb	r3, [r7, #7]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	71bb      	strb	r3, [r7, #6]
	if (chCmd) {
 8000f60:	79bb      	ldrb	r3, [r7, #6]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d005      	beq.n	8000f72 <ssd1331_write_byte+0x22>
	 	__SSD1331_DC_SET();
 8000f66:	2201      	movs	r2, #1
 8000f68:	2110      	movs	r1, #16
 8000f6a:	4811      	ldr	r0, [pc, #68]	; (8000fb0 <ssd1331_write_byte+0x60>)
 8000f6c:	f001 fbd4 	bl	8002718 <HAL_GPIO_WritePin>
 8000f70:	e004      	b.n	8000f7c <ssd1331_write_byte+0x2c>
	} else {
	 	__SSD1331_DC_CLR();
 8000f72:	2200      	movs	r2, #0
 8000f74:	2110      	movs	r1, #16
 8000f76:	480e      	ldr	r0, [pc, #56]	; (8000fb0 <ssd1331_write_byte+0x60>)
 8000f78:	f001 fbce 	bl	8002718 <HAL_GPIO_WritePin>
	}
	
	__SSD1331_CS_CLR();
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2108      	movs	r1, #8
 8000f80:	480b      	ldr	r0, [pc, #44]	; (8000fb0 <ssd1331_write_byte+0x60>)
 8000f82:	f001 fbc9 	bl	8002718 <HAL_GPIO_WritePin>
	__SSD1331_WRITE_BYTE(chData);
 8000f86:	1df9      	adds	r1, r7, #7
 8000f88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	4809      	ldr	r0, [pc, #36]	; (8000fb4 <ssd1331_write_byte+0x64>)
 8000f90:	f003 f859 	bl	8004046 <HAL_SPI_Transmit>
	
	__SSD1331_CS_SET();
 8000f94:	2201      	movs	r2, #1
 8000f96:	2108      	movs	r1, #8
 8000f98:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <ssd1331_write_byte+0x60>)
 8000f9a:	f001 fbbd 	bl	8002718 <HAL_GPIO_WritePin>
	__SSD1331_DC_SET();
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	2110      	movs	r1, #16
 8000fa2:	4803      	ldr	r0, [pc, #12]	; (8000fb0 <ssd1331_write_byte+0x60>)
 8000fa4:	f001 fbb8 	bl	8002718 <HAL_GPIO_WritePin>
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40020000 	.word	0x40020000
 8000fb4:	20000278 	.word	0x20000278

08000fb8 <ssd1331_draw_point>:

void ssd1331_draw_point(uint8_t chXpos, uint8_t chYpos, uint16_t hwColor) 
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	71bb      	strb	r3, [r7, #6]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	80bb      	strh	r3, [r7, #4]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	2b5f      	cmp	r3, #95	; 0x5f
 8000fce:	d82b      	bhi.n	8001028 <ssd1331_draw_point+0x70>
 8000fd0:	79bb      	ldrb	r3, [r7, #6]
 8000fd2:	2b3f      	cmp	r3, #63	; 0x3f
 8000fd4:	d828      	bhi.n	8001028 <ssd1331_draw_point+0x70>
		return;
	}

    //set column point
    ssd1331_write_byte(SET_COLUMN_ADDRESS, SSD1331_CMD);
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	2015      	movs	r0, #21
 8000fda:	f7ff ffb9 	bl	8000f50 <ssd1331_write_byte>
    ssd1331_write_byte(chXpos, SSD1331_CMD);
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff ffb4 	bl	8000f50 <ssd1331_write_byte>
    ssd1331_write_byte(OLED_WIDTH - 1, SSD1331_CMD);
 8000fe8:	2100      	movs	r1, #0
 8000fea:	205f      	movs	r0, #95	; 0x5f
 8000fec:	f7ff ffb0 	bl	8000f50 <ssd1331_write_byte>
    //set row point
    ssd1331_write_byte(SET_ROW_ADDRESS, SSD1331_CMD);
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	2075      	movs	r0, #117	; 0x75
 8000ff4:	f7ff ffac 	bl	8000f50 <ssd1331_write_byte>
    ssd1331_write_byte(chYpos, SSD1331_CMD);
 8000ff8:	79bb      	ldrb	r3, [r7, #6]
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ffa7 	bl	8000f50 <ssd1331_write_byte>
    ssd1331_write_byte(OLED_HEIGHT - 1, SSD1331_CMD);
 8001002:	2100      	movs	r1, #0
 8001004:	203f      	movs	r0, #63	; 0x3f
 8001006:	f7ff ffa3 	bl	8000f50 <ssd1331_write_byte>
    
    //fill 16bit colour
	ssd1331_write_byte(hwColor >> 8, SSD1331_DATA);
 800100a:	88bb      	ldrh	r3, [r7, #4]
 800100c:	0a1b      	lsrs	r3, r3, #8
 800100e:	b29b      	uxth	r3, r3
 8001010:	b2db      	uxtb	r3, r3
 8001012:	2101      	movs	r1, #1
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ff9b 	bl	8000f50 <ssd1331_write_byte>
	ssd1331_write_byte(hwColor, SSD1331_DATA);   
 800101a:	88bb      	ldrh	r3, [r7, #4]
 800101c:	b2db      	uxtb	r3, r3
 800101e:	2101      	movs	r1, #1
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ff95 	bl	8000f50 <ssd1331_write_byte>
 8001026:	e000      	b.n	800102a <ssd1331_draw_point+0x72>
		return;
 8001028:	bf00      	nop
}
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <ssd1331_draw_line>:

void ssd1331_draw_line(uint8_t chXpos0, uint8_t chYpos0, uint8_t chXpos1, uint8_t chYpos1, uint16_t hwColor) 
{
 8001030:	b590      	push	{r4, r7, lr}
 8001032:	b08b      	sub	sp, #44	; 0x2c
 8001034:	af00      	add	r7, sp, #0
 8001036:	4604      	mov	r4, r0
 8001038:	4608      	mov	r0, r1
 800103a:	4611      	mov	r1, r2
 800103c:	461a      	mov	r2, r3
 800103e:	4623      	mov	r3, r4
 8001040:	71fb      	strb	r3, [r7, #7]
 8001042:	4603      	mov	r3, r0
 8001044:	71bb      	strb	r3, [r7, #6]
 8001046:	460b      	mov	r3, r1
 8001048:	717b      	strb	r3, [r7, #5]
 800104a:	4613      	mov	r3, r2
 800104c:	713b      	strb	r3, [r7, #4]
	int x = chXpos1 - chXpos0;
 800104e:	797a      	ldrb	r2, [r7, #5]
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	623b      	str	r3, [r7, #32]
    int y = chYpos1 - chYpos0;
 8001056:	793a      	ldrb	r2, [r7, #4]
 8001058:	79bb      	ldrb	r3, [r7, #6]
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	61fb      	str	r3, [r7, #28]
    int dx = abs(x), sx = chXpos0 < chXpos1 ? 1 : -1;
 800105e:	6a3b      	ldr	r3, [r7, #32]
 8001060:	2b00      	cmp	r3, #0
 8001062:	bfb8      	it	lt
 8001064:	425b      	neglt	r3, r3
 8001066:	61bb      	str	r3, [r7, #24]
 8001068:	79fa      	ldrb	r2, [r7, #7]
 800106a:	797b      	ldrb	r3, [r7, #5]
 800106c:	429a      	cmp	r2, r3
 800106e:	d201      	bcs.n	8001074 <ssd1331_draw_line+0x44>
 8001070:	2301      	movs	r3, #1
 8001072:	e001      	b.n	8001078 <ssd1331_draw_line+0x48>
 8001074:	f04f 33ff 	mov.w	r3, #4294967295
 8001078:	617b      	str	r3, [r7, #20]
    int dy = -abs(y), sy = chYpos0 < chYpos1 ? 1 : -1;
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	2b00      	cmp	r3, #0
 800107e:	bfb8      	it	lt
 8001080:	425b      	neglt	r3, r3
 8001082:	425b      	negs	r3, r3
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	79ba      	ldrb	r2, [r7, #6]
 8001088:	793b      	ldrb	r3, [r7, #4]
 800108a:	429a      	cmp	r2, r3
 800108c:	d201      	bcs.n	8001092 <ssd1331_draw_line+0x62>
 800108e:	2301      	movs	r3, #1
 8001090:	e001      	b.n	8001096 <ssd1331_draw_line+0x66>
 8001092:	f04f 33ff 	mov.w	r3, #4294967295
 8001096:	60fb      	str	r3, [r7, #12]
    int err = dx + dy, e2;
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	4413      	add	r3, r2
 800109e:	627b      	str	r3, [r7, #36]	; 0x24

	if (chXpos0 >= OLED_WIDTH || chYpos0 >= OLED_HEIGHT || chXpos1 >= OLED_WIDTH || chYpos1 >= OLED_HEIGHT) {
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	2b5f      	cmp	r3, #95	; 0x5f
 80010a4:	d834      	bhi.n	8001110 <ssd1331_draw_line+0xe0>
 80010a6:	79bb      	ldrb	r3, [r7, #6]
 80010a8:	2b3f      	cmp	r3, #63	; 0x3f
 80010aa:	d831      	bhi.n	8001110 <ssd1331_draw_line+0xe0>
 80010ac:	797b      	ldrb	r3, [r7, #5]
 80010ae:	2b5f      	cmp	r3, #95	; 0x5f
 80010b0:	d82e      	bhi.n	8001110 <ssd1331_draw_line+0xe0>
 80010b2:	793b      	ldrb	r3, [r7, #4]
 80010b4:	2b3f      	cmp	r3, #63	; 0x3f
 80010b6:	d82b      	bhi.n	8001110 <ssd1331_draw_line+0xe0>
		return;
	}
    
    for (;;){
        ssd1331_draw_point(chXpos0, chYpos0 , hwColor);
 80010b8:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80010ba:	79b9      	ldrb	r1, [r7, #6]
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff ff7a 	bl	8000fb8 <ssd1331_draw_point>
        e2 = 2 * err;
 80010c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	60bb      	str	r3, [r7, #8]
        if (e2 >= dy) {     
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	db0c      	blt.n	80010ec <ssd1331_draw_line+0xbc>
            if (chXpos0 == chXpos1) break;
 80010d2:	79fa      	ldrb	r2, [r7, #7]
 80010d4:	797b      	ldrb	r3, [r7, #5]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d01c      	beq.n	8001114 <ssd1331_draw_line+0xe4>
            err += dy; chXpos0 += sx;
 80010da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	4413      	add	r3, r2
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	4413      	add	r3, r2
 80010ea:	71fb      	strb	r3, [r7, #7]
        }
        if (e2 <= dx) {
 80010ec:	68ba      	ldr	r2, [r7, #8]
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	dce1      	bgt.n	80010b8 <ssd1331_draw_line+0x88>
            if (chYpos0 == chYpos1) break;
 80010f4:	79ba      	ldrb	r2, [r7, #6]
 80010f6:	793b      	ldrb	r3, [r7, #4]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d00d      	beq.n	8001118 <ssd1331_draw_line+0xe8>
            err += dx; chYpos0 += sy;
 80010fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	4413      	add	r3, r2
 8001102:	627b      	str	r3, [r7, #36]	; 0x24
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	b2da      	uxtb	r2, r3
 8001108:	79bb      	ldrb	r3, [r7, #6]
 800110a:	4413      	add	r3, r2
 800110c:	71bb      	strb	r3, [r7, #6]
        ssd1331_draw_point(chXpos0, chYpos0 , hwColor);
 800110e:	e7d3      	b.n	80010b8 <ssd1331_draw_line+0x88>
		return;
 8001110:	bf00      	nop
 8001112:	e002      	b.n	800111a <ssd1331_draw_line+0xea>
            if (chXpos0 == chXpos1) break;
 8001114:	bf00      	nop
 8001116:	e000      	b.n	800111a <ssd1331_draw_line+0xea>
            if (chYpos0 == chYpos1) break;
 8001118:	bf00      	nop
        }
    }
}
 800111a:	372c      	adds	r7, #44	; 0x2c
 800111c:	46bd      	mov	sp, r7
 800111e:	bd90      	pop	{r4, r7, pc}

08001120 <ssd1331_display_char>:
  * @param  chSize: 
  * @param  chMode
  * @retval 
**/
void ssd1331_display_char(uint8_t chXpos, uint8_t chYpos, uint8_t chChr, uint8_t chSize, uint16_t hwColor)
{      	
 8001120:	b590      	push	{r4, r7, lr}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	4604      	mov	r4, r0
 8001128:	4608      	mov	r0, r1
 800112a:	4611      	mov	r1, r2
 800112c:	461a      	mov	r2, r3
 800112e:	4623      	mov	r3, r4
 8001130:	71fb      	strb	r3, [r7, #7]
 8001132:	4603      	mov	r3, r0
 8001134:	71bb      	strb	r3, [r7, #6]
 8001136:	460b      	mov	r3, r1
 8001138:	717b      	strb	r3, [r7, #5]
 800113a:	4613      	mov	r3, r2
 800113c:	713b      	strb	r3, [r7, #4]
	uint8_t i, j, chTemp;
	uint8_t chYpos0 = chYpos;
 800113e:	79bb      	ldrb	r3, [r7, #6]
 8001140:	733b      	strb	r3, [r7, #12]

	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	2b5f      	cmp	r3, #95	; 0x5f
 8001146:	d850      	bhi.n	80011ea <ssd1331_display_char+0xca>
 8001148:	79bb      	ldrb	r3, [r7, #6]
 800114a:	2b3f      	cmp	r3, #63	; 0x3f
 800114c:	d84d      	bhi.n	80011ea <ssd1331_display_char+0xca>
		return;
	}
					   
    for (i = 0; i < chSize; i ++) {   
 800114e:	2300      	movs	r3, #0
 8001150:	73fb      	strb	r3, [r7, #15]
 8001152:	e045      	b.n	80011e0 <ssd1331_display_char+0xc0>
		if (FONT_1206 == chSize) {
 8001154:	793b      	ldrb	r3, [r7, #4]
 8001156:	2b0c      	cmp	r3, #12
 8001158:	d10d      	bne.n	8001176 <ssd1331_display_char+0x56>
			chTemp = c_chFont1206[chChr - 0x20][i];  
 800115a:	797b      	ldrb	r3, [r7, #5]
 800115c:	f1a3 0220 	sub.w	r2, r3, #32
 8001160:	7bf9      	ldrb	r1, [r7, #15]
 8001162:	4824      	ldr	r0, [pc, #144]	; (80011f4 <ssd1331_display_char+0xd4>)
 8001164:	4613      	mov	r3, r2
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	4413      	add	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	4403      	add	r3, r0
 800116e:	440b      	add	r3, r1
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	737b      	strb	r3, [r7, #13]
 8001174:	e00c      	b.n	8001190 <ssd1331_display_char+0x70>
		} else if (FONT_1608 == chSize) { 
 8001176:	793b      	ldrb	r3, [r7, #4]
 8001178:	2b10      	cmp	r3, #16
 800117a:	d109      	bne.n	8001190 <ssd1331_display_char+0x70>
			chTemp = c_chFont1608[chChr - 0x20][i];
 800117c:	797b      	ldrb	r3, [r7, #5]
 800117e:	f1a3 0220 	sub.w	r2, r3, #32
 8001182:	7bfb      	ldrb	r3, [r7, #15]
 8001184:	491c      	ldr	r1, [pc, #112]	; (80011f8 <ssd1331_display_char+0xd8>)
 8001186:	0112      	lsls	r2, r2, #4
 8001188:	440a      	add	r2, r1
 800118a:	4413      	add	r3, r2
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	737b      	strb	r3, [r7, #13]
		}
		
        for (j = 0; j < 8; j ++) {
 8001190:	2300      	movs	r3, #0
 8001192:	73bb      	strb	r3, [r7, #14]
 8001194:	e01e      	b.n	80011d4 <ssd1331_display_char+0xb4>
    		if (chTemp & 0x80) {
 8001196:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800119a:	2b00      	cmp	r3, #0
 800119c:	da05      	bge.n	80011aa <ssd1331_display_char+0x8a>
				ssd1331_draw_point(chXpos, chYpos, hwColor);
 800119e:	8c3a      	ldrh	r2, [r7, #32]
 80011a0:	79b9      	ldrb	r1, [r7, #6]
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff07 	bl	8000fb8 <ssd1331_draw_point>
    		}			
			chTemp <<= 1;
 80011aa:	7b7b      	ldrb	r3, [r7, #13]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	737b      	strb	r3, [r7, #13]
			chYpos ++;
 80011b0:	79bb      	ldrb	r3, [r7, #6]
 80011b2:	3301      	adds	r3, #1
 80011b4:	71bb      	strb	r3, [r7, #6]
			if ((chYpos - chYpos0) == chSize) {
 80011b6:	79ba      	ldrb	r2, [r7, #6]
 80011b8:	7b3b      	ldrb	r3, [r7, #12]
 80011ba:	1ad2      	subs	r2, r2, r3
 80011bc:	793b      	ldrb	r3, [r7, #4]
 80011be:	429a      	cmp	r2, r3
 80011c0:	d105      	bne.n	80011ce <ssd1331_display_char+0xae>
				chYpos = chYpos0;
 80011c2:	7b3b      	ldrb	r3, [r7, #12]
 80011c4:	71bb      	strb	r3, [r7, #6]
				chXpos ++;
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	3301      	adds	r3, #1
 80011ca:	71fb      	strb	r3, [r7, #7]
				break;
 80011cc:	e005      	b.n	80011da <ssd1331_display_char+0xba>
        for (j = 0; j < 8; j ++) {
 80011ce:	7bbb      	ldrb	r3, [r7, #14]
 80011d0:	3301      	adds	r3, #1
 80011d2:	73bb      	strb	r3, [r7, #14]
 80011d4:	7bbb      	ldrb	r3, [r7, #14]
 80011d6:	2b07      	cmp	r3, #7
 80011d8:	d9dd      	bls.n	8001196 <ssd1331_display_char+0x76>
    for (i = 0; i < chSize; i ++) {   
 80011da:	7bfb      	ldrb	r3, [r7, #15]
 80011dc:	3301      	adds	r3, #1
 80011de:	73fb      	strb	r3, [r7, #15]
 80011e0:	7bfa      	ldrb	r2, [r7, #15]
 80011e2:	793b      	ldrb	r3, [r7, #4]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d3b5      	bcc.n	8001154 <ssd1331_display_char+0x34>
 80011e8:	e000      	b.n	80011ec <ssd1331_display_char+0xcc>
		return;
 80011ea:	bf00      	nop
			}
		}  	 
    } 
}
 80011ec:	3714      	adds	r7, #20
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd90      	pop	{r4, r7, pc}
 80011f2:	bf00      	nop
 80011f4:	08007d8c 	.word	0x08007d8c
 80011f8:	08008200 	.word	0x08008200

080011fc <ssd1331_display_string>:
  * @param  pchString: Pointer to a string to display on the screen 
  *         
  * @retval  None
**/
void ssd1331_display_string(uint8_t chXpos, uint8_t chYpos, const uint8_t *pchString, uint8_t chSize, uint16_t hwColor)
{
 80011fc:	b590      	push	{r4, r7, lr}
 80011fe:	b085      	sub	sp, #20
 8001200:	af02      	add	r7, sp, #8
 8001202:	603a      	str	r2, [r7, #0]
 8001204:	461a      	mov	r2, r3
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
 800120a:	460b      	mov	r3, r1
 800120c:	71bb      	strb	r3, [r7, #6]
 800120e:	4613      	mov	r3, r2
 8001210:	717b      	strb	r3, [r7, #5]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	2b5f      	cmp	r3, #95	; 0x5f
 8001216:	d836      	bhi.n	8001286 <ssd1331_display_string+0x8a>
 8001218:	79bb      	ldrb	r3, [r7, #6]
 800121a:	2b3f      	cmp	r3, #63	; 0x3f
 800121c:	d833      	bhi.n	8001286 <ssd1331_display_string+0x8a>
		return;
	}
	
    while (*pchString != '\0') {       
 800121e:	e02d      	b.n	800127c <ssd1331_display_string+0x80>
        if (chXpos > (OLED_WIDTH - chSize / 2)) {
 8001220:	79fa      	ldrb	r2, [r7, #7]
 8001222:	797b      	ldrb	r3, [r7, #5]
 8001224:	085b      	lsrs	r3, r3, #1
 8001226:	b2db      	uxtb	r3, r3
 8001228:	f1c3 0360 	rsb	r3, r3, #96	; 0x60
 800122c:	429a      	cmp	r2, r3
 800122e:	dd12      	ble.n	8001256 <ssd1331_display_string+0x5a>
			chXpos = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	71fb      	strb	r3, [r7, #7]
			chYpos += chSize;
 8001234:	79ba      	ldrb	r2, [r7, #6]
 8001236:	797b      	ldrb	r3, [r7, #5]
 8001238:	4413      	add	r3, r2
 800123a:	71bb      	strb	r3, [r7, #6]
			if (chYpos > (OLED_HEIGHT - chSize)) {
 800123c:	79ba      	ldrb	r2, [r7, #6]
 800123e:	797b      	ldrb	r3, [r7, #5]
 8001240:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001244:	429a      	cmp	r2, r3
 8001246:	dd06      	ble.n	8001256 <ssd1331_display_string+0x5a>
				chYpos = chXpos = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	71fb      	strb	r3, [r7, #7]
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	71bb      	strb	r3, [r7, #6]
				ssd1331_clear_screen(0x00);
 8001250:	2000      	movs	r0, #0
 8001252:	f000 f86d 	bl	8001330 <ssd1331_clear_screen>
			}
		}
		
        ssd1331_display_char(chXpos, chYpos, *pchString, chSize, hwColor);
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	781a      	ldrb	r2, [r3, #0]
 800125a:	797c      	ldrb	r4, [r7, #5]
 800125c:	79b9      	ldrb	r1, [r7, #6]
 800125e:	79f8      	ldrb	r0, [r7, #7]
 8001260:	8b3b      	ldrh	r3, [r7, #24]
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	4623      	mov	r3, r4
 8001266:	f7ff ff5b 	bl	8001120 <ssd1331_display_char>
        chXpos += chSize / 2;
 800126a:	797b      	ldrb	r3, [r7, #5]
 800126c:	085b      	lsrs	r3, r3, #1
 800126e:	b2da      	uxtb	r2, r3
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	4413      	add	r3, r2
 8001274:	71fb      	strb	r3, [r7, #7]
        pchString ++;
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	3301      	adds	r3, #1
 800127a:	603b      	str	r3, [r7, #0]
    while (*pchString != '\0') {       
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d1cd      	bne.n	8001220 <ssd1331_display_string+0x24>
 8001284:	e000      	b.n	8001288 <ssd1331_display_string+0x8c>
		return;
 8001286:	bf00      	nop
    } 
}
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	bd90      	pop	{r4, r7, pc}

0800128e <ssd1331_draw_bitmap>:
		}
	}
}

void ssd1331_draw_bitmap(uint8_t chXpos, uint8_t chYpos, const uint8_t *pchBmp, uint8_t chWidth, uint8_t chHeight, uint16_t hwColor)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b084      	sub	sp, #16
 8001292:	af00      	add	r7, sp, #0
 8001294:	603a      	str	r2, [r7, #0]
 8001296:	461a      	mov	r2, r3
 8001298:	4603      	mov	r3, r0
 800129a:	71fb      	strb	r3, [r7, #7]
 800129c:	460b      	mov	r3, r1
 800129e:	71bb      	strb	r3, [r7, #6]
 80012a0:	4613      	mov	r3, r2
 80012a2:	717b      	strb	r3, [r7, #5]
	uint16_t i, j, byteWidth = (chWidth + 7) / 8;
 80012a4:	797b      	ldrb	r3, [r7, #5]
 80012a6:	3307      	adds	r3, #7
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	da00      	bge.n	80012ae <ssd1331_draw_bitmap+0x20>
 80012ac:	3307      	adds	r3, #7
 80012ae:	10db      	asrs	r3, r3, #3
 80012b0:	817b      	strh	r3, [r7, #10]
	
    for(j = 0; j < chHeight; j ++){
 80012b2:	2300      	movs	r3, #0
 80012b4:	81bb      	strh	r3, [r7, #12]
 80012b6:	e031      	b.n	800131c <ssd1331_draw_bitmap+0x8e>
        for(i = 0; i < chWidth; i ++ ) {
 80012b8:	2300      	movs	r3, #0
 80012ba:	81fb      	strh	r3, [r7, #14]
 80012bc:	e026      	b.n	800130c <ssd1331_draw_bitmap+0x7e>
            if(*(pchBmp + j * byteWidth + i / 8) & (128 >> (i & 7))) {
 80012be:	89bb      	ldrh	r3, [r7, #12]
 80012c0:	897a      	ldrh	r2, [r7, #10]
 80012c2:	fb02 f303 	mul.w	r3, r2, r3
 80012c6:	461a      	mov	r2, r3
 80012c8:	89fb      	ldrh	r3, [r7, #14]
 80012ca:	08db      	lsrs	r3, r3, #3
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	4413      	add	r3, r2
 80012d0:	683a      	ldr	r2, [r7, #0]
 80012d2:	4413      	add	r3, r2
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	4619      	mov	r1, r3
 80012d8:	89fb      	ldrh	r3, [r7, #14]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	2280      	movs	r2, #128	; 0x80
 80012e0:	fa42 f303 	asr.w	r3, r2, r3
 80012e4:	400b      	ands	r3, r1
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d00d      	beq.n	8001306 <ssd1331_draw_bitmap+0x78>
                ssd1331_draw_point(chXpos + i, chYpos + j, hwColor);
 80012ea:	89fb      	ldrh	r3, [r7, #14]
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	4413      	add	r3, r2
 80012f2:	b2d8      	uxtb	r0, r3
 80012f4:	89bb      	ldrh	r3, [r7, #12]
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	79bb      	ldrb	r3, [r7, #6]
 80012fa:	4413      	add	r3, r2
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	8bba      	ldrh	r2, [r7, #28]
 8001300:	4619      	mov	r1, r3
 8001302:	f7ff fe59 	bl	8000fb8 <ssd1331_draw_point>
        for(i = 0; i < chWidth; i ++ ) {
 8001306:	89fb      	ldrh	r3, [r7, #14]
 8001308:	3301      	adds	r3, #1
 800130a:	81fb      	strh	r3, [r7, #14]
 800130c:	797b      	ldrb	r3, [r7, #5]
 800130e:	b29b      	uxth	r3, r3
 8001310:	89fa      	ldrh	r2, [r7, #14]
 8001312:	429a      	cmp	r2, r3
 8001314:	d3d3      	bcc.n	80012be <ssd1331_draw_bitmap+0x30>
    for(j = 0; j < chHeight; j ++){
 8001316:	89bb      	ldrh	r3, [r7, #12]
 8001318:	3301      	adds	r3, #1
 800131a:	81bb      	strh	r3, [r7, #12]
 800131c:	7e3b      	ldrb	r3, [r7, #24]
 800131e:	b29b      	uxth	r3, r3
 8001320:	89ba      	ldrh	r2, [r7, #12]
 8001322:	429a      	cmp	r2, r3
 8001324:	d3c8      	bcc.n	80012b8 <ssd1331_draw_bitmap+0x2a>
            }
        }
    }
}
 8001326:	bf00      	nop
 8001328:	bf00      	nop
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <ssd1331_clear_screen>:

void ssd1331_clear_screen(uint16_t hwColor)  
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;
	
	for(i = 0; i < OLED_HEIGHT; i ++){
 800133a:	2300      	movs	r3, #0
 800133c:	81fb      	strh	r3, [r7, #14]
 800133e:	e013      	b.n	8001368 <ssd1331_clear_screen+0x38>
		for(j = 0; j < OLED_WIDTH; j ++){
 8001340:	2300      	movs	r3, #0
 8001342:	81bb      	strh	r3, [r7, #12]
 8001344:	e00a      	b.n	800135c <ssd1331_clear_screen+0x2c>
			ssd1331_draw_point(j, i, hwColor);
 8001346:	89bb      	ldrh	r3, [r7, #12]
 8001348:	b2db      	uxtb	r3, r3
 800134a:	89fa      	ldrh	r2, [r7, #14]
 800134c:	b2d1      	uxtb	r1, r2
 800134e:	88fa      	ldrh	r2, [r7, #6]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fe31 	bl	8000fb8 <ssd1331_draw_point>
		for(j = 0; j < OLED_WIDTH; j ++){
 8001356:	89bb      	ldrh	r3, [r7, #12]
 8001358:	3301      	adds	r3, #1
 800135a:	81bb      	strh	r3, [r7, #12]
 800135c:	89bb      	ldrh	r3, [r7, #12]
 800135e:	2b5f      	cmp	r3, #95	; 0x5f
 8001360:	d9f1      	bls.n	8001346 <ssd1331_clear_screen+0x16>
	for(i = 0; i < OLED_HEIGHT; i ++){
 8001362:	89fb      	ldrh	r3, [r7, #14]
 8001364:	3301      	adds	r3, #1
 8001366:	81fb      	strh	r3, [r7, #14]
 8001368:	89fb      	ldrh	r3, [r7, #14]
 800136a:	2b3f      	cmp	r3, #63	; 0x3f
 800136c:	d9e8      	bls.n	8001340 <ssd1331_clear_screen+0x10>
		}
	}
}
 800136e:	bf00      	nop
 8001370:	bf00      	nop
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <ssd1331_init>:


void ssd1331_init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
	__SSD1331_RES_SET();  //RES set
 800137c:	2201      	movs	r2, #1
 800137e:	2140      	movs	r1, #64	; 0x40
 8001380:	4852      	ldr	r0, [pc, #328]	; (80014cc <ssd1331_init+0x154>)
 8001382:	f001 f9c9 	bl	8002718 <HAL_GPIO_WritePin>
	__SSD1331_CS_SET();
 8001386:	2201      	movs	r2, #1
 8001388:	2108      	movs	r1, #8
 800138a:	4850      	ldr	r0, [pc, #320]	; (80014cc <ssd1331_init+0x154>)
 800138c:	f001 f9c4 	bl	8002718 <HAL_GPIO_WritePin>
	
	ssd1331_write_byte(DISPLAY_OFF, SSD1331_CMD);          //Display Off
 8001390:	2100      	movs	r1, #0
 8001392:	20ae      	movs	r0, #174	; 0xae
 8001394:	f7ff fddc 	bl	8000f50 <ssd1331_write_byte>
    ssd1331_write_byte(SET_CONTRAST_A, SSD1331_CMD);       //Set contrast for color A
 8001398:	2100      	movs	r1, #0
 800139a:	2081      	movs	r0, #129	; 0x81
 800139c:	f7ff fdd8 	bl	8000f50 <ssd1331_write_byte>
    ssd1331_write_byte(0xFF, SSD1331_CMD);                     //145 0x91
 80013a0:	2100      	movs	r1, #0
 80013a2:	20ff      	movs	r0, #255	; 0xff
 80013a4:	f7ff fdd4 	bl	8000f50 <ssd1331_write_byte>
    ssd1331_write_byte(SET_CONTRAST_B, SSD1331_CMD);       //Set contrast for color B
 80013a8:	2100      	movs	r1, #0
 80013aa:	2082      	movs	r0, #130	; 0x82
 80013ac:	f7ff fdd0 	bl	8000f50 <ssd1331_write_byte>
    ssd1331_write_byte(0xFF, SSD1331_CMD);                     //80 0x50
 80013b0:	2100      	movs	r1, #0
 80013b2:	20ff      	movs	r0, #255	; 0xff
 80013b4:	f7ff fdcc 	bl	8000f50 <ssd1331_write_byte>
    ssd1331_write_byte(SET_CONTRAST_C, SSD1331_CMD);       //Set contrast for color C
 80013b8:	2100      	movs	r1, #0
 80013ba:	2083      	movs	r0, #131	; 0x83
 80013bc:	f7ff fdc8 	bl	8000f50 <ssd1331_write_byte>
    ssd1331_write_byte(0xFF, SSD1331_CMD);                     //125 0x7D
 80013c0:	2100      	movs	r1, #0
 80013c2:	20ff      	movs	r0, #255	; 0xff
 80013c4:	f7ff fdc4 	bl	8000f50 <ssd1331_write_byte>
    ssd1331_write_byte(MASTER_CURRENT_CONTROL, SSD1331_CMD);//master current control
 80013c8:	2100      	movs	r1, #0
 80013ca:	2087      	movs	r0, #135	; 0x87
 80013cc:	f7ff fdc0 	bl	8000f50 <ssd1331_write_byte>
    ssd1331_write_byte(0x06, SSD1331_CMD);                     //6
 80013d0:	2100      	movs	r1, #0
 80013d2:	2006      	movs	r0, #6
 80013d4:	f7ff fdbc 	bl	8000f50 <ssd1331_write_byte>
    ssd1331_write_byte(SET_PRECHARGE_SPEED_A, SSD1331_CMD);//Set Second Pre-change Speed For ColorA
 80013d8:	2100      	movs	r1, #0
 80013da:	208a      	movs	r0, #138	; 0x8a
 80013dc:	f7ff fdb8 	bl	8000f50 <ssd1331_write_byte>
    ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 80013e0:	2100      	movs	r1, #0
 80013e2:	2064      	movs	r0, #100	; 0x64
 80013e4:	f7ff fdb4 	bl	8000f50 <ssd1331_write_byte>
    ssd1331_write_byte(SET_PRECHARGE_SPEED_B, SSD1331_CMD);//Set Second Pre-change Speed For ColorB
 80013e8:	2100      	movs	r1, #0
 80013ea:	208b      	movs	r0, #139	; 0x8b
 80013ec:	f7ff fdb0 	bl	8000f50 <ssd1331_write_byte>
    ssd1331_write_byte(0x78, SSD1331_CMD);                     //120
 80013f0:	2100      	movs	r1, #0
 80013f2:	2078      	movs	r0, #120	; 0x78
 80013f4:	f7ff fdac 	bl	8000f50 <ssd1331_write_byte>
    ssd1331_write_byte(SET_PRECHARGE_SPEED_C, SSD1331_CMD);//Set Second Pre-change Speed For ColorC
 80013f8:	2100      	movs	r1, #0
 80013fa:	208c      	movs	r0, #140	; 0x8c
 80013fc:	f7ff fda8 	bl	8000f50 <ssd1331_write_byte>
    ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 8001400:	2100      	movs	r1, #0
 8001402:	2064      	movs	r0, #100	; 0x64
 8001404:	f7ff fda4 	bl	8000f50 <ssd1331_write_byte>
    ssd1331_write_byte(SET_REMAP, SSD1331_CMD);            //set remap & data format
 8001408:	2100      	movs	r1, #0
 800140a:	20a0      	movs	r0, #160	; 0xa0
 800140c:	f7ff fda0 	bl	8000f50 <ssd1331_write_byte>
    ssd1331_write_byte(0x72, SSD1331_CMD);                     //0x72              
 8001410:	2100      	movs	r1, #0
 8001412:	2072      	movs	r0, #114	; 0x72
 8001414:	f7ff fd9c 	bl	8000f50 <ssd1331_write_byte>
    ssd1331_write_byte(SET_DISPLAY_START_LINE, SSD1331_CMD);//Set display Start Line
 8001418:	2100      	movs	r1, #0
 800141a:	20a1      	movs	r0, #161	; 0xa1
 800141c:	f7ff fd98 	bl	8000f50 <ssd1331_write_byte>
    ssd1331_write_byte(0x0, SSD1331_CMD);
 8001420:	2100      	movs	r1, #0
 8001422:	2000      	movs	r0, #0
 8001424:	f7ff fd94 	bl	8000f50 <ssd1331_write_byte>
    ssd1331_write_byte(SET_DISPLAY_OFFSET, SSD1331_CMD);   //Set display offset
 8001428:	2100      	movs	r1, #0
 800142a:	20a2      	movs	r0, #162	; 0xa2
 800142c:	f7ff fd90 	bl	8000f50 <ssd1331_write_byte>
    ssd1331_write_byte(0x0, SSD1331_CMD);
 8001430:	2100      	movs	r1, #0
 8001432:	2000      	movs	r0, #0
 8001434:	f7ff fd8c 	bl	8000f50 <ssd1331_write_byte>
    ssd1331_write_byte(NORMAL_DISPLAY, SSD1331_CMD);       //Set display mode
 8001438:	2100      	movs	r1, #0
 800143a:	20a4      	movs	r0, #164	; 0xa4
 800143c:	f7ff fd88 	bl	8000f50 <ssd1331_write_byte>
    ssd1331_write_byte(SET_MULTIPLEX_RATIO, SSD1331_CMD);  //Set multiplex ratio
 8001440:	2100      	movs	r1, #0
 8001442:	20a8      	movs	r0, #168	; 0xa8
 8001444:	f7ff fd84 	bl	8000f50 <ssd1331_write_byte>
    ssd1331_write_byte(0x3F, SSD1331_CMD);
 8001448:	2100      	movs	r1, #0
 800144a:	203f      	movs	r0, #63	; 0x3f
 800144c:	f7ff fd80 	bl	8000f50 <ssd1331_write_byte>
    ssd1331_write_byte(SET_MASTER_CONFIGURE, SSD1331_CMD); //Set master configuration
 8001450:	2100      	movs	r1, #0
 8001452:	20ad      	movs	r0, #173	; 0xad
 8001454:	f7ff fd7c 	bl	8000f50 <ssd1331_write_byte>
    ssd1331_write_byte(0x8E, SSD1331_CMD);
 8001458:	2100      	movs	r1, #0
 800145a:	208e      	movs	r0, #142	; 0x8e
 800145c:	f7ff fd78 	bl	8000f50 <ssd1331_write_byte>
    ssd1331_write_byte(POWER_SAVE_MODE, SSD1331_CMD);      //Set Power Save Mode
 8001460:	2100      	movs	r1, #0
 8001462:	20b0      	movs	r0, #176	; 0xb0
 8001464:	f7ff fd74 	bl	8000f50 <ssd1331_write_byte>
    ssd1331_write_byte(0x00, SSD1331_CMD);                     //0x00
 8001468:	2100      	movs	r1, #0
 800146a:	2000      	movs	r0, #0
 800146c:	f7ff fd70 	bl	8000f50 <ssd1331_write_byte>
    ssd1331_write_byte(PHASE_PERIOD_ADJUSTMENT, SSD1331_CMD);//phase 1 and 2 period adjustment
 8001470:	2100      	movs	r1, #0
 8001472:	20b1      	movs	r0, #177	; 0xb1
 8001474:	f7ff fd6c 	bl	8000f50 <ssd1331_write_byte>
    ssd1331_write_byte(0x31, SSD1331_CMD);                     //0x31
 8001478:	2100      	movs	r1, #0
 800147a:	2031      	movs	r0, #49	; 0x31
 800147c:	f7ff fd68 	bl	8000f50 <ssd1331_write_byte>
    ssd1331_write_byte(DISPLAY_CLOCK_DIV, SSD1331_CMD);    //display clock divider/oscillator frequency
 8001480:	2100      	movs	r1, #0
 8001482:	20b3      	movs	r0, #179	; 0xb3
 8001484:	f7ff fd64 	bl	8000f50 <ssd1331_write_byte>
    ssd1331_write_byte(0xF0, SSD1331_CMD);
 8001488:	2100      	movs	r1, #0
 800148a:	20f0      	movs	r0, #240	; 0xf0
 800148c:	f7ff fd60 	bl	8000f50 <ssd1331_write_byte>
    ssd1331_write_byte(SET_PRECHARGE_VOLTAGE, SSD1331_CMD);//Set Pre-Change Level
 8001490:	2100      	movs	r1, #0
 8001492:	20bb      	movs	r0, #187	; 0xbb
 8001494:	f7ff fd5c 	bl	8000f50 <ssd1331_write_byte>
    ssd1331_write_byte(0x3A, SSD1331_CMD);
 8001498:	2100      	movs	r1, #0
 800149a:	203a      	movs	r0, #58	; 0x3a
 800149c:	f7ff fd58 	bl	8000f50 <ssd1331_write_byte>
    ssd1331_write_byte(SET_V_VOLTAGE, SSD1331_CMD);        //Set vcomH
 80014a0:	2100      	movs	r1, #0
 80014a2:	20be      	movs	r0, #190	; 0xbe
 80014a4:	f7ff fd54 	bl	8000f50 <ssd1331_write_byte>
    ssd1331_write_byte(0x3E, SSD1331_CMD);
 80014a8:	2100      	movs	r1, #0
 80014aa:	203e      	movs	r0, #62	; 0x3e
 80014ac:	f7ff fd50 	bl	8000f50 <ssd1331_write_byte>
    ssd1331_write_byte(DEACTIVE_SCROLLING, SSD1331_CMD);   //disable scrolling
 80014b0:	2100      	movs	r1, #0
 80014b2:	202e      	movs	r0, #46	; 0x2e
 80014b4:	f7ff fd4c 	bl	8000f50 <ssd1331_write_byte>
    ssd1331_write_byte(NORMAL_BRIGHTNESS_DISPLAY_ON, SSD1331_CMD);//set display on
 80014b8:	2100      	movs	r1, #0
 80014ba:	20af      	movs	r0, #175	; 0xaf
 80014bc:	f7ff fd48 	bl	8000f50 <ssd1331_write_byte>

//    ssd1331_fill_rect(0, 0, 96, 64, 0x0000);
    ssd1331_clear_screen(0x0000);
 80014c0:	2000      	movs	r0, #0
 80014c2:	f7ff ff35 	bl	8001330 <ssd1331_clear_screen>
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40020000 	.word	0x40020000

080014d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08a      	sub	sp, #40	; 0x28
 80014d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d6:	f107 0314 	add.w	r3, r7, #20
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
 80014e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	613b      	str	r3, [r7, #16]
 80014ea:	4b31      	ldr	r3, [pc, #196]	; (80015b0 <MX_GPIO_Init+0xe0>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	4a30      	ldr	r2, [pc, #192]	; (80015b0 <MX_GPIO_Init+0xe0>)
 80014f0:	f043 0304 	orr.w	r3, r3, #4
 80014f4:	6313      	str	r3, [r2, #48]	; 0x30
 80014f6:	4b2e      	ldr	r3, [pc, #184]	; (80015b0 <MX_GPIO_Init+0xe0>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	f003 0304 	and.w	r3, r3, #4
 80014fe:	613b      	str	r3, [r7, #16]
 8001500:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	4b2a      	ldr	r3, [pc, #168]	; (80015b0 <MX_GPIO_Init+0xe0>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	4a29      	ldr	r2, [pc, #164]	; (80015b0 <MX_GPIO_Init+0xe0>)
 800150c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001510:	6313      	str	r3, [r2, #48]	; 0x30
 8001512:	4b27      	ldr	r3, [pc, #156]	; (80015b0 <MX_GPIO_Init+0xe0>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	4b23      	ldr	r3, [pc, #140]	; (80015b0 <MX_GPIO_Init+0xe0>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	4a22      	ldr	r2, [pc, #136]	; (80015b0 <MX_GPIO_Init+0xe0>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6313      	str	r3, [r2, #48]	; 0x30
 800152e:	4b20      	ldr	r3, [pc, #128]	; (80015b0 <MX_GPIO_Init+0xe0>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	607b      	str	r3, [r7, #4]
 800153e:	4b1c      	ldr	r3, [pc, #112]	; (80015b0 <MX_GPIO_Init+0xe0>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a1b      	ldr	r2, [pc, #108]	; (80015b0 <MX_GPIO_Init+0xe0>)
 8001544:	f043 0302 	orr.w	r3, r3, #2
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b19      	ldr	r3, [pc, #100]	; (80015b0 <MX_GPIO_Init+0xe0>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001556:	2200      	movs	r2, #0
 8001558:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800155c:	4815      	ldr	r0, [pc, #84]	; (80015b4 <MX_GPIO_Init+0xe4>)
 800155e:	f001 f8db 	bl	8002718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OSC_Pin|CS_Pin|DC_Pin|RES_Pin, GPIO_PIN_RESET);
 8001562:	2200      	movs	r2, #0
 8001564:	215a      	movs	r1, #90	; 0x5a
 8001566:	4814      	ldr	r0, [pc, #80]	; (80015b8 <MX_GPIO_Init+0xe8>)
 8001568:	f001 f8d6 	bl	8002718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800156c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001570:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001572:	2301      	movs	r3, #1
 8001574:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157a:	2300      	movs	r3, #0
 800157c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800157e:	f107 0314 	add.w	r3, r7, #20
 8001582:	4619      	mov	r1, r3
 8001584:	480b      	ldr	r0, [pc, #44]	; (80015b4 <MX_GPIO_Init+0xe4>)
 8001586:	f000 ff43 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OSC_Pin|CS_Pin|DC_Pin|RES_Pin;
 800158a:	235a      	movs	r3, #90	; 0x5a
 800158c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158e:	2301      	movs	r3, #1
 8001590:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001596:	2300      	movs	r3, #0
 8001598:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159a:	f107 0314 	add.w	r3, r7, #20
 800159e:	4619      	mov	r1, r3
 80015a0:	4805      	ldr	r0, [pc, #20]	; (80015b8 <MX_GPIO_Init+0xe8>)
 80015a2:	f000 ff35 	bl	8002410 <HAL_GPIO_Init>

}
 80015a6:	bf00      	nop
 80015a8:	3728      	adds	r7, #40	; 0x28
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40023800 	.word	0x40023800
 80015b4:	40020800 	.word	0x40020800
 80015b8:	40020000 	.word	0x40020000

080015bc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015c0:	4b12      	ldr	r3, [pc, #72]	; (800160c <MX_I2C1_Init+0x50>)
 80015c2:	4a13      	ldr	r2, [pc, #76]	; (8001610 <MX_I2C1_Init+0x54>)
 80015c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80015c6:	4b11      	ldr	r3, [pc, #68]	; (800160c <MX_I2C1_Init+0x50>)
 80015c8:	4a12      	ldr	r2, [pc, #72]	; (8001614 <MX_I2C1_Init+0x58>)
 80015ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015cc:	4b0f      	ldr	r3, [pc, #60]	; (800160c <MX_I2C1_Init+0x50>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015d2:	4b0e      	ldr	r3, [pc, #56]	; (800160c <MX_I2C1_Init+0x50>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015d8:	4b0c      	ldr	r3, [pc, #48]	; (800160c <MX_I2C1_Init+0x50>)
 80015da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015e0:	4b0a      	ldr	r3, [pc, #40]	; (800160c <MX_I2C1_Init+0x50>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015e6:	4b09      	ldr	r3, [pc, #36]	; (800160c <MX_I2C1_Init+0x50>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015ec:	4b07      	ldr	r3, [pc, #28]	; (800160c <MX_I2C1_Init+0x50>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015f2:	4b06      	ldr	r3, [pc, #24]	; (800160c <MX_I2C1_Init+0x50>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015f8:	4804      	ldr	r0, [pc, #16]	; (800160c <MX_I2C1_Init+0x50>)
 80015fa:	f001 f8a7 	bl	800274c <HAL_I2C_Init>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001604:	f000 fa56 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20000208 	.word	0x20000208
 8001610:	40005400 	.word	0x40005400
 8001614:	00061a80 	.word	0x00061a80

08001618 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08a      	sub	sp, #40	; 0x28
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a19      	ldr	r2, [pc, #100]	; (800169c <HAL_I2C_MspInit+0x84>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d12b      	bne.n	8001692 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	613b      	str	r3, [r7, #16]
 800163e:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <HAL_I2C_MspInit+0x88>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	4a17      	ldr	r2, [pc, #92]	; (80016a0 <HAL_I2C_MspInit+0x88>)
 8001644:	f043 0302 	orr.w	r3, r3, #2
 8001648:	6313      	str	r3, [r2, #48]	; 0x30
 800164a:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <HAL_I2C_MspInit+0x88>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	613b      	str	r3, [r7, #16]
 8001654:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001656:	23c0      	movs	r3, #192	; 0xc0
 8001658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800165a:	2312      	movs	r3, #18
 800165c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001662:	2303      	movs	r3, #3
 8001664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001666:	2304      	movs	r3, #4
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166a:	f107 0314 	add.w	r3, r7, #20
 800166e:	4619      	mov	r1, r3
 8001670:	480c      	ldr	r0, [pc, #48]	; (80016a4 <HAL_I2C_MspInit+0x8c>)
 8001672:	f000 fecd 	bl	8002410 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <HAL_I2C_MspInit+0x88>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	4a08      	ldr	r2, [pc, #32]	; (80016a0 <HAL_I2C_MspInit+0x88>)
 8001680:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001684:	6413      	str	r3, [r2, #64]	; 0x40
 8001686:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <HAL_I2C_MspInit+0x88>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001692:	bf00      	nop
 8001694:	3728      	adds	r7, #40	; 0x28
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40005400 	.word	0x40005400
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40020400 	.word	0x40020400

080016a8 <lsm_write_reg>:


#define LSM303D_ADDR			0x3a

void lsm_write_reg(uint8_t reg, uint8_t value)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af04      	add	r7, sp, #16
 80016ae:	4603      	mov	r3, r0
 80016b0:	460a      	mov	r2, r1
 80016b2:	71fb      	strb	r3, [r7, #7]
 80016b4:	4613      	mov	r3, r2
 80016b6:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, LSM303D_ADDR, reg, 1, &value, sizeof(value), HAL_MAX_DELAY);
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	f04f 33ff 	mov.w	r3, #4294967295
 80016c0:	9302      	str	r3, [sp, #8]
 80016c2:	2301      	movs	r3, #1
 80016c4:	9301      	str	r3, [sp, #4]
 80016c6:	1dbb      	adds	r3, r7, #6
 80016c8:	9300      	str	r3, [sp, #0]
 80016ca:	2301      	movs	r3, #1
 80016cc:	213a      	movs	r1, #58	; 0x3a
 80016ce:	4803      	ldr	r0, [pc, #12]	; (80016dc <lsm_write_reg+0x34>)
 80016d0:	f001 f980 	bl	80029d4 <HAL_I2C_Mem_Write>
}
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000208 	.word	0x20000208

080016e0 <lsm_read_value>:

	return value;
}

int16_t lsm_read_value(uint8_t reg)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b088      	sub	sp, #32
 80016e4:	af04      	add	r7, sp, #16
 80016e6:	4603      	mov	r3, r0
 80016e8:	71fb      	strb	r3, [r7, #7]
	int16_t value = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	81fb      	strh	r3, [r7, #14]

	HAL_I2C_Mem_Read(&hi2c1, LSM303D_ADDR, reg | 0x80, 1, (uint8_t*)&value, sizeof(value), HAL_MAX_DELAY);
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	f04f 33ff 	mov.w	r3, #4294967295
 80016fc:	9302      	str	r3, [sp, #8]
 80016fe:	2302      	movs	r3, #2
 8001700:	9301      	str	r3, [sp, #4]
 8001702:	f107 030e 	add.w	r3, r7, #14
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	2301      	movs	r3, #1
 800170a:	213a      	movs	r1, #58	; 0x3a
 800170c:	4804      	ldr	r0, [pc, #16]	; (8001720 <lsm_read_value+0x40>)
 800170e:	f001 fa5b 	bl	8002bc8 <HAL_I2C_Mem_Read>

	return value;
 8001712:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001716:	4618      	mov	r0, r3
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000208 	.word	0x20000208
 8001724:	00000000 	.word	0x00000000

08001728 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001728:	b590      	push	{r4, r7, lr}
 800172a:	b085      	sub	sp, #20
 800172c:	af02      	add	r7, sp, #8
 800172e:	6078      	str	r0, [r7, #4]
if(htim->Instance == TIM1)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a8c      	ldr	r2, [pc, #560]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001736:	4293      	cmp	r3, r2
 8001738:	f040 8095 	bne.w	8001866 <HAL_TIM_PeriodElapsedCallback+0x13e>
{
		x2 = 96 * lsm_read_value(LSM303D_OUT_Z_A) / 32768;
 800173c:	202c      	movs	r0, #44	; 0x2c
 800173e:	f7ff ffcf 	bl	80016e0 <lsm_read_value>
 8001742:	4603      	mov	r3, r0
 8001744:	461a      	mov	r2, r3
 8001746:	4613      	mov	r3, r2
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	4413      	add	r3, r2
 800174c:	015b      	lsls	r3, r3, #5
 800174e:	2b00      	cmp	r3, #0
 8001750:	da02      	bge.n	8001758 <HAL_TIM_PeriodElapsedCallback+0x30>
 8001752:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001756:	337f      	adds	r3, #127	; 0x7f
 8001758:	13db      	asrs	r3, r3, #15
 800175a:	461a      	mov	r2, r3
 800175c:	4b83      	ldr	r3, [pc, #524]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x244>)
 800175e:	601a      	str	r2, [r3, #0]
		y2 = 64 * lsm_read_value(LSM303D_OUT_X_A) / 32768;
 8001760:	2028      	movs	r0, #40	; 0x28
 8001762:	f7ff ffbd 	bl	80016e0 <lsm_read_value>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	da01      	bge.n	8001770 <HAL_TIM_PeriodElapsedCallback+0x48>
 800176c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001770:	125b      	asrs	r3, r3, #9
 8001772:	461a      	mov	r2, r3
 8001774:	4b7e      	ldr	r3, [pc, #504]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001776:	601a      	str	r2, [r3, #0]
		alpha = atan2f(x2, y2);
 8001778:	4b7c      	ldr	r3, [pc, #496]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x244>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	ee07 3a90 	vmov	s15, r3
 8001780:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001784:	4b7a      	ldr	r3, [pc, #488]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	ee07 3a10 	vmov	s14, r3
 800178c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001790:	eef0 0a47 	vmov.f32	s1, s14
 8001794:	eeb0 0a67 	vmov.f32	s0, s15
 8001798:	f006 f968 	bl	8007a6c <atan2f>
 800179c:	eef0 7a40 	vmov.f32	s15, s0
 80017a0:	4b74      	ldr	r3, [pc, #464]	; (8001974 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80017a2:	edc3 7a00 	vstr	s15, [r3]
		gradient =  alpha * 180.0f / M_PI - 90.0f;
 80017a6:	4b73      	ldr	r3, [pc, #460]	; (8001974 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80017a8:	edd3 7a00 	vldr	s15, [r3]
 80017ac:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8001978 <HAL_TIM_PeriodElapsedCallback+0x250>
 80017b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017b4:	ee17 0a90 	vmov	r0, s15
 80017b8:	f7fe fece 	bl	8000558 <__aeabi_f2d>
 80017bc:	a368      	add	r3, pc, #416	; (adr r3, 8001960 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80017be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c2:	f7ff f84b 	bl	800085c <__aeabi_ddiv>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	4610      	mov	r0, r2
 80017cc:	4619      	mov	r1, r3
 80017ce:	f04f 0200 	mov.w	r2, #0
 80017d2:	4b6a      	ldr	r3, [pc, #424]	; (800197c <HAL_TIM_PeriodElapsedCallback+0x254>)
 80017d4:	f7fe fd60 	bl	8000298 <__aeabi_dsub>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	4610      	mov	r0, r2
 80017de:	4619      	mov	r1, r3
 80017e0:	f7ff f9ea 	bl	8000bb8 <__aeabi_d2f>
 80017e4:	4603      	mov	r3, r0
 80017e6:	4a66      	ldr	r2, [pc, #408]	; (8001980 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80017e8:	6013      	str	r3, [r2, #0]

		if (x2 <= -47) {
 80017ea:	4b60      	ldr	r3, [pc, #384]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x244>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f113 0f2e 	cmn.w	r3, #46	; 0x2e
 80017f2:	da04      	bge.n	80017fe <HAL_TIM_PeriodElapsedCallback+0xd6>
			x2 = -47;
 80017f4:	4b5d      	ldr	r3, [pc, #372]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x244>)
 80017f6:	f06f 022e 	mvn.w	r2, #46	; 0x2e
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	e014      	b.n	8001828 <HAL_TIM_PeriodElapsedCallback+0x100>
		}
		else if (x2 < 47 && x2 > -47) {
 80017fe:	4b5b      	ldr	r3, [pc, #364]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2b2e      	cmp	r3, #46	; 0x2e
 8001804:	dc09      	bgt.n	800181a <HAL_TIM_PeriodElapsedCallback+0xf2>
 8001806:	4b59      	ldr	r3, [pc, #356]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f113 0f2e 	cmn.w	r3, #46	; 0x2e
 800180e:	db04      	blt.n	800181a <HAL_TIM_PeriodElapsedCallback+0xf2>
			x2 = x2;
 8001810:	4b56      	ldr	r3, [pc, #344]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a55      	ldr	r2, [pc, #340]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001816:	6013      	str	r3, [r2, #0]
 8001818:	e006      	b.n	8001828 <HAL_TIM_PeriodElapsedCallback+0x100>
		}
		else if (x2 >= 47) {
 800181a:	4b54      	ldr	r3, [pc, #336]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x244>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2b2e      	cmp	r3, #46	; 0x2e
 8001820:	dd02      	ble.n	8001828 <HAL_TIM_PeriodElapsedCallback+0x100>
			x2 = 47;
 8001822:	4b52      	ldr	r3, [pc, #328]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001824:	222f      	movs	r2, #47	; 0x2f
 8001826:	601a      	str	r2, [r3, #0]
		}
		if (y2 >= 31) {
 8001828:	4b51      	ldr	r3, [pc, #324]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2b1e      	cmp	r3, #30
 800182e:	dd03      	ble.n	8001838 <HAL_TIM_PeriodElapsedCallback+0x110>
			y2 = 31;
 8001830:	4b4f      	ldr	r3, [pc, #316]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001832:	221f      	movs	r2, #31
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	e016      	b.n	8001866 <HAL_TIM_PeriodElapsedCallback+0x13e>
		}
		else if (y2 < 31 && y2 > -31) {
 8001838:	4b4d      	ldr	r3, [pc, #308]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b1e      	cmp	r3, #30
 800183e:	dc09      	bgt.n	8001854 <HAL_TIM_PeriodElapsedCallback+0x12c>
 8001840:	4b4b      	ldr	r3, [pc, #300]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f113 0f1e 	cmn.w	r3, #30
 8001848:	db04      	blt.n	8001854 <HAL_TIM_PeriodElapsedCallback+0x12c>
			y2 = y2;
 800184a:	4b49      	ldr	r3, [pc, #292]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a48      	ldr	r2, [pc, #288]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	e008      	b.n	8001866 <HAL_TIM_PeriodElapsedCallback+0x13e>
		}
		else if (y2 <= -31) {
 8001854:	4b46      	ldr	r3, [pc, #280]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f113 0f1e 	cmn.w	r3, #30
 800185c:	da03      	bge.n	8001866 <HAL_TIM_PeriodElapsedCallback+0x13e>
			y2 = -31;
 800185e:	4b44      	ldr	r3, [pc, #272]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001860:	f06f 021e 	mvn.w	r2, #30
 8001864:	601a      	str	r2, [r3, #0]
		}
}

	  if(htim->Instance == TIM2)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800186e:	d171      	bne.n	8001954 <HAL_TIM_PeriodElapsedCallback+0x22c>
	  {
			if (i < 10) {
 8001870:	4b44      	ldr	r3, [pc, #272]	; (8001984 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b09      	cmp	r3, #9
 8001876:	dc0b      	bgt.n	8001890 <HAL_TIM_PeriodElapsedCallback+0x168>
				ssd1331_draw_bitmap(0, 0, &logo, 96, 64, GREY);
 8001878:	f24c 6318 	movw	r3, #50712	; 0xc618
 800187c:	9301      	str	r3, [sp, #4]
 800187e:	2340      	movs	r3, #64	; 0x40
 8001880:	9300      	str	r3, [sp, #0]
 8001882:	2360      	movs	r3, #96	; 0x60
 8001884:	4a40      	ldr	r2, [pc, #256]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001886:	2100      	movs	r1, #0
 8001888:	2000      	movs	r0, #0
 800188a:	f7ff fd00 	bl	800128e <ssd1331_draw_bitmap>
 800188e:	e05c      	b.n	800194a <HAL_TIM_PeriodElapsedCallback+0x222>
			}
			else if (i == 10) {
 8001890:	4b3c      	ldr	r3, [pc, #240]	; (8001984 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2b0a      	cmp	r3, #10
 8001896:	d103      	bne.n	80018a0 <HAL_TIM_PeriodElapsedCallback+0x178>
				ssd1331_clear_screen(BLACK);
 8001898:	2000      	movs	r0, #0
 800189a:	f7ff fd49 	bl	8001330 <ssd1331_clear_screen>
 800189e:	e054      	b.n	800194a <HAL_TIM_PeriodElapsedCallback+0x222>
			}
			else  if (i > 10){
 80018a0:	4b38      	ldr	r3, [pc, #224]	; (8001984 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b0a      	cmp	r3, #10
 80018a6:	dd50      	ble.n	800194a <HAL_TIM_PeriodElapsedCallback+0x222>
				ssd1331_draw_line(96 / 2 + x2, (64 / 2 - y2)*1, 96 / 2 - x2, (64 / 2 + y2)*1, RED);
 80018a8:	4b30      	ldr	r3, [pc, #192]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x244>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	3330      	adds	r3, #48	; 0x30
 80018b0:	b2d8      	uxtb	r0, r3
 80018b2:	4b2f      	ldr	r3, [pc, #188]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	f1c3 0320 	rsb	r3, r3, #32
 80018bc:	b2d9      	uxtb	r1, r3
 80018be:	4b2b      	ldr	r3, [pc, #172]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x244>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	f1c3 0330 	rsb	r3, r3, #48	; 0x30
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	4b29      	ldr	r3, [pc, #164]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	3320      	adds	r3, #32
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 80018d8:	9400      	str	r4, [sp, #0]
 80018da:	f7ff fba9 	bl	8001030 <ssd1331_draw_line>
				ssd1331_draw_line(96 / 2 + x2, (64 / 2 - y2)*1, 96 / 2 - x2, (64 / 2 + y2)*1, BLACK);
 80018de:	4b23      	ldr	r3, [pc, #140]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x244>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	3330      	adds	r3, #48	; 0x30
 80018e6:	b2d8      	uxtb	r0, r3
 80018e8:	4b21      	ldr	r3, [pc, #132]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	f1c3 0320 	rsb	r3, r3, #32
 80018f2:	b2d9      	uxtb	r1, r3
 80018f4:	4b1d      	ldr	r3, [pc, #116]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x244>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	f1c3 0330 	rsb	r3, r3, #48	; 0x30
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	4b1b      	ldr	r3, [pc, #108]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	b2db      	uxtb	r3, r3
 8001906:	3320      	adds	r3, #32
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2400      	movs	r4, #0
 800190c:	9400      	str	r4, [sp, #0]
 800190e:	f7ff fb8f 	bl	8001030 <ssd1331_draw_line>

				sprintf(data, "Kat:%.2f", gradient);
 8001912:	4b1b      	ldr	r3, [pc, #108]	; (8001980 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f7fe fe1e 	bl	8000558 <__aeabi_f2d>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	491a      	ldr	r1, [pc, #104]	; (800198c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001922:	481b      	ldr	r0, [pc, #108]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001924:	f003 fe78 	bl	8005618 <siprintf>
				ssd1331_display_string(0, 0, data, FONT_1608, GREEN);
 8001928:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800192c:	9300      	str	r3, [sp, #0]
 800192e:	2310      	movs	r3, #16
 8001930:	4a17      	ldr	r2, [pc, #92]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001932:	2100      	movs	r1, #0
 8001934:	2000      	movs	r0, #0
 8001936:	f7ff fc61 	bl	80011fc <ssd1331_display_string>
				ssd1331_display_string(0, 0, data, FONT_1608, BLACK);
 800193a:	2300      	movs	r3, #0
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	2310      	movs	r3, #16
 8001940:	4a13      	ldr	r2, [pc, #76]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001942:	2100      	movs	r1, #0
 8001944:	2000      	movs	r0, #0
 8001946:	f7ff fc59 	bl	80011fc <ssd1331_display_string>
			}
			i = i+1;
 800194a:	4b0e      	ldr	r3, [pc, #56]	; (8001984 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	3301      	adds	r3, #1
 8001950:	4a0c      	ldr	r2, [pc, #48]	; (8001984 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001952:	6013      	str	r3, [r2, #0]
	  }
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	bd90      	pop	{r4, r7, pc}
 800195c:	f3af 8000 	nop.w
 8001960:	54442d18 	.word	0x54442d18
 8001964:	400921fb 	.word	0x400921fb
 8001968:	40010000 	.word	0x40010000
 800196c:	20000260 	.word	0x20000260
 8001970:	2000025c 	.word	0x2000025c
 8001974:	20000270 	.word	0x20000270
 8001978:	43340000 	.word	0x43340000
 800197c:	40568000 	.word	0x40568000
 8001980:	20000274 	.word	0x20000274
 8001984:	200001f8 	.word	0x200001f8
 8001988:	080087f0 	.word	0x080087f0
 800198c:	08007d80 	.word	0x08007d80
 8001990:	20000264 	.word	0x20000264

08001994 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001998:	f000 fb92 	bl	80020c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800199c:	f000 f820 	bl	80019e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019a0:	f7ff fd96 	bl	80014d0 <MX_GPIO_Init>
  MX_TIM1_Init();
 80019a4:	f000 fa66 	bl	8001e74 <MX_TIM1_Init>
  MX_I2C1_Init();
 80019a8:	f7ff fe08 	bl	80015bc <MX_I2C1_Init>
  MX_SPI1_Init();
 80019ac:	f000 f888 	bl	8001ac0 <MX_SPI1_Init>
  MX_TIM2_Init();
 80019b0:	f000 fab2 	bl	8001f18 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  ssd1331_init();
 80019b4:	f7ff fce0 	bl	8001378 <ssd1331_init>
  HAL_TIM_Base_Start_IT(&htim1);
 80019b8:	4807      	ldr	r0, [pc, #28]	; (80019d8 <main+0x44>)
 80019ba:	f002 fd9b 	bl	80044f4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80019be:	4807      	ldr	r0, [pc, #28]	; (80019dc <main+0x48>)
 80019c0:	f002 fd98 	bl	80044f4 <HAL_TIM_Base_Start_IT>

  lsm_write_reg(LSM303D_CTRL1, 0x40|0x07); // AODR2 (25Hz) | AXEN | AYEN | AZEN
 80019c4:	2147      	movs	r1, #71	; 0x47
 80019c6:	2020      	movs	r0, #32
 80019c8:	f7ff fe6e 	bl	80016a8 <lsm_write_reg>
  HAL_Delay(1000);
 80019cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019d0:	f000 fbe8 	bl	80021a4 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019d4:	e7fe      	b.n	80019d4 <main+0x40>
 80019d6:	bf00      	nop
 80019d8:	200002d0 	.word	0x200002d0
 80019dc:	20000318 	.word	0x20000318

080019e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b094      	sub	sp, #80	; 0x50
 80019e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019e6:	f107 0320 	add.w	r3, r7, #32
 80019ea:	2230      	movs	r2, #48	; 0x30
 80019ec:	2100      	movs	r1, #0
 80019ee:	4618      	mov	r0, r3
 80019f0:	f003 f9a0 	bl	8004d34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019f4:	f107 030c 	add.w	r3, r7, #12
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a04:	2300      	movs	r3, #0
 8001a06:	60bb      	str	r3, [r7, #8]
 8001a08:	4b28      	ldr	r3, [pc, #160]	; (8001aac <SystemClock_Config+0xcc>)
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0c:	4a27      	ldr	r2, [pc, #156]	; (8001aac <SystemClock_Config+0xcc>)
 8001a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a12:	6413      	str	r3, [r2, #64]	; 0x40
 8001a14:	4b25      	ldr	r3, [pc, #148]	; (8001aac <SystemClock_Config+0xcc>)
 8001a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a20:	2300      	movs	r3, #0
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	4b22      	ldr	r3, [pc, #136]	; (8001ab0 <SystemClock_Config+0xd0>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a2c:	4a20      	ldr	r2, [pc, #128]	; (8001ab0 <SystemClock_Config+0xd0>)
 8001a2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a32:	6013      	str	r3, [r2, #0]
 8001a34:	4b1e      	ldr	r3, [pc, #120]	; (8001ab0 <SystemClock_Config+0xd0>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a3c:	607b      	str	r3, [r7, #4]
 8001a3e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a40:	2301      	movs	r3, #1
 8001a42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001a54:	2319      	movs	r3, #25
 8001a56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001a58:	2390      	movs	r3, #144	; 0x90
 8001a5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a60:	2304      	movs	r3, #4
 8001a62:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a64:	f107 0320 	add.w	r3, r7, #32
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f001 fe2f 	bl	80036cc <HAL_RCC_OscConfig>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001a74:	f000 f81e 	bl	8001ab4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a78:	230f      	movs	r3, #15
 8001a7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a8e:	f107 030c 	add.w	r3, r7, #12
 8001a92:	2102      	movs	r1, #2
 8001a94:	4618      	mov	r0, r3
 8001a96:	f002 f891 	bl	8003bbc <HAL_RCC_ClockConfig>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001aa0:	f000 f808 	bl	8001ab4 <Error_Handler>
  }
}
 8001aa4:	bf00      	nop
 8001aa6:	3750      	adds	r7, #80	; 0x50
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40007000 	.word	0x40007000

08001ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab8:	b672      	cpsid	i
}
 8001aba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001abc:	e7fe      	b.n	8001abc <Error_Handler+0x8>
	...

08001ac0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001ac4:	4b17      	ldr	r3, [pc, #92]	; (8001b24 <MX_SPI1_Init+0x64>)
 8001ac6:	4a18      	ldr	r2, [pc, #96]	; (8001b28 <MX_SPI1_Init+0x68>)
 8001ac8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001aca:	4b16      	ldr	r3, [pc, #88]	; (8001b24 <MX_SPI1_Init+0x64>)
 8001acc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ad0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ad2:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <MX_SPI1_Init+0x64>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ad8:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <MX_SPI1_Init+0x64>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001ade:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <MX_SPI1_Init+0x64>)
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001ae4:	4b0f      	ldr	r3, [pc, #60]	; (8001b24 <MX_SPI1_Init+0x64>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001aea:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <MX_SPI1_Init+0x64>)
 8001aec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001af0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001af2:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <MX_SPI1_Init+0x64>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001af8:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <MX_SPI1_Init+0x64>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001afe:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <MX_SPI1_Init+0x64>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b04:	4b07      	ldr	r3, [pc, #28]	; (8001b24 <MX_SPI1_Init+0x64>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b0a:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <MX_SPI1_Init+0x64>)
 8001b0c:	220a      	movs	r2, #10
 8001b0e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b10:	4804      	ldr	r0, [pc, #16]	; (8001b24 <MX_SPI1_Init+0x64>)
 8001b12:	f002 fa0f 	bl	8003f34 <HAL_SPI_Init>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b1c:	f7ff ffca 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b20:	bf00      	nop
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	20000278 	.word	0x20000278
 8001b28:	40013000 	.word	0x40013000

08001b2c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08a      	sub	sp, #40	; 0x28
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b34:	f107 0314 	add.w	r3, r7, #20
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a19      	ldr	r2, [pc, #100]	; (8001bb0 <HAL_SPI_MspInit+0x84>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d12b      	bne.n	8001ba6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	613b      	str	r3, [r7, #16]
 8001b52:	4b18      	ldr	r3, [pc, #96]	; (8001bb4 <HAL_SPI_MspInit+0x88>)
 8001b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b56:	4a17      	ldr	r2, [pc, #92]	; (8001bb4 <HAL_SPI_MspInit+0x88>)
 8001b58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b5e:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <HAL_SPI_MspInit+0x88>)
 8001b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b66:	613b      	str	r3, [r7, #16]
 8001b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <HAL_SPI_MspInit+0x88>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	4a10      	ldr	r2, [pc, #64]	; (8001bb4 <HAL_SPI_MspInit+0x88>)
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <HAL_SPI_MspInit+0x88>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|MOSI_Pin;
 8001b86:	23a0      	movs	r3, #160	; 0xa0
 8001b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b92:	2303      	movs	r3, #3
 8001b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b96:	2305      	movs	r3, #5
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9a:	f107 0314 	add.w	r3, r7, #20
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <HAL_SPI_MspInit+0x8c>)
 8001ba2:	f000 fc35 	bl	8002410 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001ba6:	bf00      	nop
 8001ba8:	3728      	adds	r7, #40	; 0x28
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40013000 	.word	0x40013000
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40020000 	.word	0x40020000

08001bbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	607b      	str	r3, [r7, #4]
 8001bc6:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <HAL_MspInit+0x4c>)
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bca:	4a0f      	ldr	r2, [pc, #60]	; (8001c08 <HAL_MspInit+0x4c>)
 8001bcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bd2:	4b0d      	ldr	r3, [pc, #52]	; (8001c08 <HAL_MspInit+0x4c>)
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bda:	607b      	str	r3, [r7, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	603b      	str	r3, [r7, #0]
 8001be2:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <HAL_MspInit+0x4c>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	4a08      	ldr	r2, [pc, #32]	; (8001c08 <HAL_MspInit+0x4c>)
 8001be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bec:	6413      	str	r3, [r2, #64]	; 0x40
 8001bee:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <HAL_MspInit+0x4c>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf6:	603b      	str	r3, [r7, #0]
 8001bf8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	40023800 	.word	0x40023800

08001c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c10:	e7fe      	b.n	8001c10 <NMI_Handler+0x4>

08001c12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c12:	b480      	push	{r7}
 8001c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c16:	e7fe      	b.n	8001c16 <HardFault_Handler+0x4>

08001c18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c1c:	e7fe      	b.n	8001c1c <MemManage_Handler+0x4>

08001c1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c22:	e7fe      	b.n	8001c22 <BusFault_Handler+0x4>

08001c24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c28:	e7fe      	b.n	8001c28 <UsageFault_Handler+0x4>

08001c2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c46:	b480      	push	{r7}
 8001c48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c58:	f000 fa84 	bl	8002164 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c5c:	bf00      	nop
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c64:	4802      	ldr	r0, [pc, #8]	; (8001c70 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001c66:	f002 fca7 	bl	80045b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	200002d0 	.word	0x200002d0

08001c74 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c78:	4802      	ldr	r0, [pc, #8]	; (8001c84 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001c7a:	f002 fc9d 	bl	80045b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	200002d0 	.word	0x200002d0

08001c88 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c8c:	4802      	ldr	r0, [pc, #8]	; (8001c98 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001c8e:	f002 fc93 	bl	80045b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	200002d0 	.word	0x200002d0

08001c9c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ca0:	4802      	ldr	r0, [pc, #8]	; (8001cac <TIM1_CC_IRQHandler+0x10>)
 8001ca2:	f002 fc89 	bl	80045b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	200002d0 	.word	0x200002d0

08001cb0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001cb4:	4802      	ldr	r0, [pc, #8]	; (8001cc0 <TIM2_IRQHandler+0x10>)
 8001cb6:	f002 fc7f 	bl	80045b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000318 	.word	0x20000318

08001cc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
	return 1;
 8001cc8:	2301      	movs	r3, #1
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <_kill>:

int _kill(int pid, int sig)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001cde:	f002 ffff 	bl	8004ce0 <__errno>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2216      	movs	r2, #22
 8001ce6:	601a      	str	r2, [r3, #0]
	return -1;
 8001ce8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <_exit>:

void _exit (int status)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f7ff ffe7 	bl	8001cd4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d06:	e7fe      	b.n	8001d06 <_exit+0x12>

08001d08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]
 8001d18:	e00a      	b.n	8001d30 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d1a:	f3af 8000 	nop.w
 8001d1e:	4601      	mov	r1, r0
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	1c5a      	adds	r2, r3, #1
 8001d24:	60ba      	str	r2, [r7, #8]
 8001d26:	b2ca      	uxtb	r2, r1
 8001d28:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	617b      	str	r3, [r7, #20]
 8001d30:	697a      	ldr	r2, [r7, #20]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	dbf0      	blt.n	8001d1a <_read+0x12>
	}

return len;
 8001d38:	687b      	ldr	r3, [r7, #4]
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3718      	adds	r7, #24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b086      	sub	sp, #24
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	60f8      	str	r0, [r7, #12]
 8001d4a:	60b9      	str	r1, [r7, #8]
 8001d4c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d4e:	2300      	movs	r3, #0
 8001d50:	617b      	str	r3, [r7, #20]
 8001d52:	e009      	b.n	8001d68 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	1c5a      	adds	r2, r3, #1
 8001d58:	60ba      	str	r2, [r7, #8]
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	3301      	adds	r3, #1
 8001d66:	617b      	str	r3, [r7, #20]
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	dbf1      	blt.n	8001d54 <_write+0x12>
	}
	return len;
 8001d70:	687b      	ldr	r3, [r7, #4]
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <_close>:

int _close(int file)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b083      	sub	sp, #12
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
	return -1;
 8001d82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001da2:	605a      	str	r2, [r3, #4]
	return 0;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <_isatty>:

int _isatty(int file)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b083      	sub	sp, #12
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
	return 1;
 8001dba:	2301      	movs	r3, #1
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
	return 0;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3714      	adds	r7, #20
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
	...

08001de4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dec:	4a14      	ldr	r2, [pc, #80]	; (8001e40 <_sbrk+0x5c>)
 8001dee:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <_sbrk+0x60>)
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001df8:	4b13      	ldr	r3, [pc, #76]	; (8001e48 <_sbrk+0x64>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d102      	bne.n	8001e06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e00:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <_sbrk+0x64>)
 8001e02:	4a12      	ldr	r2, [pc, #72]	; (8001e4c <_sbrk+0x68>)
 8001e04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e06:	4b10      	ldr	r3, [pc, #64]	; (8001e48 <_sbrk+0x64>)
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d207      	bcs.n	8001e24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e14:	f002 ff64 	bl	8004ce0 <__errno>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	220c      	movs	r2, #12
 8001e1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e22:	e009      	b.n	8001e38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e24:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <_sbrk+0x64>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e2a:	4b07      	ldr	r3, [pc, #28]	; (8001e48 <_sbrk+0x64>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4413      	add	r3, r2
 8001e32:	4a05      	ldr	r2, [pc, #20]	; (8001e48 <_sbrk+0x64>)
 8001e34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e36:	68fb      	ldr	r3, [r7, #12]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3718      	adds	r7, #24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	20010000 	.word	0x20010000
 8001e44:	00000400 	.word	0x00000400
 8001e48:	200001fc 	.word	0x200001fc
 8001e4c:	20000378 	.word	0x20000378

08001e50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e54:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <SystemInit+0x20>)
 8001e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e5a:	4a05      	ldr	r2, [pc, #20]	; (8001e70 <SystemInit+0x20>)
 8001e5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	e000ed00 	.word	0xe000ed00

08001e74 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e7a:	f107 0308 	add.w	r3, r7, #8
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	605a      	str	r2, [r3, #4]
 8001e84:	609a      	str	r2, [r3, #8]
 8001e86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e88:	463b      	mov	r3, r7
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e90:	4b1f      	ldr	r3, [pc, #124]	; (8001f10 <MX_TIM1_Init+0x9c>)
 8001e92:	4a20      	ldr	r2, [pc, #128]	; (8001f14 <MX_TIM1_Init+0xa0>)
 8001e94:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 719;
 8001e96:	4b1e      	ldr	r3, [pc, #120]	; (8001f10 <MX_TIM1_Init+0x9c>)
 8001e98:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001e9c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e9e:	4b1c      	ldr	r3, [pc, #112]	; (8001f10 <MX_TIM1_Init+0x9c>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001ea4:	4b1a      	ldr	r3, [pc, #104]	; (8001f10 <MX_TIM1_Init+0x9c>)
 8001ea6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001eaa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eac:	4b18      	ldr	r3, [pc, #96]	; (8001f10 <MX_TIM1_Init+0x9c>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001eb2:	4b17      	ldr	r3, [pc, #92]	; (8001f10 <MX_TIM1_Init+0x9c>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eb8:	4b15      	ldr	r3, [pc, #84]	; (8001f10 <MX_TIM1_Init+0x9c>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ebe:	4814      	ldr	r0, [pc, #80]	; (8001f10 <MX_TIM1_Init+0x9c>)
 8001ec0:	f002 fac8 	bl	8004454 <HAL_TIM_Base_Init>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001eca:	f7ff fdf3 	bl	8001ab4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ece:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ed2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ed4:	f107 0308 	add.w	r3, r7, #8
 8001ed8:	4619      	mov	r1, r3
 8001eda:	480d      	ldr	r0, [pc, #52]	; (8001f10 <MX_TIM1_Init+0x9c>)
 8001edc:	f002 fc74 	bl	80047c8 <HAL_TIM_ConfigClockSource>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001ee6:	f7ff fde5 	bl	8001ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eea:	2300      	movs	r3, #0
 8001eec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ef2:	463b      	mov	r3, r7
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4806      	ldr	r0, [pc, #24]	; (8001f10 <MX_TIM1_Init+0x9c>)
 8001ef8:	f002 fe70 	bl	8004bdc <HAL_TIMEx_MasterConfigSynchronization>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001f02:	f7ff fdd7 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001f06:	bf00      	nop
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	200002d0 	.word	0x200002d0
 8001f14:	40010000 	.word	0x40010000

08001f18 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f1e:	f107 0308 	add.w	r3, r7, #8
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	605a      	str	r2, [r3, #4]
 8001f28:	609a      	str	r2, [r3, #8]
 8001f2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f2c:	463b      	mov	r3, r7
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f34:	4b1e      	ldr	r3, [pc, #120]	; (8001fb0 <MX_TIM2_Init+0x98>)
 8001f36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f3a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 719;
 8001f3c:	4b1c      	ldr	r3, [pc, #112]	; (8001fb0 <MX_TIM2_Init+0x98>)
 8001f3e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001f42:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f44:	4b1a      	ldr	r3, [pc, #104]	; (8001fb0 <MX_TIM2_Init+0x98>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 8001f4a:	4b19      	ldr	r3, [pc, #100]	; (8001fb0 <MX_TIM2_Init+0x98>)
 8001f4c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001f50:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f52:	4b17      	ldr	r3, [pc, #92]	; (8001fb0 <MX_TIM2_Init+0x98>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f58:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <MX_TIM2_Init+0x98>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f5e:	4814      	ldr	r0, [pc, #80]	; (8001fb0 <MX_TIM2_Init+0x98>)
 8001f60:	f002 fa78 	bl	8004454 <HAL_TIM_Base_Init>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001f6a:	f7ff fda3 	bl	8001ab4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f72:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f74:	f107 0308 	add.w	r3, r7, #8
 8001f78:	4619      	mov	r1, r3
 8001f7a:	480d      	ldr	r0, [pc, #52]	; (8001fb0 <MX_TIM2_Init+0x98>)
 8001f7c:	f002 fc24 	bl	80047c8 <HAL_TIM_ConfigClockSource>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001f86:	f7ff fd95 	bl	8001ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f92:	463b      	mov	r3, r7
 8001f94:	4619      	mov	r1, r3
 8001f96:	4806      	ldr	r0, [pc, #24]	; (8001fb0 <MX_TIM2_Init+0x98>)
 8001f98:	f002 fe20 	bl	8004bdc <HAL_TIMEx_MasterConfigSynchronization>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001fa2:	f7ff fd87 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001fa6:	bf00      	nop
 8001fa8:	3718      	adds	r7, #24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20000318 	.word	0x20000318

08001fb4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a28      	ldr	r2, [pc, #160]	; (8002064 <HAL_TIM_Base_MspInit+0xb0>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d12e      	bne.n	8002024 <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	4b27      	ldr	r3, [pc, #156]	; (8002068 <HAL_TIM_Base_MspInit+0xb4>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	4a26      	ldr	r2, [pc, #152]	; (8002068 <HAL_TIM_Base_MspInit+0xb4>)
 8001fd0:	f043 0301 	orr.w	r3, r3, #1
 8001fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fd6:	4b24      	ldr	r3, [pc, #144]	; (8002068 <HAL_TIM_Base_MspInit+0xb4>)
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	2018      	movs	r0, #24
 8001fe8:	f000 f9db 	bl	80023a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001fec:	2018      	movs	r0, #24
 8001fee:	f000 f9f4 	bl	80023da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	2019      	movs	r0, #25
 8001ff8:	f000 f9d3 	bl	80023a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ffc:	2019      	movs	r0, #25
 8001ffe:	f000 f9ec 	bl	80023da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002002:	2200      	movs	r2, #0
 8002004:	2100      	movs	r1, #0
 8002006:	201a      	movs	r0, #26
 8002008:	f000 f9cb 	bl	80023a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800200c:	201a      	movs	r0, #26
 800200e:	f000 f9e4 	bl	80023da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002012:	2200      	movs	r2, #0
 8002014:	2100      	movs	r1, #0
 8002016:	201b      	movs	r0, #27
 8002018:	f000 f9c3 	bl	80023a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800201c:	201b      	movs	r0, #27
 800201e:	f000 f9dc 	bl	80023da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002022:	e01a      	b.n	800205a <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM2)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800202c:	d115      	bne.n	800205a <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	60bb      	str	r3, [r7, #8]
 8002032:	4b0d      	ldr	r3, [pc, #52]	; (8002068 <HAL_TIM_Base_MspInit+0xb4>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	4a0c      	ldr	r2, [pc, #48]	; (8002068 <HAL_TIM_Base_MspInit+0xb4>)
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	6413      	str	r3, [r2, #64]	; 0x40
 800203e:	4b0a      	ldr	r3, [pc, #40]	; (8002068 <HAL_TIM_Base_MspInit+0xb4>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	60bb      	str	r3, [r7, #8]
 8002048:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800204a:	2200      	movs	r2, #0
 800204c:	2100      	movs	r1, #0
 800204e:	201c      	movs	r0, #28
 8002050:	f000 f9a7 	bl	80023a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002054:	201c      	movs	r0, #28
 8002056:	f000 f9c0 	bl	80023da <HAL_NVIC_EnableIRQ>
}
 800205a:	bf00      	nop
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40010000 	.word	0x40010000
 8002068:	40023800 	.word	0x40023800

0800206c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800206c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002070:	480d      	ldr	r0, [pc, #52]	; (80020a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002072:	490e      	ldr	r1, [pc, #56]	; (80020ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002074:	4a0e      	ldr	r2, [pc, #56]	; (80020b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002076:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002078:	e002      	b.n	8002080 <LoopCopyDataInit>

0800207a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800207a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800207c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800207e:	3304      	adds	r3, #4

08002080 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002080:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002082:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002084:	d3f9      	bcc.n	800207a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002086:	4a0b      	ldr	r2, [pc, #44]	; (80020b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002088:	4c0b      	ldr	r4, [pc, #44]	; (80020b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800208a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800208c:	e001      	b.n	8002092 <LoopFillZerobss>

0800208e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800208e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002090:	3204      	adds	r2, #4

08002092 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002092:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002094:	d3fb      	bcc.n	800208e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002096:	f7ff fedb 	bl	8001e50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800209a:	f002 fe27 	bl	8004cec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800209e:	f7ff fc79 	bl	8001994 <main>
  bx  lr    
 80020a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020a4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80020a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020ac:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80020b0:	08008f34 	.word	0x08008f34
  ldr r2, =_sbss
 80020b4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80020b8:	20000374 	.word	0x20000374

080020bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020bc:	e7fe      	b.n	80020bc <ADC_IRQHandler>
	...

080020c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020c4:	4b0e      	ldr	r3, [pc, #56]	; (8002100 <HAL_Init+0x40>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a0d      	ldr	r2, [pc, #52]	; (8002100 <HAL_Init+0x40>)
 80020ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020d0:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <HAL_Init+0x40>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a0a      	ldr	r2, [pc, #40]	; (8002100 <HAL_Init+0x40>)
 80020d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020dc:	4b08      	ldr	r3, [pc, #32]	; (8002100 <HAL_Init+0x40>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a07      	ldr	r2, [pc, #28]	; (8002100 <HAL_Init+0x40>)
 80020e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020e8:	2003      	movs	r0, #3
 80020ea:	f000 f94f 	bl	800238c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020ee:	200f      	movs	r0, #15
 80020f0:	f000 f808 	bl	8002104 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020f4:	f7ff fd62 	bl	8001bbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40023c00 	.word	0x40023c00

08002104 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800210c:	4b12      	ldr	r3, [pc, #72]	; (8002158 <HAL_InitTick+0x54>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	4b12      	ldr	r3, [pc, #72]	; (800215c <HAL_InitTick+0x58>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	4619      	mov	r1, r3
 8002116:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800211a:	fbb3 f3f1 	udiv	r3, r3, r1
 800211e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002122:	4618      	mov	r0, r3
 8002124:	f000 f967 	bl	80023f6 <HAL_SYSTICK_Config>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e00e      	b.n	8002150 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2b0f      	cmp	r3, #15
 8002136:	d80a      	bhi.n	800214e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002138:	2200      	movs	r2, #0
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	f04f 30ff 	mov.w	r0, #4294967295
 8002140:	f000 f92f 	bl	80023a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002144:	4a06      	ldr	r2, [pc, #24]	; (8002160 <HAL_InitTick+0x5c>)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800214a:	2300      	movs	r3, #0
 800214c:	e000      	b.n	8002150 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
}
 8002150:	4618      	mov	r0, r3
 8002152:	3708      	adds	r7, #8
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	20000000 	.word	0x20000000
 800215c:	20000008 	.word	0x20000008
 8002160:	20000004 	.word	0x20000004

08002164 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002168:	4b06      	ldr	r3, [pc, #24]	; (8002184 <HAL_IncTick+0x20>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	461a      	mov	r2, r3
 800216e:	4b06      	ldr	r3, [pc, #24]	; (8002188 <HAL_IncTick+0x24>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4413      	add	r3, r2
 8002174:	4a04      	ldr	r2, [pc, #16]	; (8002188 <HAL_IncTick+0x24>)
 8002176:	6013      	str	r3, [r2, #0]
}
 8002178:	bf00      	nop
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	20000008 	.word	0x20000008
 8002188:	20000360 	.word	0x20000360

0800218c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  return uwTick;
 8002190:	4b03      	ldr	r3, [pc, #12]	; (80021a0 <HAL_GetTick+0x14>)
 8002192:	681b      	ldr	r3, [r3, #0]
}
 8002194:	4618      	mov	r0, r3
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	20000360 	.word	0x20000360

080021a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021ac:	f7ff ffee 	bl	800218c <HAL_GetTick>
 80021b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021bc:	d005      	beq.n	80021ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021be:	4b0a      	ldr	r3, [pc, #40]	; (80021e8 <HAL_Delay+0x44>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	461a      	mov	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	4413      	add	r3, r2
 80021c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021ca:	bf00      	nop
 80021cc:	f7ff ffde 	bl	800218c <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d8f7      	bhi.n	80021cc <HAL_Delay+0x28>
  {
  }
}
 80021dc:	bf00      	nop
 80021de:	bf00      	nop
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20000008 	.word	0x20000008

080021ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021fc:	4b0c      	ldr	r3, [pc, #48]	; (8002230 <__NVIC_SetPriorityGrouping+0x44>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002208:	4013      	ands	r3, r2
 800220a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002214:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800221c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800221e:	4a04      	ldr	r2, [pc, #16]	; (8002230 <__NVIC_SetPriorityGrouping+0x44>)
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	60d3      	str	r3, [r2, #12]
}
 8002224:	bf00      	nop
 8002226:	3714      	adds	r7, #20
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	e000ed00 	.word	0xe000ed00

08002234 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002238:	4b04      	ldr	r3, [pc, #16]	; (800224c <__NVIC_GetPriorityGrouping+0x18>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	0a1b      	lsrs	r3, r3, #8
 800223e:	f003 0307 	and.w	r3, r3, #7
}
 8002242:	4618      	mov	r0, r3
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	e000ed00 	.word	0xe000ed00

08002250 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800225a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225e:	2b00      	cmp	r3, #0
 8002260:	db0b      	blt.n	800227a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002262:	79fb      	ldrb	r3, [r7, #7]
 8002264:	f003 021f 	and.w	r2, r3, #31
 8002268:	4907      	ldr	r1, [pc, #28]	; (8002288 <__NVIC_EnableIRQ+0x38>)
 800226a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226e:	095b      	lsrs	r3, r3, #5
 8002270:	2001      	movs	r0, #1
 8002272:	fa00 f202 	lsl.w	r2, r0, r2
 8002276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	e000e100 	.word	0xe000e100

0800228c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	6039      	str	r1, [r7, #0]
 8002296:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229c:	2b00      	cmp	r3, #0
 800229e:	db0a      	blt.n	80022b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	490c      	ldr	r1, [pc, #48]	; (80022d8 <__NVIC_SetPriority+0x4c>)
 80022a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022aa:	0112      	lsls	r2, r2, #4
 80022ac:	b2d2      	uxtb	r2, r2
 80022ae:	440b      	add	r3, r1
 80022b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022b4:	e00a      	b.n	80022cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	4908      	ldr	r1, [pc, #32]	; (80022dc <__NVIC_SetPriority+0x50>)
 80022bc:	79fb      	ldrb	r3, [r7, #7]
 80022be:	f003 030f 	and.w	r3, r3, #15
 80022c2:	3b04      	subs	r3, #4
 80022c4:	0112      	lsls	r2, r2, #4
 80022c6:	b2d2      	uxtb	r2, r2
 80022c8:	440b      	add	r3, r1
 80022ca:	761a      	strb	r2, [r3, #24]
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	e000e100 	.word	0xe000e100
 80022dc:	e000ed00 	.word	0xe000ed00

080022e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b089      	sub	sp, #36	; 0x24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	f1c3 0307 	rsb	r3, r3, #7
 80022fa:	2b04      	cmp	r3, #4
 80022fc:	bf28      	it	cs
 80022fe:	2304      	movcs	r3, #4
 8002300:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	3304      	adds	r3, #4
 8002306:	2b06      	cmp	r3, #6
 8002308:	d902      	bls.n	8002310 <NVIC_EncodePriority+0x30>
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	3b03      	subs	r3, #3
 800230e:	e000      	b.n	8002312 <NVIC_EncodePriority+0x32>
 8002310:	2300      	movs	r3, #0
 8002312:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002314:	f04f 32ff 	mov.w	r2, #4294967295
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	43da      	mvns	r2, r3
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	401a      	ands	r2, r3
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002328:	f04f 31ff 	mov.w	r1, #4294967295
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	fa01 f303 	lsl.w	r3, r1, r3
 8002332:	43d9      	mvns	r1, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002338:	4313      	orrs	r3, r2
         );
}
 800233a:	4618      	mov	r0, r3
 800233c:	3724      	adds	r7, #36	; 0x24
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
	...

08002348 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3b01      	subs	r3, #1
 8002354:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002358:	d301      	bcc.n	800235e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800235a:	2301      	movs	r3, #1
 800235c:	e00f      	b.n	800237e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800235e:	4a0a      	ldr	r2, [pc, #40]	; (8002388 <SysTick_Config+0x40>)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3b01      	subs	r3, #1
 8002364:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002366:	210f      	movs	r1, #15
 8002368:	f04f 30ff 	mov.w	r0, #4294967295
 800236c:	f7ff ff8e 	bl	800228c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002370:	4b05      	ldr	r3, [pc, #20]	; (8002388 <SysTick_Config+0x40>)
 8002372:	2200      	movs	r2, #0
 8002374:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002376:	4b04      	ldr	r3, [pc, #16]	; (8002388 <SysTick_Config+0x40>)
 8002378:	2207      	movs	r2, #7
 800237a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	e000e010 	.word	0xe000e010

0800238c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f7ff ff29 	bl	80021ec <__NVIC_SetPriorityGrouping>
}
 800239a:	bf00      	nop
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b086      	sub	sp, #24
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	4603      	mov	r3, r0
 80023aa:	60b9      	str	r1, [r7, #8]
 80023ac:	607a      	str	r2, [r7, #4]
 80023ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023b4:	f7ff ff3e 	bl	8002234 <__NVIC_GetPriorityGrouping>
 80023b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	68b9      	ldr	r1, [r7, #8]
 80023be:	6978      	ldr	r0, [r7, #20]
 80023c0:	f7ff ff8e 	bl	80022e0 <NVIC_EncodePriority>
 80023c4:	4602      	mov	r2, r0
 80023c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ca:	4611      	mov	r1, r2
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff ff5d 	bl	800228c <__NVIC_SetPriority>
}
 80023d2:	bf00      	nop
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b082      	sub	sp, #8
 80023de:	af00      	add	r7, sp, #0
 80023e0:	4603      	mov	r3, r0
 80023e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ff31 	bl	8002250 <__NVIC_EnableIRQ>
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b082      	sub	sp, #8
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7ff ffa2 	bl	8002348 <SysTick_Config>
 8002404:	4603      	mov	r3, r0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
	...

08002410 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002410:	b480      	push	{r7}
 8002412:	b089      	sub	sp, #36	; 0x24
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800241e:	2300      	movs	r3, #0
 8002420:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002422:	2300      	movs	r3, #0
 8002424:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002426:	2300      	movs	r3, #0
 8002428:	61fb      	str	r3, [r7, #28]
 800242a:	e159      	b.n	80026e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800242c:	2201      	movs	r2, #1
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	4013      	ands	r3, r2
 800243e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	429a      	cmp	r2, r3
 8002446:	f040 8148 	bne.w	80026da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	2b01      	cmp	r3, #1
 8002454:	d005      	beq.n	8002462 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800245e:	2b02      	cmp	r3, #2
 8002460:	d130      	bne.n	80024c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	2203      	movs	r2, #3
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43db      	mvns	r3, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4013      	ands	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	68da      	ldr	r2, [r3, #12]
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	4313      	orrs	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002498:	2201      	movs	r2, #1
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	43db      	mvns	r3, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4013      	ands	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	091b      	lsrs	r3, r3, #4
 80024ae:	f003 0201 	and.w	r2, r3, #1
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f003 0303 	and.w	r3, r3, #3
 80024cc:	2b03      	cmp	r3, #3
 80024ce:	d017      	beq.n	8002500 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	2203      	movs	r2, #3
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	43db      	mvns	r3, r3
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	4013      	ands	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f003 0303 	and.w	r3, r3, #3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d123      	bne.n	8002554 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	08da      	lsrs	r2, r3, #3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3208      	adds	r2, #8
 8002514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002518:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	220f      	movs	r2, #15
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	43db      	mvns	r3, r3
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4013      	ands	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	691a      	ldr	r2, [r3, #16]
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	4313      	orrs	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	08da      	lsrs	r2, r3, #3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	3208      	adds	r2, #8
 800254e:	69b9      	ldr	r1, [r7, #24]
 8002550:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	2203      	movs	r2, #3
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 0203 	and.w	r2, r3, #3
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4313      	orrs	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002590:	2b00      	cmp	r3, #0
 8002592:	f000 80a2 	beq.w	80026da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	4b57      	ldr	r3, [pc, #348]	; (80026f8 <HAL_GPIO_Init+0x2e8>)
 800259c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259e:	4a56      	ldr	r2, [pc, #344]	; (80026f8 <HAL_GPIO_Init+0x2e8>)
 80025a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025a4:	6453      	str	r3, [r2, #68]	; 0x44
 80025a6:	4b54      	ldr	r3, [pc, #336]	; (80026f8 <HAL_GPIO_Init+0x2e8>)
 80025a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025b2:	4a52      	ldr	r2, [pc, #328]	; (80026fc <HAL_GPIO_Init+0x2ec>)
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	089b      	lsrs	r3, r3, #2
 80025b8:	3302      	adds	r3, #2
 80025ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	220f      	movs	r2, #15
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	43db      	mvns	r3, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4013      	ands	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a49      	ldr	r2, [pc, #292]	; (8002700 <HAL_GPIO_Init+0x2f0>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d019      	beq.n	8002612 <HAL_GPIO_Init+0x202>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a48      	ldr	r2, [pc, #288]	; (8002704 <HAL_GPIO_Init+0x2f4>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d013      	beq.n	800260e <HAL_GPIO_Init+0x1fe>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a47      	ldr	r2, [pc, #284]	; (8002708 <HAL_GPIO_Init+0x2f8>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d00d      	beq.n	800260a <HAL_GPIO_Init+0x1fa>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a46      	ldr	r2, [pc, #280]	; (800270c <HAL_GPIO_Init+0x2fc>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d007      	beq.n	8002606 <HAL_GPIO_Init+0x1f6>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a45      	ldr	r2, [pc, #276]	; (8002710 <HAL_GPIO_Init+0x300>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d101      	bne.n	8002602 <HAL_GPIO_Init+0x1f2>
 80025fe:	2304      	movs	r3, #4
 8002600:	e008      	b.n	8002614 <HAL_GPIO_Init+0x204>
 8002602:	2307      	movs	r3, #7
 8002604:	e006      	b.n	8002614 <HAL_GPIO_Init+0x204>
 8002606:	2303      	movs	r3, #3
 8002608:	e004      	b.n	8002614 <HAL_GPIO_Init+0x204>
 800260a:	2302      	movs	r3, #2
 800260c:	e002      	b.n	8002614 <HAL_GPIO_Init+0x204>
 800260e:	2301      	movs	r3, #1
 8002610:	e000      	b.n	8002614 <HAL_GPIO_Init+0x204>
 8002612:	2300      	movs	r3, #0
 8002614:	69fa      	ldr	r2, [r7, #28]
 8002616:	f002 0203 	and.w	r2, r2, #3
 800261a:	0092      	lsls	r2, r2, #2
 800261c:	4093      	lsls	r3, r2
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4313      	orrs	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002624:	4935      	ldr	r1, [pc, #212]	; (80026fc <HAL_GPIO_Init+0x2ec>)
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	089b      	lsrs	r3, r3, #2
 800262a:	3302      	adds	r3, #2
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002632:	4b38      	ldr	r3, [pc, #224]	; (8002714 <HAL_GPIO_Init+0x304>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	43db      	mvns	r3, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4013      	ands	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	4313      	orrs	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002656:	4a2f      	ldr	r2, [pc, #188]	; (8002714 <HAL_GPIO_Init+0x304>)
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800265c:	4b2d      	ldr	r3, [pc, #180]	; (8002714 <HAL_GPIO_Init+0x304>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d003      	beq.n	8002680 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	4313      	orrs	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002680:	4a24      	ldr	r2, [pc, #144]	; (8002714 <HAL_GPIO_Init+0x304>)
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002686:	4b23      	ldr	r3, [pc, #140]	; (8002714 <HAL_GPIO_Init+0x304>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	43db      	mvns	r3, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4013      	ands	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026aa:	4a1a      	ldr	r2, [pc, #104]	; (8002714 <HAL_GPIO_Init+0x304>)
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026b0:	4b18      	ldr	r3, [pc, #96]	; (8002714 <HAL_GPIO_Init+0x304>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	43db      	mvns	r3, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4013      	ands	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026d4:	4a0f      	ldr	r2, [pc, #60]	; (8002714 <HAL_GPIO_Init+0x304>)
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	3301      	adds	r3, #1
 80026de:	61fb      	str	r3, [r7, #28]
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	2b0f      	cmp	r3, #15
 80026e4:	f67f aea2 	bls.w	800242c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026e8:	bf00      	nop
 80026ea:	bf00      	nop
 80026ec:	3724      	adds	r7, #36	; 0x24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	40023800 	.word	0x40023800
 80026fc:	40013800 	.word	0x40013800
 8002700:	40020000 	.word	0x40020000
 8002704:	40020400 	.word	0x40020400
 8002708:	40020800 	.word	0x40020800
 800270c:	40020c00 	.word	0x40020c00
 8002710:	40021000 	.word	0x40021000
 8002714:	40013c00 	.word	0x40013c00

08002718 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	460b      	mov	r3, r1
 8002722:	807b      	strh	r3, [r7, #2]
 8002724:	4613      	mov	r3, r2
 8002726:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002728:	787b      	ldrb	r3, [r7, #1]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800272e:	887a      	ldrh	r2, [r7, #2]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002734:	e003      	b.n	800273e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002736:	887b      	ldrh	r3, [r7, #2]
 8002738:	041a      	lsls	r2, r3, #16
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	619a      	str	r2, [r3, #24]
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
	...

0800274c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e12b      	b.n	80029b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d106      	bne.n	8002778 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7fe ff50 	bl	8001618 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2224      	movs	r2, #36	; 0x24
 800277c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 0201 	bic.w	r2, r2, #1
 800278e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800279e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027b0:	f001 fbac 	bl	8003f0c <HAL_RCC_GetPCLK1Freq>
 80027b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	4a81      	ldr	r2, [pc, #516]	; (80029c0 <HAL_I2C_Init+0x274>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d807      	bhi.n	80027d0 <HAL_I2C_Init+0x84>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4a80      	ldr	r2, [pc, #512]	; (80029c4 <HAL_I2C_Init+0x278>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	bf94      	ite	ls
 80027c8:	2301      	movls	r3, #1
 80027ca:	2300      	movhi	r3, #0
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	e006      	b.n	80027de <HAL_I2C_Init+0x92>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4a7d      	ldr	r2, [pc, #500]	; (80029c8 <HAL_I2C_Init+0x27c>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	bf94      	ite	ls
 80027d8:	2301      	movls	r3, #1
 80027da:	2300      	movhi	r3, #0
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e0e7      	b.n	80029b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	4a78      	ldr	r2, [pc, #480]	; (80029cc <HAL_I2C_Init+0x280>)
 80027ea:	fba2 2303 	umull	r2, r3, r2, r3
 80027ee:	0c9b      	lsrs	r3, r3, #18
 80027f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68ba      	ldr	r2, [r7, #8]
 8002802:	430a      	orrs	r2, r1
 8002804:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	4a6a      	ldr	r2, [pc, #424]	; (80029c0 <HAL_I2C_Init+0x274>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d802      	bhi.n	8002820 <HAL_I2C_Init+0xd4>
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	3301      	adds	r3, #1
 800281e:	e009      	b.n	8002834 <HAL_I2C_Init+0xe8>
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002826:	fb02 f303 	mul.w	r3, r2, r3
 800282a:	4a69      	ldr	r2, [pc, #420]	; (80029d0 <HAL_I2C_Init+0x284>)
 800282c:	fba2 2303 	umull	r2, r3, r2, r3
 8002830:	099b      	lsrs	r3, r3, #6
 8002832:	3301      	adds	r3, #1
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6812      	ldr	r2, [r2, #0]
 8002838:	430b      	orrs	r3, r1
 800283a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002846:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	495c      	ldr	r1, [pc, #368]	; (80029c0 <HAL_I2C_Init+0x274>)
 8002850:	428b      	cmp	r3, r1
 8002852:	d819      	bhi.n	8002888 <HAL_I2C_Init+0x13c>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	1e59      	subs	r1, r3, #1
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002862:	1c59      	adds	r1, r3, #1
 8002864:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002868:	400b      	ands	r3, r1
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00a      	beq.n	8002884 <HAL_I2C_Init+0x138>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	1e59      	subs	r1, r3, #1
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	fbb1 f3f3 	udiv	r3, r1, r3
 800287c:	3301      	adds	r3, #1
 800287e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002882:	e051      	b.n	8002928 <HAL_I2C_Init+0x1dc>
 8002884:	2304      	movs	r3, #4
 8002886:	e04f      	b.n	8002928 <HAL_I2C_Init+0x1dc>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d111      	bne.n	80028b4 <HAL_I2C_Init+0x168>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	1e58      	subs	r0, r3, #1
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6859      	ldr	r1, [r3, #4]
 8002898:	460b      	mov	r3, r1
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	440b      	add	r3, r1
 800289e:	fbb0 f3f3 	udiv	r3, r0, r3
 80028a2:	3301      	adds	r3, #1
 80028a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	bf0c      	ite	eq
 80028ac:	2301      	moveq	r3, #1
 80028ae:	2300      	movne	r3, #0
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	e012      	b.n	80028da <HAL_I2C_Init+0x18e>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	1e58      	subs	r0, r3, #1
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6859      	ldr	r1, [r3, #4]
 80028bc:	460b      	mov	r3, r1
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	0099      	lsls	r1, r3, #2
 80028c4:	440b      	add	r3, r1
 80028c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ca:	3301      	adds	r3, #1
 80028cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	bf0c      	ite	eq
 80028d4:	2301      	moveq	r3, #1
 80028d6:	2300      	movne	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <HAL_I2C_Init+0x196>
 80028de:	2301      	movs	r3, #1
 80028e0:	e022      	b.n	8002928 <HAL_I2C_Init+0x1dc>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10e      	bne.n	8002908 <HAL_I2C_Init+0x1bc>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	1e58      	subs	r0, r3, #1
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6859      	ldr	r1, [r3, #4]
 80028f2:	460b      	mov	r3, r1
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	440b      	add	r3, r1
 80028f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80028fc:	3301      	adds	r3, #1
 80028fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002906:	e00f      	b.n	8002928 <HAL_I2C_Init+0x1dc>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	1e58      	subs	r0, r3, #1
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6859      	ldr	r1, [r3, #4]
 8002910:	460b      	mov	r3, r1
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	0099      	lsls	r1, r3, #2
 8002918:	440b      	add	r3, r1
 800291a:	fbb0 f3f3 	udiv	r3, r0, r3
 800291e:	3301      	adds	r3, #1
 8002920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002924:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002928:	6879      	ldr	r1, [r7, #4]
 800292a:	6809      	ldr	r1, [r1, #0]
 800292c:	4313      	orrs	r3, r2
 800292e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69da      	ldr	r2, [r3, #28]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	431a      	orrs	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	430a      	orrs	r2, r1
 800294a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002956:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	6911      	ldr	r1, [r2, #16]
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	68d2      	ldr	r2, [r2, #12]
 8002962:	4311      	orrs	r1, r2
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	6812      	ldr	r2, [r2, #0]
 8002968:	430b      	orrs	r3, r1
 800296a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	695a      	ldr	r2, [r3, #20]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	431a      	orrs	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f042 0201 	orr.w	r2, r2, #1
 8002996:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2220      	movs	r2, #32
 80029a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	000186a0 	.word	0x000186a0
 80029c4:	001e847f 	.word	0x001e847f
 80029c8:	003d08ff 	.word	0x003d08ff
 80029cc:	431bde83 	.word	0x431bde83
 80029d0:	10624dd3 	.word	0x10624dd3

080029d4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b088      	sub	sp, #32
 80029d8:	af02      	add	r7, sp, #8
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	4608      	mov	r0, r1
 80029de:	4611      	mov	r1, r2
 80029e0:	461a      	mov	r2, r3
 80029e2:	4603      	mov	r3, r0
 80029e4:	817b      	strh	r3, [r7, #10]
 80029e6:	460b      	mov	r3, r1
 80029e8:	813b      	strh	r3, [r7, #8]
 80029ea:	4613      	mov	r3, r2
 80029ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029ee:	f7ff fbcd 	bl	800218c <HAL_GetTick>
 80029f2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b20      	cmp	r3, #32
 80029fe:	f040 80d9 	bne.w	8002bb4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	2319      	movs	r3, #25
 8002a08:	2201      	movs	r2, #1
 8002a0a:	496d      	ldr	r1, [pc, #436]	; (8002bc0 <HAL_I2C_Mem_Write+0x1ec>)
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f000 fc7f 	bl	8003310 <I2C_WaitOnFlagUntilTimeout>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	e0cc      	b.n	8002bb6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d101      	bne.n	8002a2a <HAL_I2C_Mem_Write+0x56>
 8002a26:	2302      	movs	r3, #2
 8002a28:	e0c5      	b.n	8002bb6 <HAL_I2C_Mem_Write+0x1e2>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d007      	beq.n	8002a50 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f042 0201 	orr.w	r2, r2, #1
 8002a4e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a5e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2221      	movs	r2, #33	; 0x21
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2240      	movs	r2, #64	; 0x40
 8002a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6a3a      	ldr	r2, [r7, #32]
 8002a7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	4a4d      	ldr	r2, [pc, #308]	; (8002bc4 <HAL_I2C_Mem_Write+0x1f0>)
 8002a90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a92:	88f8      	ldrh	r0, [r7, #6]
 8002a94:	893a      	ldrh	r2, [r7, #8]
 8002a96:	8979      	ldrh	r1, [r7, #10]
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	9301      	str	r3, [sp, #4]
 8002a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 fab6 	bl	8003014 <I2C_RequestMemoryWrite>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d052      	beq.n	8002b54 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e081      	b.n	8002bb6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f000 fd00 	bl	80034bc <I2C_WaitOnTXEFlagUntilTimeout>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00d      	beq.n	8002ade <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d107      	bne.n	8002ada <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ad8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e06b      	b.n	8002bb6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae2:	781a      	ldrb	r2, [r3, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aee:	1c5a      	adds	r2, r3, #1
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af8:	3b01      	subs	r3, #1
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	3b01      	subs	r3, #1
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b04      	cmp	r3, #4
 8002b1a:	d11b      	bne.n	8002b54 <HAL_I2C_Mem_Write+0x180>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d017      	beq.n	8002b54 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b28:	781a      	ldrb	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b34:	1c5a      	adds	r2, r3, #1
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1aa      	bne.n	8002ab2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f000 fcec 	bl	800353e <I2C_WaitOnBTFFlagUntilTimeout>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d00d      	beq.n	8002b88 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b70:	2b04      	cmp	r3, #4
 8002b72:	d107      	bne.n	8002b84 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b82:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e016      	b.n	8002bb6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	e000      	b.n	8002bb6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002bb4:	2302      	movs	r3, #2
  }
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3718      	adds	r7, #24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	00100002 	.word	0x00100002
 8002bc4:	ffff0000 	.word	0xffff0000

08002bc8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b08c      	sub	sp, #48	; 0x30
 8002bcc:	af02      	add	r7, sp, #8
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	4608      	mov	r0, r1
 8002bd2:	4611      	mov	r1, r2
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	817b      	strh	r3, [r7, #10]
 8002bda:	460b      	mov	r3, r1
 8002bdc:	813b      	strh	r3, [r7, #8]
 8002bde:	4613      	mov	r3, r2
 8002be0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002be2:	f7ff fad3 	bl	800218c <HAL_GetTick>
 8002be6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b20      	cmp	r3, #32
 8002bf2:	f040 8208 	bne.w	8003006 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	9300      	str	r3, [sp, #0]
 8002bfa:	2319      	movs	r3, #25
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	497b      	ldr	r1, [pc, #492]	; (8002dec <HAL_I2C_Mem_Read+0x224>)
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f000 fb85 	bl	8003310 <I2C_WaitOnFlagUntilTimeout>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	e1fb      	b.n	8003008 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d101      	bne.n	8002c1e <HAL_I2C_Mem_Read+0x56>
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	e1f4      	b.n	8003008 <HAL_I2C_Mem_Read+0x440>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d007      	beq.n	8002c44 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f042 0201 	orr.w	r2, r2, #1
 8002c42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2222      	movs	r2, #34	; 0x22
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2240      	movs	r2, #64	; 0x40
 8002c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002c74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4a5b      	ldr	r2, [pc, #364]	; (8002df0 <HAL_I2C_Mem_Read+0x228>)
 8002c84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c86:	88f8      	ldrh	r0, [r7, #6]
 8002c88:	893a      	ldrh	r2, [r7, #8]
 8002c8a:	8979      	ldrh	r1, [r7, #10]
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8e:	9301      	str	r3, [sp, #4]
 8002c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	4603      	mov	r3, r0
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f000 fa52 	bl	8003140 <I2C_RequestMemoryRead>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e1b0      	b.n	8003008 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d113      	bne.n	8002cd6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cae:	2300      	movs	r3, #0
 8002cb0:	623b      	str	r3, [r7, #32]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	623b      	str	r3, [r7, #32]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	623b      	str	r3, [r7, #32]
 8002cc2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	e184      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d11b      	bne.n	8002d16 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61fb      	str	r3, [r7, #28]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	61fb      	str	r3, [r7, #28]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	61fb      	str	r3, [r7, #28]
 8002d02:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	e164      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d11b      	bne.n	8002d56 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d2c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61bb      	str	r3, [r7, #24]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	61bb      	str	r3, [r7, #24]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	61bb      	str	r3, [r7, #24]
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	e144      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d56:	2300      	movs	r3, #0
 8002d58:	617b      	str	r3, [r7, #20]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	617b      	str	r3, [r7, #20]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	617b      	str	r3, [r7, #20]
 8002d6a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002d6c:	e138      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d72:	2b03      	cmp	r3, #3
 8002d74:	f200 80f1 	bhi.w	8002f5a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d123      	bne.n	8002dc8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f000 fc1b 	bl	80035c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e139      	b.n	8003008 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	691a      	ldr	r2, [r3, #16]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9e:	b2d2      	uxtb	r2, r2
 8002da0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da6:	1c5a      	adds	r2, r3, #1
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002dc6:	e10b      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d14e      	bne.n	8002e6e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	4906      	ldr	r1, [pc, #24]	; (8002df4 <HAL_I2C_Mem_Read+0x22c>)
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f000 fa98 	bl	8003310 <I2C_WaitOnFlagUntilTimeout>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d008      	beq.n	8002df8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e10e      	b.n	8003008 <HAL_I2C_Mem_Read+0x440>
 8002dea:	bf00      	nop
 8002dec:	00100002 	.word	0x00100002
 8002df0:	ffff0000 	.word	0xffff0000
 8002df4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	691a      	ldr	r2, [r3, #16]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e12:	b2d2      	uxtb	r2, r2
 8002e14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	1c5a      	adds	r2, r3, #1
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e24:	3b01      	subs	r3, #1
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	3b01      	subs	r3, #1
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	691a      	ldr	r2, [r3, #16]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e44:	b2d2      	uxtb	r2, r2
 8002e46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	1c5a      	adds	r2, r3, #1
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e56:	3b01      	subs	r3, #1
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	3b01      	subs	r3, #1
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e6c:	e0b8      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e74:	2200      	movs	r2, #0
 8002e76:	4966      	ldr	r1, [pc, #408]	; (8003010 <HAL_I2C_Mem_Read+0x448>)
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f000 fa49 	bl	8003310 <I2C_WaitOnFlagUntilTimeout>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e0bf      	b.n	8003008 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	691a      	ldr	r2, [r3, #16]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea2:	b2d2      	uxtb	r2, r2
 8002ea4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eaa:	1c5a      	adds	r2, r3, #1
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	494f      	ldr	r1, [pc, #316]	; (8003010 <HAL_I2C_Mem_Read+0x448>)
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f000 fa1b 	bl	8003310 <I2C_WaitOnFlagUntilTimeout>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e091      	b.n	8003008 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ef2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	691a      	ldr	r2, [r3, #16]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efe:	b2d2      	uxtb	r2, r2
 8002f00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f06:	1c5a      	adds	r2, r3, #1
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f10:	3b01      	subs	r3, #1
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	691a      	ldr	r2, [r3, #16]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f30:	b2d2      	uxtb	r2, r2
 8002f32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f38:	1c5a      	adds	r2, r3, #1
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f42:	3b01      	subs	r3, #1
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	3b01      	subs	r3, #1
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f58:	e042      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f000 fb2e 	bl	80035c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e04c      	b.n	8003008 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	691a      	ldr	r2, [r3, #16]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f78:	b2d2      	uxtb	r2, r2
 8002f7a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	1c5a      	adds	r2, r3, #1
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	f003 0304 	and.w	r3, r3, #4
 8002faa:	2b04      	cmp	r3, #4
 8002fac:	d118      	bne.n	8002fe0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	691a      	ldr	r2, [r3, #16]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	b2d2      	uxtb	r2, r2
 8002fba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	1c5a      	adds	r2, r3, #1
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f47f aec2 	bne.w	8002d6e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2220      	movs	r2, #32
 8002fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003002:	2300      	movs	r3, #0
 8003004:	e000      	b.n	8003008 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003006:	2302      	movs	r3, #2
  }
}
 8003008:	4618      	mov	r0, r3
 800300a:	3728      	adds	r7, #40	; 0x28
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	00010004 	.word	0x00010004

08003014 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b088      	sub	sp, #32
 8003018:	af02      	add	r7, sp, #8
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	4608      	mov	r0, r1
 800301e:	4611      	mov	r1, r2
 8003020:	461a      	mov	r2, r3
 8003022:	4603      	mov	r3, r0
 8003024:	817b      	strh	r3, [r7, #10]
 8003026:	460b      	mov	r3, r1
 8003028:	813b      	strh	r3, [r7, #8]
 800302a:	4613      	mov	r3, r2
 800302c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800303c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800303e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	6a3b      	ldr	r3, [r7, #32]
 8003044:	2200      	movs	r2, #0
 8003046:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f000 f960 	bl	8003310 <I2C_WaitOnFlagUntilTimeout>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00d      	beq.n	8003072 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003060:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003064:	d103      	bne.n	800306e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f44f 7200 	mov.w	r2, #512	; 0x200
 800306c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e05f      	b.n	8003132 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003072:	897b      	ldrh	r3, [r7, #10]
 8003074:	b2db      	uxtb	r3, r3
 8003076:	461a      	mov	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003080:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	6a3a      	ldr	r2, [r7, #32]
 8003086:	492d      	ldr	r1, [pc, #180]	; (800313c <I2C_RequestMemoryWrite+0x128>)
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f000 f998 	bl	80033be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e04c      	b.n	8003132 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003098:	2300      	movs	r3, #0
 800309a:	617b      	str	r3, [r7, #20]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	617b      	str	r3, [r7, #20]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	617b      	str	r3, [r7, #20]
 80030ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030b0:	6a39      	ldr	r1, [r7, #32]
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f000 fa02 	bl	80034bc <I2C_WaitOnTXEFlagUntilTimeout>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00d      	beq.n	80030da <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d107      	bne.n	80030d6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e02b      	b.n	8003132 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030da:	88fb      	ldrh	r3, [r7, #6]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d105      	bne.n	80030ec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030e0:	893b      	ldrh	r3, [r7, #8]
 80030e2:	b2da      	uxtb	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	611a      	str	r2, [r3, #16]
 80030ea:	e021      	b.n	8003130 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80030ec:	893b      	ldrh	r3, [r7, #8]
 80030ee:	0a1b      	lsrs	r3, r3, #8
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	b2da      	uxtb	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030fc:	6a39      	ldr	r1, [r7, #32]
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f000 f9dc 	bl	80034bc <I2C_WaitOnTXEFlagUntilTimeout>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00d      	beq.n	8003126 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	2b04      	cmp	r3, #4
 8003110:	d107      	bne.n	8003122 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003120:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e005      	b.n	8003132 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003126:	893b      	ldrh	r3, [r7, #8]
 8003128:	b2da      	uxtb	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3718      	adds	r7, #24
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	00010002 	.word	0x00010002

08003140 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b088      	sub	sp, #32
 8003144:	af02      	add	r7, sp, #8
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	4608      	mov	r0, r1
 800314a:	4611      	mov	r1, r2
 800314c:	461a      	mov	r2, r3
 800314e:	4603      	mov	r3, r0
 8003150:	817b      	strh	r3, [r7, #10]
 8003152:	460b      	mov	r3, r1
 8003154:	813b      	strh	r3, [r7, #8]
 8003156:	4613      	mov	r3, r2
 8003158:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003168:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003178:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317c:	9300      	str	r3, [sp, #0]
 800317e:	6a3b      	ldr	r3, [r7, #32]
 8003180:	2200      	movs	r2, #0
 8003182:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f000 f8c2 	bl	8003310 <I2C_WaitOnFlagUntilTimeout>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00d      	beq.n	80031ae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031a0:	d103      	bne.n	80031aa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e0aa      	b.n	8003304 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031ae:	897b      	ldrh	r3, [r7, #10]
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	461a      	mov	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c0:	6a3a      	ldr	r2, [r7, #32]
 80031c2:	4952      	ldr	r1, [pc, #328]	; (800330c <I2C_RequestMemoryRead+0x1cc>)
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f000 f8fa 	bl	80033be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e097      	b.n	8003304 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031d4:	2300      	movs	r3, #0
 80031d6:	617b      	str	r3, [r7, #20]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	617b      	str	r3, [r7, #20]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	617b      	str	r3, [r7, #20]
 80031e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ec:	6a39      	ldr	r1, [r7, #32]
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 f964 	bl	80034bc <I2C_WaitOnTXEFlagUntilTimeout>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00d      	beq.n	8003216 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	2b04      	cmp	r3, #4
 8003200:	d107      	bne.n	8003212 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003210:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e076      	b.n	8003304 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003216:	88fb      	ldrh	r3, [r7, #6]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d105      	bne.n	8003228 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800321c:	893b      	ldrh	r3, [r7, #8]
 800321e:	b2da      	uxtb	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	611a      	str	r2, [r3, #16]
 8003226:	e021      	b.n	800326c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003228:	893b      	ldrh	r3, [r7, #8]
 800322a:	0a1b      	lsrs	r3, r3, #8
 800322c:	b29b      	uxth	r3, r3
 800322e:	b2da      	uxtb	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003238:	6a39      	ldr	r1, [r7, #32]
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 f93e 	bl	80034bc <I2C_WaitOnTXEFlagUntilTimeout>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00d      	beq.n	8003262 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	2b04      	cmp	r3, #4
 800324c:	d107      	bne.n	800325e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800325c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e050      	b.n	8003304 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003262:	893b      	ldrh	r3, [r7, #8]
 8003264:	b2da      	uxtb	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800326c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800326e:	6a39      	ldr	r1, [r7, #32]
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 f923 	bl	80034bc <I2C_WaitOnTXEFlagUntilTimeout>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00d      	beq.n	8003298 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003280:	2b04      	cmp	r3, #4
 8003282:	d107      	bne.n	8003294 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003292:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e035      	b.n	8003304 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032a6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	6a3b      	ldr	r3, [r7, #32]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f000 f82b 	bl	8003310 <I2C_WaitOnFlagUntilTimeout>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00d      	beq.n	80032dc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032ce:	d103      	bne.n	80032d8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e013      	b.n	8003304 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80032dc:	897b      	ldrh	r3, [r7, #10]
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	f043 0301 	orr.w	r3, r3, #1
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ee:	6a3a      	ldr	r2, [r7, #32]
 80032f0:	4906      	ldr	r1, [pc, #24]	; (800330c <I2C_RequestMemoryRead+0x1cc>)
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f000 f863 	bl	80033be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e000      	b.n	8003304 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3718      	adds	r7, #24
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	00010002 	.word	0x00010002

08003310 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	603b      	str	r3, [r7, #0]
 800331c:	4613      	mov	r3, r2
 800331e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003320:	e025      	b.n	800336e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003328:	d021      	beq.n	800336e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800332a:	f7fe ff2f 	bl	800218c <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	429a      	cmp	r2, r3
 8003338:	d302      	bcc.n	8003340 <I2C_WaitOnFlagUntilTimeout+0x30>
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d116      	bne.n	800336e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2220      	movs	r2, #32
 800334a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	f043 0220 	orr.w	r2, r3, #32
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e023      	b.n	80033b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	0c1b      	lsrs	r3, r3, #16
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b01      	cmp	r3, #1
 8003376:	d10d      	bne.n	8003394 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	43da      	mvns	r2, r3
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	4013      	ands	r3, r2
 8003384:	b29b      	uxth	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	bf0c      	ite	eq
 800338a:	2301      	moveq	r3, #1
 800338c:	2300      	movne	r3, #0
 800338e:	b2db      	uxtb	r3, r3
 8003390:	461a      	mov	r2, r3
 8003392:	e00c      	b.n	80033ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	43da      	mvns	r2, r3
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	4013      	ands	r3, r2
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	bf0c      	ite	eq
 80033a6:	2301      	moveq	r3, #1
 80033a8:	2300      	movne	r3, #0
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	461a      	mov	r2, r3
 80033ae:	79fb      	ldrb	r3, [r7, #7]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d0b6      	beq.n	8003322 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b084      	sub	sp, #16
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	60f8      	str	r0, [r7, #12]
 80033c6:	60b9      	str	r1, [r7, #8]
 80033c8:	607a      	str	r2, [r7, #4]
 80033ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033cc:	e051      	b.n	8003472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033dc:	d123      	bne.n	8003426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2220      	movs	r2, #32
 8003402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	f043 0204 	orr.w	r2, r3, #4
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e046      	b.n	80034b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800342c:	d021      	beq.n	8003472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800342e:	f7fe fead 	bl	800218c <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	429a      	cmp	r2, r3
 800343c:	d302      	bcc.n	8003444 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d116      	bne.n	8003472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2220      	movs	r2, #32
 800344e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	f043 0220 	orr.w	r2, r3, #32
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e020      	b.n	80034b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	0c1b      	lsrs	r3, r3, #16
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b01      	cmp	r3, #1
 800347a:	d10c      	bne.n	8003496 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	43da      	mvns	r2, r3
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	4013      	ands	r3, r2
 8003488:	b29b      	uxth	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	bf14      	ite	ne
 800348e:	2301      	movne	r3, #1
 8003490:	2300      	moveq	r3, #0
 8003492:	b2db      	uxtb	r3, r3
 8003494:	e00b      	b.n	80034ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	43da      	mvns	r2, r3
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	4013      	ands	r3, r2
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	bf14      	ite	ne
 80034a8:	2301      	movne	r3, #1
 80034aa:	2300      	moveq	r3, #0
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d18d      	bne.n	80033ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034c8:	e02d      	b.n	8003526 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f000 f8ce 	bl	800366c <I2C_IsAcknowledgeFailed>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e02d      	b.n	8003536 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e0:	d021      	beq.n	8003526 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034e2:	f7fe fe53 	bl	800218c <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d302      	bcc.n	80034f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d116      	bne.n	8003526 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2220      	movs	r2, #32
 8003502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	f043 0220 	orr.w	r2, r3, #32
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e007      	b.n	8003536 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	695b      	ldr	r3, [r3, #20]
 800352c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003530:	2b80      	cmp	r3, #128	; 0x80
 8003532:	d1ca      	bne.n	80034ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b084      	sub	sp, #16
 8003542:	af00      	add	r7, sp, #0
 8003544:	60f8      	str	r0, [r7, #12]
 8003546:	60b9      	str	r1, [r7, #8]
 8003548:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800354a:	e02d      	b.n	80035a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f000 f88d 	bl	800366c <I2C_IsAcknowledgeFailed>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d001      	beq.n	800355c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e02d      	b.n	80035b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003562:	d021      	beq.n	80035a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003564:	f7fe fe12 	bl	800218c <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	429a      	cmp	r2, r3
 8003572:	d302      	bcc.n	800357a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d116      	bne.n	80035a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2220      	movs	r2, #32
 8003584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003594:	f043 0220 	orr.w	r2, r3, #32
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e007      	b.n	80035b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	f003 0304 	and.w	r3, r3, #4
 80035b2:	2b04      	cmp	r3, #4
 80035b4:	d1ca      	bne.n	800354c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035cc:	e042      	b.n	8003654 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	f003 0310 	and.w	r3, r3, #16
 80035d8:	2b10      	cmp	r3, #16
 80035da:	d119      	bne.n	8003610 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f06f 0210 	mvn.w	r2, #16
 80035e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2220      	movs	r2, #32
 80035f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e029      	b.n	8003664 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003610:	f7fe fdbc 	bl	800218c <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	429a      	cmp	r2, r3
 800361e:	d302      	bcc.n	8003626 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d116      	bne.n	8003654 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2220      	movs	r2, #32
 8003630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003640:	f043 0220 	orr.w	r2, r3, #32
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e007      	b.n	8003664 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365e:	2b40      	cmp	r3, #64	; 0x40
 8003660:	d1b5      	bne.n	80035ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800367e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003682:	d11b      	bne.n	80036bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800368c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2220      	movs	r2, #32
 8003698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a8:	f043 0204 	orr.w	r2, r3, #4
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e000      	b.n	80036be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
	...

080036cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e264      	b.n	8003ba8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d075      	beq.n	80037d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036ea:	4ba3      	ldr	r3, [pc, #652]	; (8003978 <HAL_RCC_OscConfig+0x2ac>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 030c 	and.w	r3, r3, #12
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	d00c      	beq.n	8003710 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036f6:	4ba0      	ldr	r3, [pc, #640]	; (8003978 <HAL_RCC_OscConfig+0x2ac>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036fe:	2b08      	cmp	r3, #8
 8003700:	d112      	bne.n	8003728 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003702:	4b9d      	ldr	r3, [pc, #628]	; (8003978 <HAL_RCC_OscConfig+0x2ac>)
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800370a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800370e:	d10b      	bne.n	8003728 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003710:	4b99      	ldr	r3, [pc, #612]	; (8003978 <HAL_RCC_OscConfig+0x2ac>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d05b      	beq.n	80037d4 <HAL_RCC_OscConfig+0x108>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d157      	bne.n	80037d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e23f      	b.n	8003ba8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003730:	d106      	bne.n	8003740 <HAL_RCC_OscConfig+0x74>
 8003732:	4b91      	ldr	r3, [pc, #580]	; (8003978 <HAL_RCC_OscConfig+0x2ac>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a90      	ldr	r2, [pc, #576]	; (8003978 <HAL_RCC_OscConfig+0x2ac>)
 8003738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800373c:	6013      	str	r3, [r2, #0]
 800373e:	e01d      	b.n	800377c <HAL_RCC_OscConfig+0xb0>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003748:	d10c      	bne.n	8003764 <HAL_RCC_OscConfig+0x98>
 800374a:	4b8b      	ldr	r3, [pc, #556]	; (8003978 <HAL_RCC_OscConfig+0x2ac>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a8a      	ldr	r2, [pc, #552]	; (8003978 <HAL_RCC_OscConfig+0x2ac>)
 8003750:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003754:	6013      	str	r3, [r2, #0]
 8003756:	4b88      	ldr	r3, [pc, #544]	; (8003978 <HAL_RCC_OscConfig+0x2ac>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a87      	ldr	r2, [pc, #540]	; (8003978 <HAL_RCC_OscConfig+0x2ac>)
 800375c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003760:	6013      	str	r3, [r2, #0]
 8003762:	e00b      	b.n	800377c <HAL_RCC_OscConfig+0xb0>
 8003764:	4b84      	ldr	r3, [pc, #528]	; (8003978 <HAL_RCC_OscConfig+0x2ac>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a83      	ldr	r2, [pc, #524]	; (8003978 <HAL_RCC_OscConfig+0x2ac>)
 800376a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800376e:	6013      	str	r3, [r2, #0]
 8003770:	4b81      	ldr	r3, [pc, #516]	; (8003978 <HAL_RCC_OscConfig+0x2ac>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a80      	ldr	r2, [pc, #512]	; (8003978 <HAL_RCC_OscConfig+0x2ac>)
 8003776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800377a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d013      	beq.n	80037ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003784:	f7fe fd02 	bl	800218c <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800378c:	f7fe fcfe 	bl	800218c <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b64      	cmp	r3, #100	; 0x64
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e204      	b.n	8003ba8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800379e:	4b76      	ldr	r3, [pc, #472]	; (8003978 <HAL_RCC_OscConfig+0x2ac>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0f0      	beq.n	800378c <HAL_RCC_OscConfig+0xc0>
 80037aa:	e014      	b.n	80037d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ac:	f7fe fcee 	bl	800218c <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037b4:	f7fe fcea 	bl	800218c <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b64      	cmp	r3, #100	; 0x64
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e1f0      	b.n	8003ba8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037c6:	4b6c      	ldr	r3, [pc, #432]	; (8003978 <HAL_RCC_OscConfig+0x2ac>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1f0      	bne.n	80037b4 <HAL_RCC_OscConfig+0xe8>
 80037d2:	e000      	b.n	80037d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d063      	beq.n	80038aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037e2:	4b65      	ldr	r3, [pc, #404]	; (8003978 <HAL_RCC_OscConfig+0x2ac>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f003 030c 	and.w	r3, r3, #12
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00b      	beq.n	8003806 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037ee:	4b62      	ldr	r3, [pc, #392]	; (8003978 <HAL_RCC_OscConfig+0x2ac>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037f6:	2b08      	cmp	r3, #8
 80037f8:	d11c      	bne.n	8003834 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037fa:	4b5f      	ldr	r3, [pc, #380]	; (8003978 <HAL_RCC_OscConfig+0x2ac>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d116      	bne.n	8003834 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003806:	4b5c      	ldr	r3, [pc, #368]	; (8003978 <HAL_RCC_OscConfig+0x2ac>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d005      	beq.n	800381e <HAL_RCC_OscConfig+0x152>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d001      	beq.n	800381e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e1c4      	b.n	8003ba8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800381e:	4b56      	ldr	r3, [pc, #344]	; (8003978 <HAL_RCC_OscConfig+0x2ac>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	4952      	ldr	r1, [pc, #328]	; (8003978 <HAL_RCC_OscConfig+0x2ac>)
 800382e:	4313      	orrs	r3, r2
 8003830:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003832:	e03a      	b.n	80038aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d020      	beq.n	800387e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800383c:	4b4f      	ldr	r3, [pc, #316]	; (800397c <HAL_RCC_OscConfig+0x2b0>)
 800383e:	2201      	movs	r2, #1
 8003840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003842:	f7fe fca3 	bl	800218c <HAL_GetTick>
 8003846:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003848:	e008      	b.n	800385c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800384a:	f7fe fc9f 	bl	800218c <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d901      	bls.n	800385c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e1a5      	b.n	8003ba8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800385c:	4b46      	ldr	r3, [pc, #280]	; (8003978 <HAL_RCC_OscConfig+0x2ac>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d0f0      	beq.n	800384a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003868:	4b43      	ldr	r3, [pc, #268]	; (8003978 <HAL_RCC_OscConfig+0x2ac>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	4940      	ldr	r1, [pc, #256]	; (8003978 <HAL_RCC_OscConfig+0x2ac>)
 8003878:	4313      	orrs	r3, r2
 800387a:	600b      	str	r3, [r1, #0]
 800387c:	e015      	b.n	80038aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800387e:	4b3f      	ldr	r3, [pc, #252]	; (800397c <HAL_RCC_OscConfig+0x2b0>)
 8003880:	2200      	movs	r2, #0
 8003882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003884:	f7fe fc82 	bl	800218c <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800388a:	e008      	b.n	800389e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800388c:	f7fe fc7e 	bl	800218c <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b02      	cmp	r3, #2
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e184      	b.n	8003ba8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800389e:	4b36      	ldr	r3, [pc, #216]	; (8003978 <HAL_RCC_OscConfig+0x2ac>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1f0      	bne.n	800388c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0308 	and.w	r3, r3, #8
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d030      	beq.n	8003918 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d016      	beq.n	80038ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038be:	4b30      	ldr	r3, [pc, #192]	; (8003980 <HAL_RCC_OscConfig+0x2b4>)
 80038c0:	2201      	movs	r2, #1
 80038c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c4:	f7fe fc62 	bl	800218c <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038cc:	f7fe fc5e 	bl	800218c <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e164      	b.n	8003ba8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038de:	4b26      	ldr	r3, [pc, #152]	; (8003978 <HAL_RCC_OscConfig+0x2ac>)
 80038e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d0f0      	beq.n	80038cc <HAL_RCC_OscConfig+0x200>
 80038ea:	e015      	b.n	8003918 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038ec:	4b24      	ldr	r3, [pc, #144]	; (8003980 <HAL_RCC_OscConfig+0x2b4>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038f2:	f7fe fc4b 	bl	800218c <HAL_GetTick>
 80038f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038f8:	e008      	b.n	800390c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038fa:	f7fe fc47 	bl	800218c <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d901      	bls.n	800390c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e14d      	b.n	8003ba8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800390c:	4b1a      	ldr	r3, [pc, #104]	; (8003978 <HAL_RCC_OscConfig+0x2ac>)
 800390e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1f0      	bne.n	80038fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0304 	and.w	r3, r3, #4
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 80a0 	beq.w	8003a66 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003926:	2300      	movs	r3, #0
 8003928:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800392a:	4b13      	ldr	r3, [pc, #76]	; (8003978 <HAL_RCC_OscConfig+0x2ac>)
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10f      	bne.n	8003956 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003936:	2300      	movs	r3, #0
 8003938:	60bb      	str	r3, [r7, #8]
 800393a:	4b0f      	ldr	r3, [pc, #60]	; (8003978 <HAL_RCC_OscConfig+0x2ac>)
 800393c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393e:	4a0e      	ldr	r2, [pc, #56]	; (8003978 <HAL_RCC_OscConfig+0x2ac>)
 8003940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003944:	6413      	str	r3, [r2, #64]	; 0x40
 8003946:	4b0c      	ldr	r3, [pc, #48]	; (8003978 <HAL_RCC_OscConfig+0x2ac>)
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800394e:	60bb      	str	r3, [r7, #8]
 8003950:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003952:	2301      	movs	r3, #1
 8003954:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003956:	4b0b      	ldr	r3, [pc, #44]	; (8003984 <HAL_RCC_OscConfig+0x2b8>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395e:	2b00      	cmp	r3, #0
 8003960:	d121      	bne.n	80039a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003962:	4b08      	ldr	r3, [pc, #32]	; (8003984 <HAL_RCC_OscConfig+0x2b8>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a07      	ldr	r2, [pc, #28]	; (8003984 <HAL_RCC_OscConfig+0x2b8>)
 8003968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800396c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800396e:	f7fe fc0d 	bl	800218c <HAL_GetTick>
 8003972:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003974:	e011      	b.n	800399a <HAL_RCC_OscConfig+0x2ce>
 8003976:	bf00      	nop
 8003978:	40023800 	.word	0x40023800
 800397c:	42470000 	.word	0x42470000
 8003980:	42470e80 	.word	0x42470e80
 8003984:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003988:	f7fe fc00 	bl	800218c <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e106      	b.n	8003ba8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800399a:	4b85      	ldr	r3, [pc, #532]	; (8003bb0 <HAL_RCC_OscConfig+0x4e4>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d0f0      	beq.n	8003988 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d106      	bne.n	80039bc <HAL_RCC_OscConfig+0x2f0>
 80039ae:	4b81      	ldr	r3, [pc, #516]	; (8003bb4 <HAL_RCC_OscConfig+0x4e8>)
 80039b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b2:	4a80      	ldr	r2, [pc, #512]	; (8003bb4 <HAL_RCC_OscConfig+0x4e8>)
 80039b4:	f043 0301 	orr.w	r3, r3, #1
 80039b8:	6713      	str	r3, [r2, #112]	; 0x70
 80039ba:	e01c      	b.n	80039f6 <HAL_RCC_OscConfig+0x32a>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	2b05      	cmp	r3, #5
 80039c2:	d10c      	bne.n	80039de <HAL_RCC_OscConfig+0x312>
 80039c4:	4b7b      	ldr	r3, [pc, #492]	; (8003bb4 <HAL_RCC_OscConfig+0x4e8>)
 80039c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c8:	4a7a      	ldr	r2, [pc, #488]	; (8003bb4 <HAL_RCC_OscConfig+0x4e8>)
 80039ca:	f043 0304 	orr.w	r3, r3, #4
 80039ce:	6713      	str	r3, [r2, #112]	; 0x70
 80039d0:	4b78      	ldr	r3, [pc, #480]	; (8003bb4 <HAL_RCC_OscConfig+0x4e8>)
 80039d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d4:	4a77      	ldr	r2, [pc, #476]	; (8003bb4 <HAL_RCC_OscConfig+0x4e8>)
 80039d6:	f043 0301 	orr.w	r3, r3, #1
 80039da:	6713      	str	r3, [r2, #112]	; 0x70
 80039dc:	e00b      	b.n	80039f6 <HAL_RCC_OscConfig+0x32a>
 80039de:	4b75      	ldr	r3, [pc, #468]	; (8003bb4 <HAL_RCC_OscConfig+0x4e8>)
 80039e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e2:	4a74      	ldr	r2, [pc, #464]	; (8003bb4 <HAL_RCC_OscConfig+0x4e8>)
 80039e4:	f023 0301 	bic.w	r3, r3, #1
 80039e8:	6713      	str	r3, [r2, #112]	; 0x70
 80039ea:	4b72      	ldr	r3, [pc, #456]	; (8003bb4 <HAL_RCC_OscConfig+0x4e8>)
 80039ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ee:	4a71      	ldr	r2, [pc, #452]	; (8003bb4 <HAL_RCC_OscConfig+0x4e8>)
 80039f0:	f023 0304 	bic.w	r3, r3, #4
 80039f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d015      	beq.n	8003a2a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039fe:	f7fe fbc5 	bl	800218c <HAL_GetTick>
 8003a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a04:	e00a      	b.n	8003a1c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a06:	f7fe fbc1 	bl	800218c <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d901      	bls.n	8003a1c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e0c5      	b.n	8003ba8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a1c:	4b65      	ldr	r3, [pc, #404]	; (8003bb4 <HAL_RCC_OscConfig+0x4e8>)
 8003a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d0ee      	beq.n	8003a06 <HAL_RCC_OscConfig+0x33a>
 8003a28:	e014      	b.n	8003a54 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a2a:	f7fe fbaf 	bl	800218c <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a30:	e00a      	b.n	8003a48 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a32:	f7fe fbab 	bl	800218c <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d901      	bls.n	8003a48 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e0af      	b.n	8003ba8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a48:	4b5a      	ldr	r3, [pc, #360]	; (8003bb4 <HAL_RCC_OscConfig+0x4e8>)
 8003a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1ee      	bne.n	8003a32 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a54:	7dfb      	ldrb	r3, [r7, #23]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d105      	bne.n	8003a66 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a5a:	4b56      	ldr	r3, [pc, #344]	; (8003bb4 <HAL_RCC_OscConfig+0x4e8>)
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	4a55      	ldr	r2, [pc, #340]	; (8003bb4 <HAL_RCC_OscConfig+0x4e8>)
 8003a60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a64:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f000 809b 	beq.w	8003ba6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a70:	4b50      	ldr	r3, [pc, #320]	; (8003bb4 <HAL_RCC_OscConfig+0x4e8>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f003 030c 	and.w	r3, r3, #12
 8003a78:	2b08      	cmp	r3, #8
 8003a7a:	d05c      	beq.n	8003b36 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d141      	bne.n	8003b08 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a84:	4b4c      	ldr	r3, [pc, #304]	; (8003bb8 <HAL_RCC_OscConfig+0x4ec>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a8a:	f7fe fb7f 	bl	800218c <HAL_GetTick>
 8003a8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a90:	e008      	b.n	8003aa4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a92:	f7fe fb7b 	bl	800218c <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e081      	b.n	8003ba8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aa4:	4b43      	ldr	r3, [pc, #268]	; (8003bb4 <HAL_RCC_OscConfig+0x4e8>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1f0      	bne.n	8003a92 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	69da      	ldr	r2, [r3, #28]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	431a      	orrs	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abe:	019b      	lsls	r3, r3, #6
 8003ac0:	431a      	orrs	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac6:	085b      	lsrs	r3, r3, #1
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	041b      	lsls	r3, r3, #16
 8003acc:	431a      	orrs	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad2:	061b      	lsls	r3, r3, #24
 8003ad4:	4937      	ldr	r1, [pc, #220]	; (8003bb4 <HAL_RCC_OscConfig+0x4e8>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ada:	4b37      	ldr	r3, [pc, #220]	; (8003bb8 <HAL_RCC_OscConfig+0x4ec>)
 8003adc:	2201      	movs	r2, #1
 8003ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae0:	f7fe fb54 	bl	800218c <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ae8:	f7fe fb50 	bl	800218c <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e056      	b.n	8003ba8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003afa:	4b2e      	ldr	r3, [pc, #184]	; (8003bb4 <HAL_RCC_OscConfig+0x4e8>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d0f0      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x41c>
 8003b06:	e04e      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b08:	4b2b      	ldr	r3, [pc, #172]	; (8003bb8 <HAL_RCC_OscConfig+0x4ec>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b0e:	f7fe fb3d 	bl	800218c <HAL_GetTick>
 8003b12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b14:	e008      	b.n	8003b28 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b16:	f7fe fb39 	bl	800218c <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d901      	bls.n	8003b28 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e03f      	b.n	8003ba8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b28:	4b22      	ldr	r3, [pc, #136]	; (8003bb4 <HAL_RCC_OscConfig+0x4e8>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d1f0      	bne.n	8003b16 <HAL_RCC_OscConfig+0x44a>
 8003b34:	e037      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d101      	bne.n	8003b42 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e032      	b.n	8003ba8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b42:	4b1c      	ldr	r3, [pc, #112]	; (8003bb4 <HAL_RCC_OscConfig+0x4e8>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d028      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d121      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d11a      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b72:	4013      	ands	r3, r2
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b78:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d111      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b88:	085b      	lsrs	r3, r3, #1
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d107      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d001      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e000      	b.n	8003ba8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3718      	adds	r7, #24
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40007000 	.word	0x40007000
 8003bb4:	40023800 	.word	0x40023800
 8003bb8:	42470060 	.word	0x42470060

08003bbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d101      	bne.n	8003bd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e0cc      	b.n	8003d6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bd0:	4b68      	ldr	r3, [pc, #416]	; (8003d74 <HAL_RCC_ClockConfig+0x1b8>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0307 	and.w	r3, r3, #7
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d90c      	bls.n	8003bf8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bde:	4b65      	ldr	r3, [pc, #404]	; (8003d74 <HAL_RCC_ClockConfig+0x1b8>)
 8003be0:	683a      	ldr	r2, [r7, #0]
 8003be2:	b2d2      	uxtb	r2, r2
 8003be4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003be6:	4b63      	ldr	r3, [pc, #396]	; (8003d74 <HAL_RCC_ClockConfig+0x1b8>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0307 	and.w	r3, r3, #7
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d001      	beq.n	8003bf8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e0b8      	b.n	8003d6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d020      	beq.n	8003c46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0304 	and.w	r3, r3, #4
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d005      	beq.n	8003c1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c10:	4b59      	ldr	r3, [pc, #356]	; (8003d78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	4a58      	ldr	r2, [pc, #352]	; (8003d78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0308 	and.w	r3, r3, #8
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d005      	beq.n	8003c34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c28:	4b53      	ldr	r3, [pc, #332]	; (8003d78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	4a52      	ldr	r2, [pc, #328]	; (8003d78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c34:	4b50      	ldr	r3, [pc, #320]	; (8003d78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	494d      	ldr	r1, [pc, #308]	; (8003d78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d044      	beq.n	8003cdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d107      	bne.n	8003c6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c5a:	4b47      	ldr	r3, [pc, #284]	; (8003d78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d119      	bne.n	8003c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e07f      	b.n	8003d6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d003      	beq.n	8003c7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c76:	2b03      	cmp	r3, #3
 8003c78:	d107      	bne.n	8003c8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c7a:	4b3f      	ldr	r3, [pc, #252]	; (8003d78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d109      	bne.n	8003c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e06f      	b.n	8003d6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c8a:	4b3b      	ldr	r3, [pc, #236]	; (8003d78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e067      	b.n	8003d6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c9a:	4b37      	ldr	r3, [pc, #220]	; (8003d78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f023 0203 	bic.w	r2, r3, #3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	4934      	ldr	r1, [pc, #208]	; (8003d78 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cac:	f7fe fa6e 	bl	800218c <HAL_GetTick>
 8003cb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cb2:	e00a      	b.n	8003cca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cb4:	f7fe fa6a 	bl	800218c <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e04f      	b.n	8003d6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cca:	4b2b      	ldr	r3, [pc, #172]	; (8003d78 <HAL_RCC_ClockConfig+0x1bc>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 020c 	and.w	r2, r3, #12
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d1eb      	bne.n	8003cb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cdc:	4b25      	ldr	r3, [pc, #148]	; (8003d74 <HAL_RCC_ClockConfig+0x1b8>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d20c      	bcs.n	8003d04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cea:	4b22      	ldr	r3, [pc, #136]	; (8003d74 <HAL_RCC_ClockConfig+0x1b8>)
 8003cec:	683a      	ldr	r2, [r7, #0]
 8003cee:	b2d2      	uxtb	r2, r2
 8003cf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cf2:	4b20      	ldr	r3, [pc, #128]	; (8003d74 <HAL_RCC_ClockConfig+0x1b8>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0307 	and.w	r3, r3, #7
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d001      	beq.n	8003d04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e032      	b.n	8003d6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0304 	and.w	r3, r3, #4
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d008      	beq.n	8003d22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d10:	4b19      	ldr	r3, [pc, #100]	; (8003d78 <HAL_RCC_ClockConfig+0x1bc>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	4916      	ldr	r1, [pc, #88]	; (8003d78 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0308 	and.w	r3, r3, #8
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d009      	beq.n	8003d42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d2e:	4b12      	ldr	r3, [pc, #72]	; (8003d78 <HAL_RCC_ClockConfig+0x1bc>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	490e      	ldr	r1, [pc, #56]	; (8003d78 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d42:	f000 f821 	bl	8003d88 <HAL_RCC_GetSysClockFreq>
 8003d46:	4602      	mov	r2, r0
 8003d48:	4b0b      	ldr	r3, [pc, #44]	; (8003d78 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	091b      	lsrs	r3, r3, #4
 8003d4e:	f003 030f 	and.w	r3, r3, #15
 8003d52:	490a      	ldr	r1, [pc, #40]	; (8003d7c <HAL_RCC_ClockConfig+0x1c0>)
 8003d54:	5ccb      	ldrb	r3, [r1, r3]
 8003d56:	fa22 f303 	lsr.w	r3, r2, r3
 8003d5a:	4a09      	ldr	r2, [pc, #36]	; (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003d5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d5e:	4b09      	ldr	r3, [pc, #36]	; (8003d84 <HAL_RCC_ClockConfig+0x1c8>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7fe f9ce 	bl	8002104 <HAL_InitTick>

  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	40023c00 	.word	0x40023c00
 8003d78:	40023800 	.word	0x40023800
 8003d7c:	08008af0 	.word	0x08008af0
 8003d80:	20000000 	.word	0x20000000
 8003d84:	20000004 	.word	0x20000004

08003d88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d88:	b5b0      	push	{r4, r5, r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d8e:	2100      	movs	r1, #0
 8003d90:	6079      	str	r1, [r7, #4]
 8003d92:	2100      	movs	r1, #0
 8003d94:	60f9      	str	r1, [r7, #12]
 8003d96:	2100      	movs	r1, #0
 8003d98:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d9e:	4952      	ldr	r1, [pc, #328]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003da0:	6889      	ldr	r1, [r1, #8]
 8003da2:	f001 010c 	and.w	r1, r1, #12
 8003da6:	2908      	cmp	r1, #8
 8003da8:	d00d      	beq.n	8003dc6 <HAL_RCC_GetSysClockFreq+0x3e>
 8003daa:	2908      	cmp	r1, #8
 8003dac:	f200 8094 	bhi.w	8003ed8 <HAL_RCC_GetSysClockFreq+0x150>
 8003db0:	2900      	cmp	r1, #0
 8003db2:	d002      	beq.n	8003dba <HAL_RCC_GetSysClockFreq+0x32>
 8003db4:	2904      	cmp	r1, #4
 8003db6:	d003      	beq.n	8003dc0 <HAL_RCC_GetSysClockFreq+0x38>
 8003db8:	e08e      	b.n	8003ed8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003dba:	4b4c      	ldr	r3, [pc, #304]	; (8003eec <HAL_RCC_GetSysClockFreq+0x164>)
 8003dbc:	60bb      	str	r3, [r7, #8]
       break;
 8003dbe:	e08e      	b.n	8003ede <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003dc0:	4b4b      	ldr	r3, [pc, #300]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0x168>)
 8003dc2:	60bb      	str	r3, [r7, #8]
      break;
 8003dc4:	e08b      	b.n	8003ede <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003dc6:	4948      	ldr	r1, [pc, #288]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003dc8:	6849      	ldr	r1, [r1, #4]
 8003dca:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003dce:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dd0:	4945      	ldr	r1, [pc, #276]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003dd2:	6849      	ldr	r1, [r1, #4]
 8003dd4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003dd8:	2900      	cmp	r1, #0
 8003dda:	d024      	beq.n	8003e26 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ddc:	4942      	ldr	r1, [pc, #264]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003dde:	6849      	ldr	r1, [r1, #4]
 8003de0:	0989      	lsrs	r1, r1, #6
 8003de2:	4608      	mov	r0, r1
 8003de4:	f04f 0100 	mov.w	r1, #0
 8003de8:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003dec:	f04f 0500 	mov.w	r5, #0
 8003df0:	ea00 0204 	and.w	r2, r0, r4
 8003df4:	ea01 0305 	and.w	r3, r1, r5
 8003df8:	493d      	ldr	r1, [pc, #244]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0x168>)
 8003dfa:	fb01 f003 	mul.w	r0, r1, r3
 8003dfe:	2100      	movs	r1, #0
 8003e00:	fb01 f102 	mul.w	r1, r1, r2
 8003e04:	1844      	adds	r4, r0, r1
 8003e06:	493a      	ldr	r1, [pc, #232]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0x168>)
 8003e08:	fba2 0101 	umull	r0, r1, r2, r1
 8003e0c:	1863      	adds	r3, r4, r1
 8003e0e:	4619      	mov	r1, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	461a      	mov	r2, r3
 8003e14:	f04f 0300 	mov.w	r3, #0
 8003e18:	f7fc ff1e 	bl	8000c58 <__aeabi_uldivmod>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	460b      	mov	r3, r1
 8003e20:	4613      	mov	r3, r2
 8003e22:	60fb      	str	r3, [r7, #12]
 8003e24:	e04a      	b.n	8003ebc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e26:	4b30      	ldr	r3, [pc, #192]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	099b      	lsrs	r3, r3, #6
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	f04f 0300 	mov.w	r3, #0
 8003e32:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003e36:	f04f 0100 	mov.w	r1, #0
 8003e3a:	ea02 0400 	and.w	r4, r2, r0
 8003e3e:	ea03 0501 	and.w	r5, r3, r1
 8003e42:	4620      	mov	r0, r4
 8003e44:	4629      	mov	r1, r5
 8003e46:	f04f 0200 	mov.w	r2, #0
 8003e4a:	f04f 0300 	mov.w	r3, #0
 8003e4e:	014b      	lsls	r3, r1, #5
 8003e50:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003e54:	0142      	lsls	r2, r0, #5
 8003e56:	4610      	mov	r0, r2
 8003e58:	4619      	mov	r1, r3
 8003e5a:	1b00      	subs	r0, r0, r4
 8003e5c:	eb61 0105 	sbc.w	r1, r1, r5
 8003e60:	f04f 0200 	mov.w	r2, #0
 8003e64:	f04f 0300 	mov.w	r3, #0
 8003e68:	018b      	lsls	r3, r1, #6
 8003e6a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003e6e:	0182      	lsls	r2, r0, #6
 8003e70:	1a12      	subs	r2, r2, r0
 8003e72:	eb63 0301 	sbc.w	r3, r3, r1
 8003e76:	f04f 0000 	mov.w	r0, #0
 8003e7a:	f04f 0100 	mov.w	r1, #0
 8003e7e:	00d9      	lsls	r1, r3, #3
 8003e80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e84:	00d0      	lsls	r0, r2, #3
 8003e86:	4602      	mov	r2, r0
 8003e88:	460b      	mov	r3, r1
 8003e8a:	1912      	adds	r2, r2, r4
 8003e8c:	eb45 0303 	adc.w	r3, r5, r3
 8003e90:	f04f 0000 	mov.w	r0, #0
 8003e94:	f04f 0100 	mov.w	r1, #0
 8003e98:	0299      	lsls	r1, r3, #10
 8003e9a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003e9e:	0290      	lsls	r0, r2, #10
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	4610      	mov	r0, r2
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	f04f 0300 	mov.w	r3, #0
 8003eb0:	f7fc fed2 	bl	8000c58 <__aeabi_uldivmod>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	4613      	mov	r3, r2
 8003eba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ebc:	4b0a      	ldr	r3, [pc, #40]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	0c1b      	lsrs	r3, r3, #16
 8003ec2:	f003 0303 	and.w	r3, r3, #3
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed4:	60bb      	str	r3, [r7, #8]
      break;
 8003ed6:	e002      	b.n	8003ede <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ed8:	4b04      	ldr	r3, [pc, #16]	; (8003eec <HAL_RCC_GetSysClockFreq+0x164>)
 8003eda:	60bb      	str	r3, [r7, #8]
      break;
 8003edc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ede:	68bb      	ldr	r3, [r7, #8]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bdb0      	pop	{r4, r5, r7, pc}
 8003ee8:	40023800 	.word	0x40023800
 8003eec:	00f42400 	.word	0x00f42400
 8003ef0:	017d7840 	.word	0x017d7840

08003ef4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ef8:	4b03      	ldr	r3, [pc, #12]	; (8003f08 <HAL_RCC_GetHCLKFreq+0x14>)
 8003efa:	681b      	ldr	r3, [r3, #0]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	20000000 	.word	0x20000000

08003f0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f10:	f7ff fff0 	bl	8003ef4 <HAL_RCC_GetHCLKFreq>
 8003f14:	4602      	mov	r2, r0
 8003f16:	4b05      	ldr	r3, [pc, #20]	; (8003f2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	0a9b      	lsrs	r3, r3, #10
 8003f1c:	f003 0307 	and.w	r3, r3, #7
 8003f20:	4903      	ldr	r1, [pc, #12]	; (8003f30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f22:	5ccb      	ldrb	r3, [r1, r3]
 8003f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	40023800 	.word	0x40023800
 8003f30:	08008b00 	.word	0x08008b00

08003f34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e07b      	b.n	800403e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d108      	bne.n	8003f60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f56:	d009      	beq.n	8003f6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	61da      	str	r2, [r3, #28]
 8003f5e:	e005      	b.n	8003f6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d106      	bne.n	8003f8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7fd fdd0 	bl	8001b2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2202      	movs	r2, #2
 8003f90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fa2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003fb4:	431a      	orrs	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	431a      	orrs	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fdc:	431a      	orrs	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff0:	ea42 0103 	orr.w	r1, r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	430a      	orrs	r2, r1
 8004002:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	0c1b      	lsrs	r3, r3, #16
 800400a:	f003 0104 	and.w	r1, r3, #4
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	f003 0210 	and.w	r2, r3, #16
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	69da      	ldr	r2, [r3, #28]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800402c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b088      	sub	sp, #32
 800404a:	af00      	add	r7, sp, #0
 800404c:	60f8      	str	r0, [r7, #12]
 800404e:	60b9      	str	r1, [r7, #8]
 8004050:	603b      	str	r3, [r7, #0]
 8004052:	4613      	mov	r3, r2
 8004054:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004056:	2300      	movs	r3, #0
 8004058:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004060:	2b01      	cmp	r3, #1
 8004062:	d101      	bne.n	8004068 <HAL_SPI_Transmit+0x22>
 8004064:	2302      	movs	r3, #2
 8004066:	e126      	b.n	80042b6 <HAL_SPI_Transmit+0x270>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004070:	f7fe f88c 	bl	800218c <HAL_GetTick>
 8004074:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004076:	88fb      	ldrh	r3, [r7, #6]
 8004078:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b01      	cmp	r3, #1
 8004084:	d002      	beq.n	800408c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004086:	2302      	movs	r3, #2
 8004088:	77fb      	strb	r3, [r7, #31]
    goto error;
 800408a:	e10b      	b.n	80042a4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <HAL_SPI_Transmit+0x52>
 8004092:	88fb      	ldrh	r3, [r7, #6]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d102      	bne.n	800409e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800409c:	e102      	b.n	80042a4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2203      	movs	r2, #3
 80040a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	68ba      	ldr	r2, [r7, #8]
 80040b0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	88fa      	ldrh	r2, [r7, #6]
 80040b6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	88fa      	ldrh	r2, [r7, #6]
 80040bc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040e4:	d10f      	bne.n	8004106 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004104:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004110:	2b40      	cmp	r3, #64	; 0x40
 8004112:	d007      	beq.n	8004124 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004122:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800412c:	d14b      	bne.n	80041c6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d002      	beq.n	800413c <HAL_SPI_Transmit+0xf6>
 8004136:	8afb      	ldrh	r3, [r7, #22]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d13e      	bne.n	80041ba <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004140:	881a      	ldrh	r2, [r3, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414c:	1c9a      	adds	r2, r3, #2
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004156:	b29b      	uxth	r3, r3
 8004158:	3b01      	subs	r3, #1
 800415a:	b29a      	uxth	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004160:	e02b      	b.n	80041ba <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	2b02      	cmp	r3, #2
 800416e:	d112      	bne.n	8004196 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004174:	881a      	ldrh	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004180:	1c9a      	adds	r2, r3, #2
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800418a:	b29b      	uxth	r3, r3
 800418c:	3b01      	subs	r3, #1
 800418e:	b29a      	uxth	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	86da      	strh	r2, [r3, #54]	; 0x36
 8004194:	e011      	b.n	80041ba <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004196:	f7fd fff9 	bl	800218c <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d803      	bhi.n	80041ae <HAL_SPI_Transmit+0x168>
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ac:	d102      	bne.n	80041b4 <HAL_SPI_Transmit+0x16e>
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d102      	bne.n	80041ba <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80041b8:	e074      	b.n	80042a4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041be:	b29b      	uxth	r3, r3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1ce      	bne.n	8004162 <HAL_SPI_Transmit+0x11c>
 80041c4:	e04c      	b.n	8004260 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d002      	beq.n	80041d4 <HAL_SPI_Transmit+0x18e>
 80041ce:	8afb      	ldrh	r3, [r7, #22]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d140      	bne.n	8004256 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	330c      	adds	r3, #12
 80041de:	7812      	ldrb	r2, [r2, #0]
 80041e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e6:	1c5a      	adds	r2, r3, #1
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	3b01      	subs	r3, #1
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80041fa:	e02c      	b.n	8004256 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b02      	cmp	r3, #2
 8004208:	d113      	bne.n	8004232 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	330c      	adds	r3, #12
 8004214:	7812      	ldrb	r2, [r2, #0]
 8004216:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421c:	1c5a      	adds	r2, r3, #1
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004226:	b29b      	uxth	r3, r3
 8004228:	3b01      	subs	r3, #1
 800422a:	b29a      	uxth	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004230:	e011      	b.n	8004256 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004232:	f7fd ffab 	bl	800218c <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	683a      	ldr	r2, [r7, #0]
 800423e:	429a      	cmp	r2, r3
 8004240:	d803      	bhi.n	800424a <HAL_SPI_Transmit+0x204>
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004248:	d102      	bne.n	8004250 <HAL_SPI_Transmit+0x20a>
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d102      	bne.n	8004256 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004254:	e026      	b.n	80042a4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800425a:	b29b      	uxth	r3, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1cd      	bne.n	80041fc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004260:	69ba      	ldr	r2, [r7, #24]
 8004262:	6839      	ldr	r1, [r7, #0]
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	f000 f8b3 	bl	80043d0 <SPI_EndRxTxTransaction>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d002      	beq.n	8004276 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2220      	movs	r2, #32
 8004274:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10a      	bne.n	8004294 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800427e:	2300      	movs	r3, #0
 8004280:	613b      	str	r3, [r7, #16]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	613b      	str	r3, [r7, #16]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	613b      	str	r3, [r7, #16]
 8004292:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004298:	2b00      	cmp	r3, #0
 800429a:	d002      	beq.n	80042a2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	77fb      	strb	r3, [r7, #31]
 80042a0:	e000      	b.n	80042a4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80042a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80042b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3720      	adds	r7, #32
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
	...

080042c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b088      	sub	sp, #32
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	603b      	str	r3, [r7, #0]
 80042cc:	4613      	mov	r3, r2
 80042ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80042d0:	f7fd ff5c 	bl	800218c <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d8:	1a9b      	subs	r3, r3, r2
 80042da:	683a      	ldr	r2, [r7, #0]
 80042dc:	4413      	add	r3, r2
 80042de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80042e0:	f7fd ff54 	bl	800218c <HAL_GetTick>
 80042e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80042e6:	4b39      	ldr	r3, [pc, #228]	; (80043cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	015b      	lsls	r3, r3, #5
 80042ec:	0d1b      	lsrs	r3, r3, #20
 80042ee:	69fa      	ldr	r2, [r7, #28]
 80042f0:	fb02 f303 	mul.w	r3, r2, r3
 80042f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042f6:	e054      	b.n	80043a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042fe:	d050      	beq.n	80043a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004300:	f7fd ff44 	bl	800218c <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	69fa      	ldr	r2, [r7, #28]
 800430c:	429a      	cmp	r2, r3
 800430e:	d902      	bls.n	8004316 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d13d      	bne.n	8004392 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	685a      	ldr	r2, [r3, #4]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004324:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800432e:	d111      	bne.n	8004354 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004338:	d004      	beq.n	8004344 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004342:	d107      	bne.n	8004354 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004352:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004358:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800435c:	d10f      	bne.n	800437e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800436c:	601a      	str	r2, [r3, #0]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800437c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e017      	b.n	80043c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004398:	2300      	movs	r3, #0
 800439a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	3b01      	subs	r3, #1
 80043a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	689a      	ldr	r2, [r3, #8]
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	4013      	ands	r3, r2
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	bf0c      	ite	eq
 80043b2:	2301      	moveq	r3, #1
 80043b4:	2300      	movne	r3, #0
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	461a      	mov	r2, r3
 80043ba:	79fb      	ldrb	r3, [r7, #7]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d19b      	bne.n	80042f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3720      	adds	r7, #32
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	20000000 	.word	0x20000000

080043d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b088      	sub	sp, #32
 80043d4:	af02      	add	r7, sp, #8
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80043dc:	4b1b      	ldr	r3, [pc, #108]	; (800444c <SPI_EndRxTxTransaction+0x7c>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a1b      	ldr	r2, [pc, #108]	; (8004450 <SPI_EndRxTxTransaction+0x80>)
 80043e2:	fba2 2303 	umull	r2, r3, r2, r3
 80043e6:	0d5b      	lsrs	r3, r3, #21
 80043e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80043ec:	fb02 f303 	mul.w	r3, r2, r3
 80043f0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043fa:	d112      	bne.n	8004422 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	9300      	str	r3, [sp, #0]
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	2200      	movs	r2, #0
 8004404:	2180      	movs	r1, #128	; 0x80
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f7ff ff5a 	bl	80042c0 <SPI_WaitFlagStateUntilTimeout>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d016      	beq.n	8004440 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004416:	f043 0220 	orr.w	r2, r3, #32
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e00f      	b.n	8004442 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00a      	beq.n	800443e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	3b01      	subs	r3, #1
 800442c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004438:	2b80      	cmp	r3, #128	; 0x80
 800443a:	d0f2      	beq.n	8004422 <SPI_EndRxTxTransaction+0x52>
 800443c:	e000      	b.n	8004440 <SPI_EndRxTxTransaction+0x70>
        break;
 800443e:	bf00      	nop
  }

  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3718      	adds	r7, #24
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	20000000 	.word	0x20000000
 8004450:	165e9f81 	.word	0x165e9f81

08004454 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e041      	b.n	80044ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d106      	bne.n	8004480 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f7fd fd9a 	bl	8001fb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2202      	movs	r2, #2
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	3304      	adds	r3, #4
 8004490:	4619      	mov	r1, r3
 8004492:	4610      	mov	r0, r2
 8004494:	f000 fa88 	bl	80049a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3708      	adds	r7, #8
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
	...

080044f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b01      	cmp	r3, #1
 8004506:	d001      	beq.n	800450c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e044      	b.n	8004596 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2202      	movs	r2, #2
 8004510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68da      	ldr	r2, [r3, #12]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f042 0201 	orr.w	r2, r2, #1
 8004522:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a1e      	ldr	r2, [pc, #120]	; (80045a4 <HAL_TIM_Base_Start_IT+0xb0>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d018      	beq.n	8004560 <HAL_TIM_Base_Start_IT+0x6c>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004536:	d013      	beq.n	8004560 <HAL_TIM_Base_Start_IT+0x6c>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a1a      	ldr	r2, [pc, #104]	; (80045a8 <HAL_TIM_Base_Start_IT+0xb4>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d00e      	beq.n	8004560 <HAL_TIM_Base_Start_IT+0x6c>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a19      	ldr	r2, [pc, #100]	; (80045ac <HAL_TIM_Base_Start_IT+0xb8>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d009      	beq.n	8004560 <HAL_TIM_Base_Start_IT+0x6c>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a17      	ldr	r2, [pc, #92]	; (80045b0 <HAL_TIM_Base_Start_IT+0xbc>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d004      	beq.n	8004560 <HAL_TIM_Base_Start_IT+0x6c>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a16      	ldr	r2, [pc, #88]	; (80045b4 <HAL_TIM_Base_Start_IT+0xc0>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d111      	bne.n	8004584 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f003 0307 	and.w	r3, r3, #7
 800456a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2b06      	cmp	r3, #6
 8004570:	d010      	beq.n	8004594 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f042 0201 	orr.w	r2, r2, #1
 8004580:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004582:	e007      	b.n	8004594 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f042 0201 	orr.w	r2, r2, #1
 8004592:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3714      	adds	r7, #20
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	40010000 	.word	0x40010000
 80045a8:	40000400 	.word	0x40000400
 80045ac:	40000800 	.word	0x40000800
 80045b0:	40000c00 	.word	0x40000c00
 80045b4:	40014000 	.word	0x40014000

080045b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d122      	bne.n	8004614 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d11b      	bne.n	8004614 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f06f 0202 	mvn.w	r2, #2
 80045e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2201      	movs	r2, #1
 80045ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	f003 0303 	and.w	r3, r3, #3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d003      	beq.n	8004602 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f9b5 	bl	800496a <HAL_TIM_IC_CaptureCallback>
 8004600:	e005      	b.n	800460e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f9a7 	bl	8004956 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 f9b8 	bl	800497e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	f003 0304 	and.w	r3, r3, #4
 800461e:	2b04      	cmp	r3, #4
 8004620:	d122      	bne.n	8004668 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	f003 0304 	and.w	r3, r3, #4
 800462c:	2b04      	cmp	r3, #4
 800462e:	d11b      	bne.n	8004668 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f06f 0204 	mvn.w	r2, #4
 8004638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2202      	movs	r2, #2
 800463e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800464a:	2b00      	cmp	r3, #0
 800464c:	d003      	beq.n	8004656 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f98b 	bl	800496a <HAL_TIM_IC_CaptureCallback>
 8004654:	e005      	b.n	8004662 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f97d 	bl	8004956 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 f98e 	bl	800497e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	f003 0308 	and.w	r3, r3, #8
 8004672:	2b08      	cmp	r3, #8
 8004674:	d122      	bne.n	80046bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	f003 0308 	and.w	r3, r3, #8
 8004680:	2b08      	cmp	r3, #8
 8004682:	d11b      	bne.n	80046bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f06f 0208 	mvn.w	r2, #8
 800468c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2204      	movs	r2, #4
 8004692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	f003 0303 	and.w	r3, r3, #3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d003      	beq.n	80046aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f961 	bl	800496a <HAL_TIM_IC_CaptureCallback>
 80046a8:	e005      	b.n	80046b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 f953 	bl	8004956 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 f964 	bl	800497e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	f003 0310 	and.w	r3, r3, #16
 80046c6:	2b10      	cmp	r3, #16
 80046c8:	d122      	bne.n	8004710 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f003 0310 	and.w	r3, r3, #16
 80046d4:	2b10      	cmp	r3, #16
 80046d6:	d11b      	bne.n	8004710 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f06f 0210 	mvn.w	r2, #16
 80046e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2208      	movs	r2, #8
 80046e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	69db      	ldr	r3, [r3, #28]
 80046ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d003      	beq.n	80046fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f937 	bl	800496a <HAL_TIM_IC_CaptureCallback>
 80046fc:	e005      	b.n	800470a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f929 	bl	8004956 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 f93a 	bl	800497e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b01      	cmp	r3, #1
 800471c:	d10e      	bne.n	800473c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	2b01      	cmp	r3, #1
 800472a:	d107      	bne.n	800473c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f06f 0201 	mvn.w	r2, #1
 8004734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f7fc fff6 	bl	8001728 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004746:	2b80      	cmp	r3, #128	; 0x80
 8004748:	d10e      	bne.n	8004768 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004754:	2b80      	cmp	r3, #128	; 0x80
 8004756:	d107      	bne.n	8004768 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 fab2 	bl	8004ccc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004772:	2b40      	cmp	r3, #64	; 0x40
 8004774:	d10e      	bne.n	8004794 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004780:	2b40      	cmp	r3, #64	; 0x40
 8004782:	d107      	bne.n	8004794 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800478c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f8ff 	bl	8004992 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	f003 0320 	and.w	r3, r3, #32
 800479e:	2b20      	cmp	r3, #32
 80047a0:	d10e      	bne.n	80047c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	f003 0320 	and.w	r3, r3, #32
 80047ac:	2b20      	cmp	r3, #32
 80047ae:	d107      	bne.n	80047c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f06f 0220 	mvn.w	r2, #32
 80047b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 fa7c 	bl	8004cb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047c0:	bf00      	nop
 80047c2:	3708      	adds	r7, #8
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047d2:	2300      	movs	r3, #0
 80047d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d101      	bne.n	80047e4 <HAL_TIM_ConfigClockSource+0x1c>
 80047e0:	2302      	movs	r3, #2
 80047e2:	e0b4      	b.n	800494e <HAL_TIM_ConfigClockSource+0x186>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2202      	movs	r2, #2
 80047f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004802:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800480a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68ba      	ldr	r2, [r7, #8]
 8004812:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800481c:	d03e      	beq.n	800489c <HAL_TIM_ConfigClockSource+0xd4>
 800481e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004822:	f200 8087 	bhi.w	8004934 <HAL_TIM_ConfigClockSource+0x16c>
 8004826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800482a:	f000 8086 	beq.w	800493a <HAL_TIM_ConfigClockSource+0x172>
 800482e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004832:	d87f      	bhi.n	8004934 <HAL_TIM_ConfigClockSource+0x16c>
 8004834:	2b70      	cmp	r3, #112	; 0x70
 8004836:	d01a      	beq.n	800486e <HAL_TIM_ConfigClockSource+0xa6>
 8004838:	2b70      	cmp	r3, #112	; 0x70
 800483a:	d87b      	bhi.n	8004934 <HAL_TIM_ConfigClockSource+0x16c>
 800483c:	2b60      	cmp	r3, #96	; 0x60
 800483e:	d050      	beq.n	80048e2 <HAL_TIM_ConfigClockSource+0x11a>
 8004840:	2b60      	cmp	r3, #96	; 0x60
 8004842:	d877      	bhi.n	8004934 <HAL_TIM_ConfigClockSource+0x16c>
 8004844:	2b50      	cmp	r3, #80	; 0x50
 8004846:	d03c      	beq.n	80048c2 <HAL_TIM_ConfigClockSource+0xfa>
 8004848:	2b50      	cmp	r3, #80	; 0x50
 800484a:	d873      	bhi.n	8004934 <HAL_TIM_ConfigClockSource+0x16c>
 800484c:	2b40      	cmp	r3, #64	; 0x40
 800484e:	d058      	beq.n	8004902 <HAL_TIM_ConfigClockSource+0x13a>
 8004850:	2b40      	cmp	r3, #64	; 0x40
 8004852:	d86f      	bhi.n	8004934 <HAL_TIM_ConfigClockSource+0x16c>
 8004854:	2b30      	cmp	r3, #48	; 0x30
 8004856:	d064      	beq.n	8004922 <HAL_TIM_ConfigClockSource+0x15a>
 8004858:	2b30      	cmp	r3, #48	; 0x30
 800485a:	d86b      	bhi.n	8004934 <HAL_TIM_ConfigClockSource+0x16c>
 800485c:	2b20      	cmp	r3, #32
 800485e:	d060      	beq.n	8004922 <HAL_TIM_ConfigClockSource+0x15a>
 8004860:	2b20      	cmp	r3, #32
 8004862:	d867      	bhi.n	8004934 <HAL_TIM_ConfigClockSource+0x16c>
 8004864:	2b00      	cmp	r3, #0
 8004866:	d05c      	beq.n	8004922 <HAL_TIM_ConfigClockSource+0x15a>
 8004868:	2b10      	cmp	r3, #16
 800486a:	d05a      	beq.n	8004922 <HAL_TIM_ConfigClockSource+0x15a>
 800486c:	e062      	b.n	8004934 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6818      	ldr	r0, [r3, #0]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	6899      	ldr	r1, [r3, #8]
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	685a      	ldr	r2, [r3, #4]
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	f000 f98d 	bl	8004b9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004890:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68ba      	ldr	r2, [r7, #8]
 8004898:	609a      	str	r2, [r3, #8]
      break;
 800489a:	e04f      	b.n	800493c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6818      	ldr	r0, [r3, #0]
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	6899      	ldr	r1, [r3, #8]
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	685a      	ldr	r2, [r3, #4]
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	f000 f976 	bl	8004b9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	689a      	ldr	r2, [r3, #8]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048be:	609a      	str	r2, [r3, #8]
      break;
 80048c0:	e03c      	b.n	800493c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6818      	ldr	r0, [r3, #0]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	6859      	ldr	r1, [r3, #4]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	461a      	mov	r2, r3
 80048d0:	f000 f8ea 	bl	8004aa8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2150      	movs	r1, #80	; 0x50
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 f943 	bl	8004b66 <TIM_ITRx_SetConfig>
      break;
 80048e0:	e02c      	b.n	800493c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6818      	ldr	r0, [r3, #0]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	6859      	ldr	r1, [r3, #4]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	461a      	mov	r2, r3
 80048f0:	f000 f909 	bl	8004b06 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2160      	movs	r1, #96	; 0x60
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 f933 	bl	8004b66 <TIM_ITRx_SetConfig>
      break;
 8004900:	e01c      	b.n	800493c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6818      	ldr	r0, [r3, #0]
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	6859      	ldr	r1, [r3, #4]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	461a      	mov	r2, r3
 8004910:	f000 f8ca 	bl	8004aa8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2140      	movs	r1, #64	; 0x40
 800491a:	4618      	mov	r0, r3
 800491c:	f000 f923 	bl	8004b66 <TIM_ITRx_SetConfig>
      break;
 8004920:	e00c      	b.n	800493c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4619      	mov	r1, r3
 800492c:	4610      	mov	r0, r2
 800492e:	f000 f91a 	bl	8004b66 <TIM_ITRx_SetConfig>
      break;
 8004932:	e003      	b.n	800493c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	73fb      	strb	r3, [r7, #15]
      break;
 8004938:	e000      	b.n	800493c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800493a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800494c:	7bfb      	ldrb	r3, [r7, #15]
}
 800494e:	4618      	mov	r0, r3
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004956:	b480      	push	{r7}
 8004958:	b083      	sub	sp, #12
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800495e:	bf00      	nop
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800496a:	b480      	push	{r7}
 800496c:	b083      	sub	sp, #12
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004972:	bf00      	nop
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800497e:	b480      	push	{r7}
 8004980:	b083      	sub	sp, #12
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004986:	bf00      	nop
 8004988:	370c      	adds	r7, #12
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr

08004992 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004992:	b480      	push	{r7}
 8004994:	b083      	sub	sp, #12
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800499a:	bf00      	nop
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
	...

080049a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a34      	ldr	r2, [pc, #208]	; (8004a8c <TIM_Base_SetConfig+0xe4>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d00f      	beq.n	80049e0 <TIM_Base_SetConfig+0x38>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049c6:	d00b      	beq.n	80049e0 <TIM_Base_SetConfig+0x38>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a31      	ldr	r2, [pc, #196]	; (8004a90 <TIM_Base_SetConfig+0xe8>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d007      	beq.n	80049e0 <TIM_Base_SetConfig+0x38>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a30      	ldr	r2, [pc, #192]	; (8004a94 <TIM_Base_SetConfig+0xec>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d003      	beq.n	80049e0 <TIM_Base_SetConfig+0x38>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a2f      	ldr	r2, [pc, #188]	; (8004a98 <TIM_Base_SetConfig+0xf0>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d108      	bne.n	80049f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a25      	ldr	r2, [pc, #148]	; (8004a8c <TIM_Base_SetConfig+0xe4>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d01b      	beq.n	8004a32 <TIM_Base_SetConfig+0x8a>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a00:	d017      	beq.n	8004a32 <TIM_Base_SetConfig+0x8a>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a22      	ldr	r2, [pc, #136]	; (8004a90 <TIM_Base_SetConfig+0xe8>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d013      	beq.n	8004a32 <TIM_Base_SetConfig+0x8a>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a21      	ldr	r2, [pc, #132]	; (8004a94 <TIM_Base_SetConfig+0xec>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d00f      	beq.n	8004a32 <TIM_Base_SetConfig+0x8a>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a20      	ldr	r2, [pc, #128]	; (8004a98 <TIM_Base_SetConfig+0xf0>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d00b      	beq.n	8004a32 <TIM_Base_SetConfig+0x8a>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a1f      	ldr	r2, [pc, #124]	; (8004a9c <TIM_Base_SetConfig+0xf4>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d007      	beq.n	8004a32 <TIM_Base_SetConfig+0x8a>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a1e      	ldr	r2, [pc, #120]	; (8004aa0 <TIM_Base_SetConfig+0xf8>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d003      	beq.n	8004a32 <TIM_Base_SetConfig+0x8a>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a1d      	ldr	r2, [pc, #116]	; (8004aa4 <TIM_Base_SetConfig+0xfc>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d108      	bne.n	8004a44 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	689a      	ldr	r2, [r3, #8]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a08      	ldr	r2, [pc, #32]	; (8004a8c <TIM_Base_SetConfig+0xe4>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d103      	bne.n	8004a78 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	691a      	ldr	r2, [r3, #16]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	615a      	str	r2, [r3, #20]
}
 8004a7e:	bf00      	nop
 8004a80:	3714      	adds	r7, #20
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	40010000 	.word	0x40010000
 8004a90:	40000400 	.word	0x40000400
 8004a94:	40000800 	.word	0x40000800
 8004a98:	40000c00 	.word	0x40000c00
 8004a9c:	40014000 	.word	0x40014000
 8004aa0:	40014400 	.word	0x40014400
 8004aa4:	40014800 	.word	0x40014800

08004aa8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b087      	sub	sp, #28
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	f023 0201 	bic.w	r2, r3, #1
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ad2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	011b      	lsls	r3, r3, #4
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	f023 030a 	bic.w	r3, r3, #10
 8004ae4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	621a      	str	r2, [r3, #32]
}
 8004afa:	bf00      	nop
 8004afc:	371c      	adds	r7, #28
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr

08004b06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b06:	b480      	push	{r7}
 8004b08:	b087      	sub	sp, #28
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	60f8      	str	r0, [r7, #12]
 8004b0e:	60b9      	str	r1, [r7, #8]
 8004b10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	f023 0210 	bic.w	r2, r3, #16
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	031b      	lsls	r3, r3, #12
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	011b      	lsls	r3, r3, #4
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	621a      	str	r2, [r3, #32]
}
 8004b5a:	bf00      	nop
 8004b5c:	371c      	adds	r7, #28
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b66:	b480      	push	{r7}
 8004b68:	b085      	sub	sp, #20
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
 8004b6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b7e:	683a      	ldr	r2, [r7, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	f043 0307 	orr.w	r3, r3, #7
 8004b88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	609a      	str	r2, [r3, #8]
}
 8004b90:	bf00      	nop
 8004b92:	3714      	adds	r7, #20
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b087      	sub	sp, #28
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
 8004ba8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	021a      	lsls	r2, r3, #8
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	431a      	orrs	r2, r3
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	609a      	str	r2, [r3, #8]
}
 8004bd0:	bf00      	nop
 8004bd2:	371c      	adds	r7, #28
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d101      	bne.n	8004bf4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	e050      	b.n	8004c96 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2202      	movs	r2, #2
 8004c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a1c      	ldr	r2, [pc, #112]	; (8004ca4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d018      	beq.n	8004c6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c40:	d013      	beq.n	8004c6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a18      	ldr	r2, [pc, #96]	; (8004ca8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d00e      	beq.n	8004c6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a16      	ldr	r2, [pc, #88]	; (8004cac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d009      	beq.n	8004c6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a15      	ldr	r2, [pc, #84]	; (8004cb0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d004      	beq.n	8004c6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a13      	ldr	r2, [pc, #76]	; (8004cb4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d10c      	bne.n	8004c84 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3714      	adds	r7, #20
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	40010000 	.word	0x40010000
 8004ca8:	40000400 	.word	0x40000400
 8004cac:	40000800 	.word	0x40000800
 8004cb0:	40000c00 	.word	0x40000c00
 8004cb4:	40014000 	.word	0x40014000

08004cb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <__errno>:
 8004ce0:	4b01      	ldr	r3, [pc, #4]	; (8004ce8 <__errno+0x8>)
 8004ce2:	6818      	ldr	r0, [r3, #0]
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	2000000c 	.word	0x2000000c

08004cec <__libc_init_array>:
 8004cec:	b570      	push	{r4, r5, r6, lr}
 8004cee:	4d0d      	ldr	r5, [pc, #52]	; (8004d24 <__libc_init_array+0x38>)
 8004cf0:	4c0d      	ldr	r4, [pc, #52]	; (8004d28 <__libc_init_array+0x3c>)
 8004cf2:	1b64      	subs	r4, r4, r5
 8004cf4:	10a4      	asrs	r4, r4, #2
 8004cf6:	2600      	movs	r6, #0
 8004cf8:	42a6      	cmp	r6, r4
 8004cfa:	d109      	bne.n	8004d10 <__libc_init_array+0x24>
 8004cfc:	4d0b      	ldr	r5, [pc, #44]	; (8004d2c <__libc_init_array+0x40>)
 8004cfe:	4c0c      	ldr	r4, [pc, #48]	; (8004d30 <__libc_init_array+0x44>)
 8004d00:	f003 f832 	bl	8007d68 <_init>
 8004d04:	1b64      	subs	r4, r4, r5
 8004d06:	10a4      	asrs	r4, r4, #2
 8004d08:	2600      	movs	r6, #0
 8004d0a:	42a6      	cmp	r6, r4
 8004d0c:	d105      	bne.n	8004d1a <__libc_init_array+0x2e>
 8004d0e:	bd70      	pop	{r4, r5, r6, pc}
 8004d10:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d14:	4798      	blx	r3
 8004d16:	3601      	adds	r6, #1
 8004d18:	e7ee      	b.n	8004cf8 <__libc_init_array+0xc>
 8004d1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d1e:	4798      	blx	r3
 8004d20:	3601      	adds	r6, #1
 8004d22:	e7f2      	b.n	8004d0a <__libc_init_array+0x1e>
 8004d24:	08008f2c 	.word	0x08008f2c
 8004d28:	08008f2c 	.word	0x08008f2c
 8004d2c:	08008f2c 	.word	0x08008f2c
 8004d30:	08008f30 	.word	0x08008f30

08004d34 <memset>:
 8004d34:	4402      	add	r2, r0
 8004d36:	4603      	mov	r3, r0
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d100      	bne.n	8004d3e <memset+0xa>
 8004d3c:	4770      	bx	lr
 8004d3e:	f803 1b01 	strb.w	r1, [r3], #1
 8004d42:	e7f9      	b.n	8004d38 <memset+0x4>

08004d44 <__cvt>:
 8004d44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d48:	ec55 4b10 	vmov	r4, r5, d0
 8004d4c:	2d00      	cmp	r5, #0
 8004d4e:	460e      	mov	r6, r1
 8004d50:	4619      	mov	r1, r3
 8004d52:	462b      	mov	r3, r5
 8004d54:	bfbb      	ittet	lt
 8004d56:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004d5a:	461d      	movlt	r5, r3
 8004d5c:	2300      	movge	r3, #0
 8004d5e:	232d      	movlt	r3, #45	; 0x2d
 8004d60:	700b      	strb	r3, [r1, #0]
 8004d62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d64:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004d68:	4691      	mov	r9, r2
 8004d6a:	f023 0820 	bic.w	r8, r3, #32
 8004d6e:	bfbc      	itt	lt
 8004d70:	4622      	movlt	r2, r4
 8004d72:	4614      	movlt	r4, r2
 8004d74:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d78:	d005      	beq.n	8004d86 <__cvt+0x42>
 8004d7a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004d7e:	d100      	bne.n	8004d82 <__cvt+0x3e>
 8004d80:	3601      	adds	r6, #1
 8004d82:	2102      	movs	r1, #2
 8004d84:	e000      	b.n	8004d88 <__cvt+0x44>
 8004d86:	2103      	movs	r1, #3
 8004d88:	ab03      	add	r3, sp, #12
 8004d8a:	9301      	str	r3, [sp, #4]
 8004d8c:	ab02      	add	r3, sp, #8
 8004d8e:	9300      	str	r3, [sp, #0]
 8004d90:	ec45 4b10 	vmov	d0, r4, r5
 8004d94:	4653      	mov	r3, sl
 8004d96:	4632      	mov	r2, r6
 8004d98:	f000 fcea 	bl	8005770 <_dtoa_r>
 8004d9c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004da0:	4607      	mov	r7, r0
 8004da2:	d102      	bne.n	8004daa <__cvt+0x66>
 8004da4:	f019 0f01 	tst.w	r9, #1
 8004da8:	d022      	beq.n	8004df0 <__cvt+0xac>
 8004daa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004dae:	eb07 0906 	add.w	r9, r7, r6
 8004db2:	d110      	bne.n	8004dd6 <__cvt+0x92>
 8004db4:	783b      	ldrb	r3, [r7, #0]
 8004db6:	2b30      	cmp	r3, #48	; 0x30
 8004db8:	d10a      	bne.n	8004dd0 <__cvt+0x8c>
 8004dba:	2200      	movs	r2, #0
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	4620      	mov	r0, r4
 8004dc0:	4629      	mov	r1, r5
 8004dc2:	f7fb fe89 	bl	8000ad8 <__aeabi_dcmpeq>
 8004dc6:	b918      	cbnz	r0, 8004dd0 <__cvt+0x8c>
 8004dc8:	f1c6 0601 	rsb	r6, r6, #1
 8004dcc:	f8ca 6000 	str.w	r6, [sl]
 8004dd0:	f8da 3000 	ldr.w	r3, [sl]
 8004dd4:	4499      	add	r9, r3
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	2300      	movs	r3, #0
 8004dda:	4620      	mov	r0, r4
 8004ddc:	4629      	mov	r1, r5
 8004dde:	f7fb fe7b 	bl	8000ad8 <__aeabi_dcmpeq>
 8004de2:	b108      	cbz	r0, 8004de8 <__cvt+0xa4>
 8004de4:	f8cd 900c 	str.w	r9, [sp, #12]
 8004de8:	2230      	movs	r2, #48	; 0x30
 8004dea:	9b03      	ldr	r3, [sp, #12]
 8004dec:	454b      	cmp	r3, r9
 8004dee:	d307      	bcc.n	8004e00 <__cvt+0xbc>
 8004df0:	9b03      	ldr	r3, [sp, #12]
 8004df2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004df4:	1bdb      	subs	r3, r3, r7
 8004df6:	4638      	mov	r0, r7
 8004df8:	6013      	str	r3, [r2, #0]
 8004dfa:	b004      	add	sp, #16
 8004dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e00:	1c59      	adds	r1, r3, #1
 8004e02:	9103      	str	r1, [sp, #12]
 8004e04:	701a      	strb	r2, [r3, #0]
 8004e06:	e7f0      	b.n	8004dea <__cvt+0xa6>

08004e08 <__exponent>:
 8004e08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2900      	cmp	r1, #0
 8004e0e:	bfb8      	it	lt
 8004e10:	4249      	neglt	r1, r1
 8004e12:	f803 2b02 	strb.w	r2, [r3], #2
 8004e16:	bfb4      	ite	lt
 8004e18:	222d      	movlt	r2, #45	; 0x2d
 8004e1a:	222b      	movge	r2, #43	; 0x2b
 8004e1c:	2909      	cmp	r1, #9
 8004e1e:	7042      	strb	r2, [r0, #1]
 8004e20:	dd2a      	ble.n	8004e78 <__exponent+0x70>
 8004e22:	f10d 0407 	add.w	r4, sp, #7
 8004e26:	46a4      	mov	ip, r4
 8004e28:	270a      	movs	r7, #10
 8004e2a:	46a6      	mov	lr, r4
 8004e2c:	460a      	mov	r2, r1
 8004e2e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004e32:	fb07 1516 	mls	r5, r7, r6, r1
 8004e36:	3530      	adds	r5, #48	; 0x30
 8004e38:	2a63      	cmp	r2, #99	; 0x63
 8004e3a:	f104 34ff 	add.w	r4, r4, #4294967295
 8004e3e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004e42:	4631      	mov	r1, r6
 8004e44:	dcf1      	bgt.n	8004e2a <__exponent+0x22>
 8004e46:	3130      	adds	r1, #48	; 0x30
 8004e48:	f1ae 0502 	sub.w	r5, lr, #2
 8004e4c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004e50:	1c44      	adds	r4, r0, #1
 8004e52:	4629      	mov	r1, r5
 8004e54:	4561      	cmp	r1, ip
 8004e56:	d30a      	bcc.n	8004e6e <__exponent+0x66>
 8004e58:	f10d 0209 	add.w	r2, sp, #9
 8004e5c:	eba2 020e 	sub.w	r2, r2, lr
 8004e60:	4565      	cmp	r5, ip
 8004e62:	bf88      	it	hi
 8004e64:	2200      	movhi	r2, #0
 8004e66:	4413      	add	r3, r2
 8004e68:	1a18      	subs	r0, r3, r0
 8004e6a:	b003      	add	sp, #12
 8004e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e72:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004e76:	e7ed      	b.n	8004e54 <__exponent+0x4c>
 8004e78:	2330      	movs	r3, #48	; 0x30
 8004e7a:	3130      	adds	r1, #48	; 0x30
 8004e7c:	7083      	strb	r3, [r0, #2]
 8004e7e:	70c1      	strb	r1, [r0, #3]
 8004e80:	1d03      	adds	r3, r0, #4
 8004e82:	e7f1      	b.n	8004e68 <__exponent+0x60>

08004e84 <_printf_float>:
 8004e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e88:	ed2d 8b02 	vpush	{d8}
 8004e8c:	b08d      	sub	sp, #52	; 0x34
 8004e8e:	460c      	mov	r4, r1
 8004e90:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004e94:	4616      	mov	r6, r2
 8004e96:	461f      	mov	r7, r3
 8004e98:	4605      	mov	r5, r0
 8004e9a:	f001 fa55 	bl	8006348 <_localeconv_r>
 8004e9e:	f8d0 a000 	ldr.w	sl, [r0]
 8004ea2:	4650      	mov	r0, sl
 8004ea4:	f7fb f99c 	bl	80001e0 <strlen>
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	930a      	str	r3, [sp, #40]	; 0x28
 8004eac:	6823      	ldr	r3, [r4, #0]
 8004eae:	9305      	str	r3, [sp, #20]
 8004eb0:	f8d8 3000 	ldr.w	r3, [r8]
 8004eb4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004eb8:	3307      	adds	r3, #7
 8004eba:	f023 0307 	bic.w	r3, r3, #7
 8004ebe:	f103 0208 	add.w	r2, r3, #8
 8004ec2:	f8c8 2000 	str.w	r2, [r8]
 8004ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004ece:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004ed2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004ed6:	9307      	str	r3, [sp, #28]
 8004ed8:	f8cd 8018 	str.w	r8, [sp, #24]
 8004edc:	ee08 0a10 	vmov	s16, r0
 8004ee0:	4b9f      	ldr	r3, [pc, #636]	; (8005160 <_printf_float+0x2dc>)
 8004ee2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8004eea:	f7fb fe27 	bl	8000b3c <__aeabi_dcmpun>
 8004eee:	bb88      	cbnz	r0, 8004f54 <_printf_float+0xd0>
 8004ef0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ef4:	4b9a      	ldr	r3, [pc, #616]	; (8005160 <_printf_float+0x2dc>)
 8004ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8004efa:	f7fb fe01 	bl	8000b00 <__aeabi_dcmple>
 8004efe:	bb48      	cbnz	r0, 8004f54 <_printf_float+0xd0>
 8004f00:	2200      	movs	r2, #0
 8004f02:	2300      	movs	r3, #0
 8004f04:	4640      	mov	r0, r8
 8004f06:	4649      	mov	r1, r9
 8004f08:	f7fb fdf0 	bl	8000aec <__aeabi_dcmplt>
 8004f0c:	b110      	cbz	r0, 8004f14 <_printf_float+0x90>
 8004f0e:	232d      	movs	r3, #45	; 0x2d
 8004f10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f14:	4b93      	ldr	r3, [pc, #588]	; (8005164 <_printf_float+0x2e0>)
 8004f16:	4894      	ldr	r0, [pc, #592]	; (8005168 <_printf_float+0x2e4>)
 8004f18:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004f1c:	bf94      	ite	ls
 8004f1e:	4698      	movls	r8, r3
 8004f20:	4680      	movhi	r8, r0
 8004f22:	2303      	movs	r3, #3
 8004f24:	6123      	str	r3, [r4, #16]
 8004f26:	9b05      	ldr	r3, [sp, #20]
 8004f28:	f023 0204 	bic.w	r2, r3, #4
 8004f2c:	6022      	str	r2, [r4, #0]
 8004f2e:	f04f 0900 	mov.w	r9, #0
 8004f32:	9700      	str	r7, [sp, #0]
 8004f34:	4633      	mov	r3, r6
 8004f36:	aa0b      	add	r2, sp, #44	; 0x2c
 8004f38:	4621      	mov	r1, r4
 8004f3a:	4628      	mov	r0, r5
 8004f3c:	f000 f9d8 	bl	80052f0 <_printf_common>
 8004f40:	3001      	adds	r0, #1
 8004f42:	f040 8090 	bne.w	8005066 <_printf_float+0x1e2>
 8004f46:	f04f 30ff 	mov.w	r0, #4294967295
 8004f4a:	b00d      	add	sp, #52	; 0x34
 8004f4c:	ecbd 8b02 	vpop	{d8}
 8004f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f54:	4642      	mov	r2, r8
 8004f56:	464b      	mov	r3, r9
 8004f58:	4640      	mov	r0, r8
 8004f5a:	4649      	mov	r1, r9
 8004f5c:	f7fb fdee 	bl	8000b3c <__aeabi_dcmpun>
 8004f60:	b140      	cbz	r0, 8004f74 <_printf_float+0xf0>
 8004f62:	464b      	mov	r3, r9
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	bfbc      	itt	lt
 8004f68:	232d      	movlt	r3, #45	; 0x2d
 8004f6a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004f6e:	487f      	ldr	r0, [pc, #508]	; (800516c <_printf_float+0x2e8>)
 8004f70:	4b7f      	ldr	r3, [pc, #508]	; (8005170 <_printf_float+0x2ec>)
 8004f72:	e7d1      	b.n	8004f18 <_printf_float+0x94>
 8004f74:	6863      	ldr	r3, [r4, #4]
 8004f76:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004f7a:	9206      	str	r2, [sp, #24]
 8004f7c:	1c5a      	adds	r2, r3, #1
 8004f7e:	d13f      	bne.n	8005000 <_printf_float+0x17c>
 8004f80:	2306      	movs	r3, #6
 8004f82:	6063      	str	r3, [r4, #4]
 8004f84:	9b05      	ldr	r3, [sp, #20]
 8004f86:	6861      	ldr	r1, [r4, #4]
 8004f88:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	9303      	str	r3, [sp, #12]
 8004f90:	ab0a      	add	r3, sp, #40	; 0x28
 8004f92:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004f96:	ab09      	add	r3, sp, #36	; 0x24
 8004f98:	ec49 8b10 	vmov	d0, r8, r9
 8004f9c:	9300      	str	r3, [sp, #0]
 8004f9e:	6022      	str	r2, [r4, #0]
 8004fa0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004fa4:	4628      	mov	r0, r5
 8004fa6:	f7ff fecd 	bl	8004d44 <__cvt>
 8004faa:	9b06      	ldr	r3, [sp, #24]
 8004fac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004fae:	2b47      	cmp	r3, #71	; 0x47
 8004fb0:	4680      	mov	r8, r0
 8004fb2:	d108      	bne.n	8004fc6 <_printf_float+0x142>
 8004fb4:	1cc8      	adds	r0, r1, #3
 8004fb6:	db02      	blt.n	8004fbe <_printf_float+0x13a>
 8004fb8:	6863      	ldr	r3, [r4, #4]
 8004fba:	4299      	cmp	r1, r3
 8004fbc:	dd41      	ble.n	8005042 <_printf_float+0x1be>
 8004fbe:	f1ab 0b02 	sub.w	fp, fp, #2
 8004fc2:	fa5f fb8b 	uxtb.w	fp, fp
 8004fc6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004fca:	d820      	bhi.n	800500e <_printf_float+0x18a>
 8004fcc:	3901      	subs	r1, #1
 8004fce:	465a      	mov	r2, fp
 8004fd0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004fd4:	9109      	str	r1, [sp, #36]	; 0x24
 8004fd6:	f7ff ff17 	bl	8004e08 <__exponent>
 8004fda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004fdc:	1813      	adds	r3, r2, r0
 8004fde:	2a01      	cmp	r2, #1
 8004fe0:	4681      	mov	r9, r0
 8004fe2:	6123      	str	r3, [r4, #16]
 8004fe4:	dc02      	bgt.n	8004fec <_printf_float+0x168>
 8004fe6:	6822      	ldr	r2, [r4, #0]
 8004fe8:	07d2      	lsls	r2, r2, #31
 8004fea:	d501      	bpl.n	8004ff0 <_printf_float+0x16c>
 8004fec:	3301      	adds	r3, #1
 8004fee:	6123      	str	r3, [r4, #16]
 8004ff0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d09c      	beq.n	8004f32 <_printf_float+0xae>
 8004ff8:	232d      	movs	r3, #45	; 0x2d
 8004ffa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ffe:	e798      	b.n	8004f32 <_printf_float+0xae>
 8005000:	9a06      	ldr	r2, [sp, #24]
 8005002:	2a47      	cmp	r2, #71	; 0x47
 8005004:	d1be      	bne.n	8004f84 <_printf_float+0x100>
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1bc      	bne.n	8004f84 <_printf_float+0x100>
 800500a:	2301      	movs	r3, #1
 800500c:	e7b9      	b.n	8004f82 <_printf_float+0xfe>
 800500e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005012:	d118      	bne.n	8005046 <_printf_float+0x1c2>
 8005014:	2900      	cmp	r1, #0
 8005016:	6863      	ldr	r3, [r4, #4]
 8005018:	dd0b      	ble.n	8005032 <_printf_float+0x1ae>
 800501a:	6121      	str	r1, [r4, #16]
 800501c:	b913      	cbnz	r3, 8005024 <_printf_float+0x1a0>
 800501e:	6822      	ldr	r2, [r4, #0]
 8005020:	07d0      	lsls	r0, r2, #31
 8005022:	d502      	bpl.n	800502a <_printf_float+0x1a6>
 8005024:	3301      	adds	r3, #1
 8005026:	440b      	add	r3, r1
 8005028:	6123      	str	r3, [r4, #16]
 800502a:	65a1      	str	r1, [r4, #88]	; 0x58
 800502c:	f04f 0900 	mov.w	r9, #0
 8005030:	e7de      	b.n	8004ff0 <_printf_float+0x16c>
 8005032:	b913      	cbnz	r3, 800503a <_printf_float+0x1b6>
 8005034:	6822      	ldr	r2, [r4, #0]
 8005036:	07d2      	lsls	r2, r2, #31
 8005038:	d501      	bpl.n	800503e <_printf_float+0x1ba>
 800503a:	3302      	adds	r3, #2
 800503c:	e7f4      	b.n	8005028 <_printf_float+0x1a4>
 800503e:	2301      	movs	r3, #1
 8005040:	e7f2      	b.n	8005028 <_printf_float+0x1a4>
 8005042:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005046:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005048:	4299      	cmp	r1, r3
 800504a:	db05      	blt.n	8005058 <_printf_float+0x1d4>
 800504c:	6823      	ldr	r3, [r4, #0]
 800504e:	6121      	str	r1, [r4, #16]
 8005050:	07d8      	lsls	r0, r3, #31
 8005052:	d5ea      	bpl.n	800502a <_printf_float+0x1a6>
 8005054:	1c4b      	adds	r3, r1, #1
 8005056:	e7e7      	b.n	8005028 <_printf_float+0x1a4>
 8005058:	2900      	cmp	r1, #0
 800505a:	bfd4      	ite	le
 800505c:	f1c1 0202 	rsble	r2, r1, #2
 8005060:	2201      	movgt	r2, #1
 8005062:	4413      	add	r3, r2
 8005064:	e7e0      	b.n	8005028 <_printf_float+0x1a4>
 8005066:	6823      	ldr	r3, [r4, #0]
 8005068:	055a      	lsls	r2, r3, #21
 800506a:	d407      	bmi.n	800507c <_printf_float+0x1f8>
 800506c:	6923      	ldr	r3, [r4, #16]
 800506e:	4642      	mov	r2, r8
 8005070:	4631      	mov	r1, r6
 8005072:	4628      	mov	r0, r5
 8005074:	47b8      	blx	r7
 8005076:	3001      	adds	r0, #1
 8005078:	d12c      	bne.n	80050d4 <_printf_float+0x250>
 800507a:	e764      	b.n	8004f46 <_printf_float+0xc2>
 800507c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005080:	f240 80e0 	bls.w	8005244 <_printf_float+0x3c0>
 8005084:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005088:	2200      	movs	r2, #0
 800508a:	2300      	movs	r3, #0
 800508c:	f7fb fd24 	bl	8000ad8 <__aeabi_dcmpeq>
 8005090:	2800      	cmp	r0, #0
 8005092:	d034      	beq.n	80050fe <_printf_float+0x27a>
 8005094:	4a37      	ldr	r2, [pc, #220]	; (8005174 <_printf_float+0x2f0>)
 8005096:	2301      	movs	r3, #1
 8005098:	4631      	mov	r1, r6
 800509a:	4628      	mov	r0, r5
 800509c:	47b8      	blx	r7
 800509e:	3001      	adds	r0, #1
 80050a0:	f43f af51 	beq.w	8004f46 <_printf_float+0xc2>
 80050a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050a8:	429a      	cmp	r2, r3
 80050aa:	db02      	blt.n	80050b2 <_printf_float+0x22e>
 80050ac:	6823      	ldr	r3, [r4, #0]
 80050ae:	07d8      	lsls	r0, r3, #31
 80050b0:	d510      	bpl.n	80050d4 <_printf_float+0x250>
 80050b2:	ee18 3a10 	vmov	r3, s16
 80050b6:	4652      	mov	r2, sl
 80050b8:	4631      	mov	r1, r6
 80050ba:	4628      	mov	r0, r5
 80050bc:	47b8      	blx	r7
 80050be:	3001      	adds	r0, #1
 80050c0:	f43f af41 	beq.w	8004f46 <_printf_float+0xc2>
 80050c4:	f04f 0800 	mov.w	r8, #0
 80050c8:	f104 091a 	add.w	r9, r4, #26
 80050cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050ce:	3b01      	subs	r3, #1
 80050d0:	4543      	cmp	r3, r8
 80050d2:	dc09      	bgt.n	80050e8 <_printf_float+0x264>
 80050d4:	6823      	ldr	r3, [r4, #0]
 80050d6:	079b      	lsls	r3, r3, #30
 80050d8:	f100 8105 	bmi.w	80052e6 <_printf_float+0x462>
 80050dc:	68e0      	ldr	r0, [r4, #12]
 80050de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050e0:	4298      	cmp	r0, r3
 80050e2:	bfb8      	it	lt
 80050e4:	4618      	movlt	r0, r3
 80050e6:	e730      	b.n	8004f4a <_printf_float+0xc6>
 80050e8:	2301      	movs	r3, #1
 80050ea:	464a      	mov	r2, r9
 80050ec:	4631      	mov	r1, r6
 80050ee:	4628      	mov	r0, r5
 80050f0:	47b8      	blx	r7
 80050f2:	3001      	adds	r0, #1
 80050f4:	f43f af27 	beq.w	8004f46 <_printf_float+0xc2>
 80050f8:	f108 0801 	add.w	r8, r8, #1
 80050fc:	e7e6      	b.n	80050cc <_printf_float+0x248>
 80050fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005100:	2b00      	cmp	r3, #0
 8005102:	dc39      	bgt.n	8005178 <_printf_float+0x2f4>
 8005104:	4a1b      	ldr	r2, [pc, #108]	; (8005174 <_printf_float+0x2f0>)
 8005106:	2301      	movs	r3, #1
 8005108:	4631      	mov	r1, r6
 800510a:	4628      	mov	r0, r5
 800510c:	47b8      	blx	r7
 800510e:	3001      	adds	r0, #1
 8005110:	f43f af19 	beq.w	8004f46 <_printf_float+0xc2>
 8005114:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005118:	4313      	orrs	r3, r2
 800511a:	d102      	bne.n	8005122 <_printf_float+0x29e>
 800511c:	6823      	ldr	r3, [r4, #0]
 800511e:	07d9      	lsls	r1, r3, #31
 8005120:	d5d8      	bpl.n	80050d4 <_printf_float+0x250>
 8005122:	ee18 3a10 	vmov	r3, s16
 8005126:	4652      	mov	r2, sl
 8005128:	4631      	mov	r1, r6
 800512a:	4628      	mov	r0, r5
 800512c:	47b8      	blx	r7
 800512e:	3001      	adds	r0, #1
 8005130:	f43f af09 	beq.w	8004f46 <_printf_float+0xc2>
 8005134:	f04f 0900 	mov.w	r9, #0
 8005138:	f104 0a1a 	add.w	sl, r4, #26
 800513c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800513e:	425b      	negs	r3, r3
 8005140:	454b      	cmp	r3, r9
 8005142:	dc01      	bgt.n	8005148 <_printf_float+0x2c4>
 8005144:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005146:	e792      	b.n	800506e <_printf_float+0x1ea>
 8005148:	2301      	movs	r3, #1
 800514a:	4652      	mov	r2, sl
 800514c:	4631      	mov	r1, r6
 800514e:	4628      	mov	r0, r5
 8005150:	47b8      	blx	r7
 8005152:	3001      	adds	r0, #1
 8005154:	f43f aef7 	beq.w	8004f46 <_printf_float+0xc2>
 8005158:	f109 0901 	add.w	r9, r9, #1
 800515c:	e7ee      	b.n	800513c <_printf_float+0x2b8>
 800515e:	bf00      	nop
 8005160:	7fefffff 	.word	0x7fefffff
 8005164:	08008b0c 	.word	0x08008b0c
 8005168:	08008b10 	.word	0x08008b10
 800516c:	08008b18 	.word	0x08008b18
 8005170:	08008b14 	.word	0x08008b14
 8005174:	08008b1c 	.word	0x08008b1c
 8005178:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800517a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800517c:	429a      	cmp	r2, r3
 800517e:	bfa8      	it	ge
 8005180:	461a      	movge	r2, r3
 8005182:	2a00      	cmp	r2, #0
 8005184:	4691      	mov	r9, r2
 8005186:	dc37      	bgt.n	80051f8 <_printf_float+0x374>
 8005188:	f04f 0b00 	mov.w	fp, #0
 800518c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005190:	f104 021a 	add.w	r2, r4, #26
 8005194:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005196:	9305      	str	r3, [sp, #20]
 8005198:	eba3 0309 	sub.w	r3, r3, r9
 800519c:	455b      	cmp	r3, fp
 800519e:	dc33      	bgt.n	8005208 <_printf_float+0x384>
 80051a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051a4:	429a      	cmp	r2, r3
 80051a6:	db3b      	blt.n	8005220 <_printf_float+0x39c>
 80051a8:	6823      	ldr	r3, [r4, #0]
 80051aa:	07da      	lsls	r2, r3, #31
 80051ac:	d438      	bmi.n	8005220 <_printf_float+0x39c>
 80051ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80051b0:	9b05      	ldr	r3, [sp, #20]
 80051b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	eba2 0901 	sub.w	r9, r2, r1
 80051ba:	4599      	cmp	r9, r3
 80051bc:	bfa8      	it	ge
 80051be:	4699      	movge	r9, r3
 80051c0:	f1b9 0f00 	cmp.w	r9, #0
 80051c4:	dc35      	bgt.n	8005232 <_printf_float+0x3ae>
 80051c6:	f04f 0800 	mov.w	r8, #0
 80051ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051ce:	f104 0a1a 	add.w	sl, r4, #26
 80051d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051d6:	1a9b      	subs	r3, r3, r2
 80051d8:	eba3 0309 	sub.w	r3, r3, r9
 80051dc:	4543      	cmp	r3, r8
 80051de:	f77f af79 	ble.w	80050d4 <_printf_float+0x250>
 80051e2:	2301      	movs	r3, #1
 80051e4:	4652      	mov	r2, sl
 80051e6:	4631      	mov	r1, r6
 80051e8:	4628      	mov	r0, r5
 80051ea:	47b8      	blx	r7
 80051ec:	3001      	adds	r0, #1
 80051ee:	f43f aeaa 	beq.w	8004f46 <_printf_float+0xc2>
 80051f2:	f108 0801 	add.w	r8, r8, #1
 80051f6:	e7ec      	b.n	80051d2 <_printf_float+0x34e>
 80051f8:	4613      	mov	r3, r2
 80051fa:	4631      	mov	r1, r6
 80051fc:	4642      	mov	r2, r8
 80051fe:	4628      	mov	r0, r5
 8005200:	47b8      	blx	r7
 8005202:	3001      	adds	r0, #1
 8005204:	d1c0      	bne.n	8005188 <_printf_float+0x304>
 8005206:	e69e      	b.n	8004f46 <_printf_float+0xc2>
 8005208:	2301      	movs	r3, #1
 800520a:	4631      	mov	r1, r6
 800520c:	4628      	mov	r0, r5
 800520e:	9205      	str	r2, [sp, #20]
 8005210:	47b8      	blx	r7
 8005212:	3001      	adds	r0, #1
 8005214:	f43f ae97 	beq.w	8004f46 <_printf_float+0xc2>
 8005218:	9a05      	ldr	r2, [sp, #20]
 800521a:	f10b 0b01 	add.w	fp, fp, #1
 800521e:	e7b9      	b.n	8005194 <_printf_float+0x310>
 8005220:	ee18 3a10 	vmov	r3, s16
 8005224:	4652      	mov	r2, sl
 8005226:	4631      	mov	r1, r6
 8005228:	4628      	mov	r0, r5
 800522a:	47b8      	blx	r7
 800522c:	3001      	adds	r0, #1
 800522e:	d1be      	bne.n	80051ae <_printf_float+0x32a>
 8005230:	e689      	b.n	8004f46 <_printf_float+0xc2>
 8005232:	9a05      	ldr	r2, [sp, #20]
 8005234:	464b      	mov	r3, r9
 8005236:	4442      	add	r2, r8
 8005238:	4631      	mov	r1, r6
 800523a:	4628      	mov	r0, r5
 800523c:	47b8      	blx	r7
 800523e:	3001      	adds	r0, #1
 8005240:	d1c1      	bne.n	80051c6 <_printf_float+0x342>
 8005242:	e680      	b.n	8004f46 <_printf_float+0xc2>
 8005244:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005246:	2a01      	cmp	r2, #1
 8005248:	dc01      	bgt.n	800524e <_printf_float+0x3ca>
 800524a:	07db      	lsls	r3, r3, #31
 800524c:	d538      	bpl.n	80052c0 <_printf_float+0x43c>
 800524e:	2301      	movs	r3, #1
 8005250:	4642      	mov	r2, r8
 8005252:	4631      	mov	r1, r6
 8005254:	4628      	mov	r0, r5
 8005256:	47b8      	blx	r7
 8005258:	3001      	adds	r0, #1
 800525a:	f43f ae74 	beq.w	8004f46 <_printf_float+0xc2>
 800525e:	ee18 3a10 	vmov	r3, s16
 8005262:	4652      	mov	r2, sl
 8005264:	4631      	mov	r1, r6
 8005266:	4628      	mov	r0, r5
 8005268:	47b8      	blx	r7
 800526a:	3001      	adds	r0, #1
 800526c:	f43f ae6b 	beq.w	8004f46 <_printf_float+0xc2>
 8005270:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005274:	2200      	movs	r2, #0
 8005276:	2300      	movs	r3, #0
 8005278:	f7fb fc2e 	bl	8000ad8 <__aeabi_dcmpeq>
 800527c:	b9d8      	cbnz	r0, 80052b6 <_printf_float+0x432>
 800527e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005280:	f108 0201 	add.w	r2, r8, #1
 8005284:	3b01      	subs	r3, #1
 8005286:	4631      	mov	r1, r6
 8005288:	4628      	mov	r0, r5
 800528a:	47b8      	blx	r7
 800528c:	3001      	adds	r0, #1
 800528e:	d10e      	bne.n	80052ae <_printf_float+0x42a>
 8005290:	e659      	b.n	8004f46 <_printf_float+0xc2>
 8005292:	2301      	movs	r3, #1
 8005294:	4652      	mov	r2, sl
 8005296:	4631      	mov	r1, r6
 8005298:	4628      	mov	r0, r5
 800529a:	47b8      	blx	r7
 800529c:	3001      	adds	r0, #1
 800529e:	f43f ae52 	beq.w	8004f46 <_printf_float+0xc2>
 80052a2:	f108 0801 	add.w	r8, r8, #1
 80052a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052a8:	3b01      	subs	r3, #1
 80052aa:	4543      	cmp	r3, r8
 80052ac:	dcf1      	bgt.n	8005292 <_printf_float+0x40e>
 80052ae:	464b      	mov	r3, r9
 80052b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80052b4:	e6dc      	b.n	8005070 <_printf_float+0x1ec>
 80052b6:	f04f 0800 	mov.w	r8, #0
 80052ba:	f104 0a1a 	add.w	sl, r4, #26
 80052be:	e7f2      	b.n	80052a6 <_printf_float+0x422>
 80052c0:	2301      	movs	r3, #1
 80052c2:	4642      	mov	r2, r8
 80052c4:	e7df      	b.n	8005286 <_printf_float+0x402>
 80052c6:	2301      	movs	r3, #1
 80052c8:	464a      	mov	r2, r9
 80052ca:	4631      	mov	r1, r6
 80052cc:	4628      	mov	r0, r5
 80052ce:	47b8      	blx	r7
 80052d0:	3001      	adds	r0, #1
 80052d2:	f43f ae38 	beq.w	8004f46 <_printf_float+0xc2>
 80052d6:	f108 0801 	add.w	r8, r8, #1
 80052da:	68e3      	ldr	r3, [r4, #12]
 80052dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80052de:	1a5b      	subs	r3, r3, r1
 80052e0:	4543      	cmp	r3, r8
 80052e2:	dcf0      	bgt.n	80052c6 <_printf_float+0x442>
 80052e4:	e6fa      	b.n	80050dc <_printf_float+0x258>
 80052e6:	f04f 0800 	mov.w	r8, #0
 80052ea:	f104 0919 	add.w	r9, r4, #25
 80052ee:	e7f4      	b.n	80052da <_printf_float+0x456>

080052f0 <_printf_common>:
 80052f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052f4:	4616      	mov	r6, r2
 80052f6:	4699      	mov	r9, r3
 80052f8:	688a      	ldr	r2, [r1, #8]
 80052fa:	690b      	ldr	r3, [r1, #16]
 80052fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005300:	4293      	cmp	r3, r2
 8005302:	bfb8      	it	lt
 8005304:	4613      	movlt	r3, r2
 8005306:	6033      	str	r3, [r6, #0]
 8005308:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800530c:	4607      	mov	r7, r0
 800530e:	460c      	mov	r4, r1
 8005310:	b10a      	cbz	r2, 8005316 <_printf_common+0x26>
 8005312:	3301      	adds	r3, #1
 8005314:	6033      	str	r3, [r6, #0]
 8005316:	6823      	ldr	r3, [r4, #0]
 8005318:	0699      	lsls	r1, r3, #26
 800531a:	bf42      	ittt	mi
 800531c:	6833      	ldrmi	r3, [r6, #0]
 800531e:	3302      	addmi	r3, #2
 8005320:	6033      	strmi	r3, [r6, #0]
 8005322:	6825      	ldr	r5, [r4, #0]
 8005324:	f015 0506 	ands.w	r5, r5, #6
 8005328:	d106      	bne.n	8005338 <_printf_common+0x48>
 800532a:	f104 0a19 	add.w	sl, r4, #25
 800532e:	68e3      	ldr	r3, [r4, #12]
 8005330:	6832      	ldr	r2, [r6, #0]
 8005332:	1a9b      	subs	r3, r3, r2
 8005334:	42ab      	cmp	r3, r5
 8005336:	dc26      	bgt.n	8005386 <_printf_common+0x96>
 8005338:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800533c:	1e13      	subs	r3, r2, #0
 800533e:	6822      	ldr	r2, [r4, #0]
 8005340:	bf18      	it	ne
 8005342:	2301      	movne	r3, #1
 8005344:	0692      	lsls	r2, r2, #26
 8005346:	d42b      	bmi.n	80053a0 <_printf_common+0xb0>
 8005348:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800534c:	4649      	mov	r1, r9
 800534e:	4638      	mov	r0, r7
 8005350:	47c0      	blx	r8
 8005352:	3001      	adds	r0, #1
 8005354:	d01e      	beq.n	8005394 <_printf_common+0xa4>
 8005356:	6823      	ldr	r3, [r4, #0]
 8005358:	68e5      	ldr	r5, [r4, #12]
 800535a:	6832      	ldr	r2, [r6, #0]
 800535c:	f003 0306 	and.w	r3, r3, #6
 8005360:	2b04      	cmp	r3, #4
 8005362:	bf08      	it	eq
 8005364:	1aad      	subeq	r5, r5, r2
 8005366:	68a3      	ldr	r3, [r4, #8]
 8005368:	6922      	ldr	r2, [r4, #16]
 800536a:	bf0c      	ite	eq
 800536c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005370:	2500      	movne	r5, #0
 8005372:	4293      	cmp	r3, r2
 8005374:	bfc4      	itt	gt
 8005376:	1a9b      	subgt	r3, r3, r2
 8005378:	18ed      	addgt	r5, r5, r3
 800537a:	2600      	movs	r6, #0
 800537c:	341a      	adds	r4, #26
 800537e:	42b5      	cmp	r5, r6
 8005380:	d11a      	bne.n	80053b8 <_printf_common+0xc8>
 8005382:	2000      	movs	r0, #0
 8005384:	e008      	b.n	8005398 <_printf_common+0xa8>
 8005386:	2301      	movs	r3, #1
 8005388:	4652      	mov	r2, sl
 800538a:	4649      	mov	r1, r9
 800538c:	4638      	mov	r0, r7
 800538e:	47c0      	blx	r8
 8005390:	3001      	adds	r0, #1
 8005392:	d103      	bne.n	800539c <_printf_common+0xac>
 8005394:	f04f 30ff 	mov.w	r0, #4294967295
 8005398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800539c:	3501      	adds	r5, #1
 800539e:	e7c6      	b.n	800532e <_printf_common+0x3e>
 80053a0:	18e1      	adds	r1, r4, r3
 80053a2:	1c5a      	adds	r2, r3, #1
 80053a4:	2030      	movs	r0, #48	; 0x30
 80053a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053aa:	4422      	add	r2, r4
 80053ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053b4:	3302      	adds	r3, #2
 80053b6:	e7c7      	b.n	8005348 <_printf_common+0x58>
 80053b8:	2301      	movs	r3, #1
 80053ba:	4622      	mov	r2, r4
 80053bc:	4649      	mov	r1, r9
 80053be:	4638      	mov	r0, r7
 80053c0:	47c0      	blx	r8
 80053c2:	3001      	adds	r0, #1
 80053c4:	d0e6      	beq.n	8005394 <_printf_common+0xa4>
 80053c6:	3601      	adds	r6, #1
 80053c8:	e7d9      	b.n	800537e <_printf_common+0x8e>
	...

080053cc <_printf_i>:
 80053cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053d0:	460c      	mov	r4, r1
 80053d2:	4691      	mov	r9, r2
 80053d4:	7e27      	ldrb	r7, [r4, #24]
 80053d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80053d8:	2f78      	cmp	r7, #120	; 0x78
 80053da:	4680      	mov	r8, r0
 80053dc:	469a      	mov	sl, r3
 80053de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053e2:	d807      	bhi.n	80053f4 <_printf_i+0x28>
 80053e4:	2f62      	cmp	r7, #98	; 0x62
 80053e6:	d80a      	bhi.n	80053fe <_printf_i+0x32>
 80053e8:	2f00      	cmp	r7, #0
 80053ea:	f000 80d8 	beq.w	800559e <_printf_i+0x1d2>
 80053ee:	2f58      	cmp	r7, #88	; 0x58
 80053f0:	f000 80a3 	beq.w	800553a <_printf_i+0x16e>
 80053f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80053f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80053fc:	e03a      	b.n	8005474 <_printf_i+0xa8>
 80053fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005402:	2b15      	cmp	r3, #21
 8005404:	d8f6      	bhi.n	80053f4 <_printf_i+0x28>
 8005406:	a001      	add	r0, pc, #4	; (adr r0, 800540c <_printf_i+0x40>)
 8005408:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800540c:	08005465 	.word	0x08005465
 8005410:	08005479 	.word	0x08005479
 8005414:	080053f5 	.word	0x080053f5
 8005418:	080053f5 	.word	0x080053f5
 800541c:	080053f5 	.word	0x080053f5
 8005420:	080053f5 	.word	0x080053f5
 8005424:	08005479 	.word	0x08005479
 8005428:	080053f5 	.word	0x080053f5
 800542c:	080053f5 	.word	0x080053f5
 8005430:	080053f5 	.word	0x080053f5
 8005434:	080053f5 	.word	0x080053f5
 8005438:	08005585 	.word	0x08005585
 800543c:	080054a9 	.word	0x080054a9
 8005440:	08005567 	.word	0x08005567
 8005444:	080053f5 	.word	0x080053f5
 8005448:	080053f5 	.word	0x080053f5
 800544c:	080055a7 	.word	0x080055a7
 8005450:	080053f5 	.word	0x080053f5
 8005454:	080054a9 	.word	0x080054a9
 8005458:	080053f5 	.word	0x080053f5
 800545c:	080053f5 	.word	0x080053f5
 8005460:	0800556f 	.word	0x0800556f
 8005464:	680b      	ldr	r3, [r1, #0]
 8005466:	1d1a      	adds	r2, r3, #4
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	600a      	str	r2, [r1, #0]
 800546c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005470:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005474:	2301      	movs	r3, #1
 8005476:	e0a3      	b.n	80055c0 <_printf_i+0x1f4>
 8005478:	6825      	ldr	r5, [r4, #0]
 800547a:	6808      	ldr	r0, [r1, #0]
 800547c:	062e      	lsls	r6, r5, #24
 800547e:	f100 0304 	add.w	r3, r0, #4
 8005482:	d50a      	bpl.n	800549a <_printf_i+0xce>
 8005484:	6805      	ldr	r5, [r0, #0]
 8005486:	600b      	str	r3, [r1, #0]
 8005488:	2d00      	cmp	r5, #0
 800548a:	da03      	bge.n	8005494 <_printf_i+0xc8>
 800548c:	232d      	movs	r3, #45	; 0x2d
 800548e:	426d      	negs	r5, r5
 8005490:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005494:	485e      	ldr	r0, [pc, #376]	; (8005610 <_printf_i+0x244>)
 8005496:	230a      	movs	r3, #10
 8005498:	e019      	b.n	80054ce <_printf_i+0x102>
 800549a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800549e:	6805      	ldr	r5, [r0, #0]
 80054a0:	600b      	str	r3, [r1, #0]
 80054a2:	bf18      	it	ne
 80054a4:	b22d      	sxthne	r5, r5
 80054a6:	e7ef      	b.n	8005488 <_printf_i+0xbc>
 80054a8:	680b      	ldr	r3, [r1, #0]
 80054aa:	6825      	ldr	r5, [r4, #0]
 80054ac:	1d18      	adds	r0, r3, #4
 80054ae:	6008      	str	r0, [r1, #0]
 80054b0:	0628      	lsls	r0, r5, #24
 80054b2:	d501      	bpl.n	80054b8 <_printf_i+0xec>
 80054b4:	681d      	ldr	r5, [r3, #0]
 80054b6:	e002      	b.n	80054be <_printf_i+0xf2>
 80054b8:	0669      	lsls	r1, r5, #25
 80054ba:	d5fb      	bpl.n	80054b4 <_printf_i+0xe8>
 80054bc:	881d      	ldrh	r5, [r3, #0]
 80054be:	4854      	ldr	r0, [pc, #336]	; (8005610 <_printf_i+0x244>)
 80054c0:	2f6f      	cmp	r7, #111	; 0x6f
 80054c2:	bf0c      	ite	eq
 80054c4:	2308      	moveq	r3, #8
 80054c6:	230a      	movne	r3, #10
 80054c8:	2100      	movs	r1, #0
 80054ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054ce:	6866      	ldr	r6, [r4, #4]
 80054d0:	60a6      	str	r6, [r4, #8]
 80054d2:	2e00      	cmp	r6, #0
 80054d4:	bfa2      	ittt	ge
 80054d6:	6821      	ldrge	r1, [r4, #0]
 80054d8:	f021 0104 	bicge.w	r1, r1, #4
 80054dc:	6021      	strge	r1, [r4, #0]
 80054de:	b90d      	cbnz	r5, 80054e4 <_printf_i+0x118>
 80054e0:	2e00      	cmp	r6, #0
 80054e2:	d04d      	beq.n	8005580 <_printf_i+0x1b4>
 80054e4:	4616      	mov	r6, r2
 80054e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80054ea:	fb03 5711 	mls	r7, r3, r1, r5
 80054ee:	5dc7      	ldrb	r7, [r0, r7]
 80054f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80054f4:	462f      	mov	r7, r5
 80054f6:	42bb      	cmp	r3, r7
 80054f8:	460d      	mov	r5, r1
 80054fa:	d9f4      	bls.n	80054e6 <_printf_i+0x11a>
 80054fc:	2b08      	cmp	r3, #8
 80054fe:	d10b      	bne.n	8005518 <_printf_i+0x14c>
 8005500:	6823      	ldr	r3, [r4, #0]
 8005502:	07df      	lsls	r7, r3, #31
 8005504:	d508      	bpl.n	8005518 <_printf_i+0x14c>
 8005506:	6923      	ldr	r3, [r4, #16]
 8005508:	6861      	ldr	r1, [r4, #4]
 800550a:	4299      	cmp	r1, r3
 800550c:	bfde      	ittt	le
 800550e:	2330      	movle	r3, #48	; 0x30
 8005510:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005514:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005518:	1b92      	subs	r2, r2, r6
 800551a:	6122      	str	r2, [r4, #16]
 800551c:	f8cd a000 	str.w	sl, [sp]
 8005520:	464b      	mov	r3, r9
 8005522:	aa03      	add	r2, sp, #12
 8005524:	4621      	mov	r1, r4
 8005526:	4640      	mov	r0, r8
 8005528:	f7ff fee2 	bl	80052f0 <_printf_common>
 800552c:	3001      	adds	r0, #1
 800552e:	d14c      	bne.n	80055ca <_printf_i+0x1fe>
 8005530:	f04f 30ff 	mov.w	r0, #4294967295
 8005534:	b004      	add	sp, #16
 8005536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800553a:	4835      	ldr	r0, [pc, #212]	; (8005610 <_printf_i+0x244>)
 800553c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005540:	6823      	ldr	r3, [r4, #0]
 8005542:	680e      	ldr	r6, [r1, #0]
 8005544:	061f      	lsls	r7, r3, #24
 8005546:	f856 5b04 	ldr.w	r5, [r6], #4
 800554a:	600e      	str	r6, [r1, #0]
 800554c:	d514      	bpl.n	8005578 <_printf_i+0x1ac>
 800554e:	07d9      	lsls	r1, r3, #31
 8005550:	bf44      	itt	mi
 8005552:	f043 0320 	orrmi.w	r3, r3, #32
 8005556:	6023      	strmi	r3, [r4, #0]
 8005558:	b91d      	cbnz	r5, 8005562 <_printf_i+0x196>
 800555a:	6823      	ldr	r3, [r4, #0]
 800555c:	f023 0320 	bic.w	r3, r3, #32
 8005560:	6023      	str	r3, [r4, #0]
 8005562:	2310      	movs	r3, #16
 8005564:	e7b0      	b.n	80054c8 <_printf_i+0xfc>
 8005566:	6823      	ldr	r3, [r4, #0]
 8005568:	f043 0320 	orr.w	r3, r3, #32
 800556c:	6023      	str	r3, [r4, #0]
 800556e:	2378      	movs	r3, #120	; 0x78
 8005570:	4828      	ldr	r0, [pc, #160]	; (8005614 <_printf_i+0x248>)
 8005572:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005576:	e7e3      	b.n	8005540 <_printf_i+0x174>
 8005578:	065e      	lsls	r6, r3, #25
 800557a:	bf48      	it	mi
 800557c:	b2ad      	uxthmi	r5, r5
 800557e:	e7e6      	b.n	800554e <_printf_i+0x182>
 8005580:	4616      	mov	r6, r2
 8005582:	e7bb      	b.n	80054fc <_printf_i+0x130>
 8005584:	680b      	ldr	r3, [r1, #0]
 8005586:	6826      	ldr	r6, [r4, #0]
 8005588:	6960      	ldr	r0, [r4, #20]
 800558a:	1d1d      	adds	r5, r3, #4
 800558c:	600d      	str	r5, [r1, #0]
 800558e:	0635      	lsls	r5, r6, #24
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	d501      	bpl.n	8005598 <_printf_i+0x1cc>
 8005594:	6018      	str	r0, [r3, #0]
 8005596:	e002      	b.n	800559e <_printf_i+0x1d2>
 8005598:	0671      	lsls	r1, r6, #25
 800559a:	d5fb      	bpl.n	8005594 <_printf_i+0x1c8>
 800559c:	8018      	strh	r0, [r3, #0]
 800559e:	2300      	movs	r3, #0
 80055a0:	6123      	str	r3, [r4, #16]
 80055a2:	4616      	mov	r6, r2
 80055a4:	e7ba      	b.n	800551c <_printf_i+0x150>
 80055a6:	680b      	ldr	r3, [r1, #0]
 80055a8:	1d1a      	adds	r2, r3, #4
 80055aa:	600a      	str	r2, [r1, #0]
 80055ac:	681e      	ldr	r6, [r3, #0]
 80055ae:	6862      	ldr	r2, [r4, #4]
 80055b0:	2100      	movs	r1, #0
 80055b2:	4630      	mov	r0, r6
 80055b4:	f7fa fe1c 	bl	80001f0 <memchr>
 80055b8:	b108      	cbz	r0, 80055be <_printf_i+0x1f2>
 80055ba:	1b80      	subs	r0, r0, r6
 80055bc:	6060      	str	r0, [r4, #4]
 80055be:	6863      	ldr	r3, [r4, #4]
 80055c0:	6123      	str	r3, [r4, #16]
 80055c2:	2300      	movs	r3, #0
 80055c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055c8:	e7a8      	b.n	800551c <_printf_i+0x150>
 80055ca:	6923      	ldr	r3, [r4, #16]
 80055cc:	4632      	mov	r2, r6
 80055ce:	4649      	mov	r1, r9
 80055d0:	4640      	mov	r0, r8
 80055d2:	47d0      	blx	sl
 80055d4:	3001      	adds	r0, #1
 80055d6:	d0ab      	beq.n	8005530 <_printf_i+0x164>
 80055d8:	6823      	ldr	r3, [r4, #0]
 80055da:	079b      	lsls	r3, r3, #30
 80055dc:	d413      	bmi.n	8005606 <_printf_i+0x23a>
 80055de:	68e0      	ldr	r0, [r4, #12]
 80055e0:	9b03      	ldr	r3, [sp, #12]
 80055e2:	4298      	cmp	r0, r3
 80055e4:	bfb8      	it	lt
 80055e6:	4618      	movlt	r0, r3
 80055e8:	e7a4      	b.n	8005534 <_printf_i+0x168>
 80055ea:	2301      	movs	r3, #1
 80055ec:	4632      	mov	r2, r6
 80055ee:	4649      	mov	r1, r9
 80055f0:	4640      	mov	r0, r8
 80055f2:	47d0      	blx	sl
 80055f4:	3001      	adds	r0, #1
 80055f6:	d09b      	beq.n	8005530 <_printf_i+0x164>
 80055f8:	3501      	adds	r5, #1
 80055fa:	68e3      	ldr	r3, [r4, #12]
 80055fc:	9903      	ldr	r1, [sp, #12]
 80055fe:	1a5b      	subs	r3, r3, r1
 8005600:	42ab      	cmp	r3, r5
 8005602:	dcf2      	bgt.n	80055ea <_printf_i+0x21e>
 8005604:	e7eb      	b.n	80055de <_printf_i+0x212>
 8005606:	2500      	movs	r5, #0
 8005608:	f104 0619 	add.w	r6, r4, #25
 800560c:	e7f5      	b.n	80055fa <_printf_i+0x22e>
 800560e:	bf00      	nop
 8005610:	08008b1e 	.word	0x08008b1e
 8005614:	08008b2f 	.word	0x08008b2f

08005618 <siprintf>:
 8005618:	b40e      	push	{r1, r2, r3}
 800561a:	b500      	push	{lr}
 800561c:	b09c      	sub	sp, #112	; 0x70
 800561e:	ab1d      	add	r3, sp, #116	; 0x74
 8005620:	9002      	str	r0, [sp, #8]
 8005622:	9006      	str	r0, [sp, #24]
 8005624:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005628:	4809      	ldr	r0, [pc, #36]	; (8005650 <siprintf+0x38>)
 800562a:	9107      	str	r1, [sp, #28]
 800562c:	9104      	str	r1, [sp, #16]
 800562e:	4909      	ldr	r1, [pc, #36]	; (8005654 <siprintf+0x3c>)
 8005630:	f853 2b04 	ldr.w	r2, [r3], #4
 8005634:	9105      	str	r1, [sp, #20]
 8005636:	6800      	ldr	r0, [r0, #0]
 8005638:	9301      	str	r3, [sp, #4]
 800563a:	a902      	add	r1, sp, #8
 800563c:	f001 fb32 	bl	8006ca4 <_svfiprintf_r>
 8005640:	9b02      	ldr	r3, [sp, #8]
 8005642:	2200      	movs	r2, #0
 8005644:	701a      	strb	r2, [r3, #0]
 8005646:	b01c      	add	sp, #112	; 0x70
 8005648:	f85d eb04 	ldr.w	lr, [sp], #4
 800564c:	b003      	add	sp, #12
 800564e:	4770      	bx	lr
 8005650:	2000000c 	.word	0x2000000c
 8005654:	ffff0208 	.word	0xffff0208

08005658 <quorem>:
 8005658:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800565c:	6903      	ldr	r3, [r0, #16]
 800565e:	690c      	ldr	r4, [r1, #16]
 8005660:	42a3      	cmp	r3, r4
 8005662:	4607      	mov	r7, r0
 8005664:	f2c0 8081 	blt.w	800576a <quorem+0x112>
 8005668:	3c01      	subs	r4, #1
 800566a:	f101 0814 	add.w	r8, r1, #20
 800566e:	f100 0514 	add.w	r5, r0, #20
 8005672:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005676:	9301      	str	r3, [sp, #4]
 8005678:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800567c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005680:	3301      	adds	r3, #1
 8005682:	429a      	cmp	r2, r3
 8005684:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005688:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800568c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005690:	d331      	bcc.n	80056f6 <quorem+0x9e>
 8005692:	f04f 0e00 	mov.w	lr, #0
 8005696:	4640      	mov	r0, r8
 8005698:	46ac      	mov	ip, r5
 800569a:	46f2      	mov	sl, lr
 800569c:	f850 2b04 	ldr.w	r2, [r0], #4
 80056a0:	b293      	uxth	r3, r2
 80056a2:	fb06 e303 	mla	r3, r6, r3, lr
 80056a6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	ebaa 0303 	sub.w	r3, sl, r3
 80056b0:	0c12      	lsrs	r2, r2, #16
 80056b2:	f8dc a000 	ldr.w	sl, [ip]
 80056b6:	fb06 e202 	mla	r2, r6, r2, lr
 80056ba:	fa13 f38a 	uxtah	r3, r3, sl
 80056be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80056c2:	fa1f fa82 	uxth.w	sl, r2
 80056c6:	f8dc 2000 	ldr.w	r2, [ip]
 80056ca:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80056ce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80056d8:	4581      	cmp	r9, r0
 80056da:	f84c 3b04 	str.w	r3, [ip], #4
 80056de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80056e2:	d2db      	bcs.n	800569c <quorem+0x44>
 80056e4:	f855 300b 	ldr.w	r3, [r5, fp]
 80056e8:	b92b      	cbnz	r3, 80056f6 <quorem+0x9e>
 80056ea:	9b01      	ldr	r3, [sp, #4]
 80056ec:	3b04      	subs	r3, #4
 80056ee:	429d      	cmp	r5, r3
 80056f0:	461a      	mov	r2, r3
 80056f2:	d32e      	bcc.n	8005752 <quorem+0xfa>
 80056f4:	613c      	str	r4, [r7, #16]
 80056f6:	4638      	mov	r0, r7
 80056f8:	f001 f8be 	bl	8006878 <__mcmp>
 80056fc:	2800      	cmp	r0, #0
 80056fe:	db24      	blt.n	800574a <quorem+0xf2>
 8005700:	3601      	adds	r6, #1
 8005702:	4628      	mov	r0, r5
 8005704:	f04f 0c00 	mov.w	ip, #0
 8005708:	f858 2b04 	ldr.w	r2, [r8], #4
 800570c:	f8d0 e000 	ldr.w	lr, [r0]
 8005710:	b293      	uxth	r3, r2
 8005712:	ebac 0303 	sub.w	r3, ip, r3
 8005716:	0c12      	lsrs	r2, r2, #16
 8005718:	fa13 f38e 	uxtah	r3, r3, lr
 800571c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005720:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005724:	b29b      	uxth	r3, r3
 8005726:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800572a:	45c1      	cmp	r9, r8
 800572c:	f840 3b04 	str.w	r3, [r0], #4
 8005730:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005734:	d2e8      	bcs.n	8005708 <quorem+0xb0>
 8005736:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800573a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800573e:	b922      	cbnz	r2, 800574a <quorem+0xf2>
 8005740:	3b04      	subs	r3, #4
 8005742:	429d      	cmp	r5, r3
 8005744:	461a      	mov	r2, r3
 8005746:	d30a      	bcc.n	800575e <quorem+0x106>
 8005748:	613c      	str	r4, [r7, #16]
 800574a:	4630      	mov	r0, r6
 800574c:	b003      	add	sp, #12
 800574e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005752:	6812      	ldr	r2, [r2, #0]
 8005754:	3b04      	subs	r3, #4
 8005756:	2a00      	cmp	r2, #0
 8005758:	d1cc      	bne.n	80056f4 <quorem+0x9c>
 800575a:	3c01      	subs	r4, #1
 800575c:	e7c7      	b.n	80056ee <quorem+0x96>
 800575e:	6812      	ldr	r2, [r2, #0]
 8005760:	3b04      	subs	r3, #4
 8005762:	2a00      	cmp	r2, #0
 8005764:	d1f0      	bne.n	8005748 <quorem+0xf0>
 8005766:	3c01      	subs	r4, #1
 8005768:	e7eb      	b.n	8005742 <quorem+0xea>
 800576a:	2000      	movs	r0, #0
 800576c:	e7ee      	b.n	800574c <quorem+0xf4>
	...

08005770 <_dtoa_r>:
 8005770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005774:	ed2d 8b02 	vpush	{d8}
 8005778:	ec57 6b10 	vmov	r6, r7, d0
 800577c:	b095      	sub	sp, #84	; 0x54
 800577e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005780:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005784:	9105      	str	r1, [sp, #20]
 8005786:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800578a:	4604      	mov	r4, r0
 800578c:	9209      	str	r2, [sp, #36]	; 0x24
 800578e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005790:	b975      	cbnz	r5, 80057b0 <_dtoa_r+0x40>
 8005792:	2010      	movs	r0, #16
 8005794:	f000 fddc 	bl	8006350 <malloc>
 8005798:	4602      	mov	r2, r0
 800579a:	6260      	str	r0, [r4, #36]	; 0x24
 800579c:	b920      	cbnz	r0, 80057a8 <_dtoa_r+0x38>
 800579e:	4bb2      	ldr	r3, [pc, #712]	; (8005a68 <_dtoa_r+0x2f8>)
 80057a0:	21ea      	movs	r1, #234	; 0xea
 80057a2:	48b2      	ldr	r0, [pc, #712]	; (8005a6c <_dtoa_r+0x2fc>)
 80057a4:	f001 fb8e 	bl	8006ec4 <__assert_func>
 80057a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80057ac:	6005      	str	r5, [r0, #0]
 80057ae:	60c5      	str	r5, [r0, #12]
 80057b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057b2:	6819      	ldr	r1, [r3, #0]
 80057b4:	b151      	cbz	r1, 80057cc <_dtoa_r+0x5c>
 80057b6:	685a      	ldr	r2, [r3, #4]
 80057b8:	604a      	str	r2, [r1, #4]
 80057ba:	2301      	movs	r3, #1
 80057bc:	4093      	lsls	r3, r2
 80057be:	608b      	str	r3, [r1, #8]
 80057c0:	4620      	mov	r0, r4
 80057c2:	f000 fe1b 	bl	80063fc <_Bfree>
 80057c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057c8:	2200      	movs	r2, #0
 80057ca:	601a      	str	r2, [r3, #0]
 80057cc:	1e3b      	subs	r3, r7, #0
 80057ce:	bfb9      	ittee	lt
 80057d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80057d4:	9303      	strlt	r3, [sp, #12]
 80057d6:	2300      	movge	r3, #0
 80057d8:	f8c8 3000 	strge.w	r3, [r8]
 80057dc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80057e0:	4ba3      	ldr	r3, [pc, #652]	; (8005a70 <_dtoa_r+0x300>)
 80057e2:	bfbc      	itt	lt
 80057e4:	2201      	movlt	r2, #1
 80057e6:	f8c8 2000 	strlt.w	r2, [r8]
 80057ea:	ea33 0309 	bics.w	r3, r3, r9
 80057ee:	d11b      	bne.n	8005828 <_dtoa_r+0xb8>
 80057f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80057f2:	f242 730f 	movw	r3, #9999	; 0x270f
 80057f6:	6013      	str	r3, [r2, #0]
 80057f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80057fc:	4333      	orrs	r3, r6
 80057fe:	f000 857a 	beq.w	80062f6 <_dtoa_r+0xb86>
 8005802:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005804:	b963      	cbnz	r3, 8005820 <_dtoa_r+0xb0>
 8005806:	4b9b      	ldr	r3, [pc, #620]	; (8005a74 <_dtoa_r+0x304>)
 8005808:	e024      	b.n	8005854 <_dtoa_r+0xe4>
 800580a:	4b9b      	ldr	r3, [pc, #620]	; (8005a78 <_dtoa_r+0x308>)
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	3308      	adds	r3, #8
 8005810:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005812:	6013      	str	r3, [r2, #0]
 8005814:	9800      	ldr	r0, [sp, #0]
 8005816:	b015      	add	sp, #84	; 0x54
 8005818:	ecbd 8b02 	vpop	{d8}
 800581c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005820:	4b94      	ldr	r3, [pc, #592]	; (8005a74 <_dtoa_r+0x304>)
 8005822:	9300      	str	r3, [sp, #0]
 8005824:	3303      	adds	r3, #3
 8005826:	e7f3      	b.n	8005810 <_dtoa_r+0xa0>
 8005828:	ed9d 7b02 	vldr	d7, [sp, #8]
 800582c:	2200      	movs	r2, #0
 800582e:	ec51 0b17 	vmov	r0, r1, d7
 8005832:	2300      	movs	r3, #0
 8005834:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005838:	f7fb f94e 	bl	8000ad8 <__aeabi_dcmpeq>
 800583c:	4680      	mov	r8, r0
 800583e:	b158      	cbz	r0, 8005858 <_dtoa_r+0xe8>
 8005840:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005842:	2301      	movs	r3, #1
 8005844:	6013      	str	r3, [r2, #0]
 8005846:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005848:	2b00      	cmp	r3, #0
 800584a:	f000 8551 	beq.w	80062f0 <_dtoa_r+0xb80>
 800584e:	488b      	ldr	r0, [pc, #556]	; (8005a7c <_dtoa_r+0x30c>)
 8005850:	6018      	str	r0, [r3, #0]
 8005852:	1e43      	subs	r3, r0, #1
 8005854:	9300      	str	r3, [sp, #0]
 8005856:	e7dd      	b.n	8005814 <_dtoa_r+0xa4>
 8005858:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800585c:	aa12      	add	r2, sp, #72	; 0x48
 800585e:	a913      	add	r1, sp, #76	; 0x4c
 8005860:	4620      	mov	r0, r4
 8005862:	f001 f8ad 	bl	80069c0 <__d2b>
 8005866:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800586a:	4683      	mov	fp, r0
 800586c:	2d00      	cmp	r5, #0
 800586e:	d07c      	beq.n	800596a <_dtoa_r+0x1fa>
 8005870:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005872:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8005876:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800587a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800587e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005882:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005886:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800588a:	4b7d      	ldr	r3, [pc, #500]	; (8005a80 <_dtoa_r+0x310>)
 800588c:	2200      	movs	r2, #0
 800588e:	4630      	mov	r0, r6
 8005890:	4639      	mov	r1, r7
 8005892:	f7fa fd01 	bl	8000298 <__aeabi_dsub>
 8005896:	a36e      	add	r3, pc, #440	; (adr r3, 8005a50 <_dtoa_r+0x2e0>)
 8005898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589c:	f7fa feb4 	bl	8000608 <__aeabi_dmul>
 80058a0:	a36d      	add	r3, pc, #436	; (adr r3, 8005a58 <_dtoa_r+0x2e8>)
 80058a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a6:	f7fa fcf9 	bl	800029c <__adddf3>
 80058aa:	4606      	mov	r6, r0
 80058ac:	4628      	mov	r0, r5
 80058ae:	460f      	mov	r7, r1
 80058b0:	f7fa fe40 	bl	8000534 <__aeabi_i2d>
 80058b4:	a36a      	add	r3, pc, #424	; (adr r3, 8005a60 <_dtoa_r+0x2f0>)
 80058b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ba:	f7fa fea5 	bl	8000608 <__aeabi_dmul>
 80058be:	4602      	mov	r2, r0
 80058c0:	460b      	mov	r3, r1
 80058c2:	4630      	mov	r0, r6
 80058c4:	4639      	mov	r1, r7
 80058c6:	f7fa fce9 	bl	800029c <__adddf3>
 80058ca:	4606      	mov	r6, r0
 80058cc:	460f      	mov	r7, r1
 80058ce:	f7fb f94b 	bl	8000b68 <__aeabi_d2iz>
 80058d2:	2200      	movs	r2, #0
 80058d4:	4682      	mov	sl, r0
 80058d6:	2300      	movs	r3, #0
 80058d8:	4630      	mov	r0, r6
 80058da:	4639      	mov	r1, r7
 80058dc:	f7fb f906 	bl	8000aec <__aeabi_dcmplt>
 80058e0:	b148      	cbz	r0, 80058f6 <_dtoa_r+0x186>
 80058e2:	4650      	mov	r0, sl
 80058e4:	f7fa fe26 	bl	8000534 <__aeabi_i2d>
 80058e8:	4632      	mov	r2, r6
 80058ea:	463b      	mov	r3, r7
 80058ec:	f7fb f8f4 	bl	8000ad8 <__aeabi_dcmpeq>
 80058f0:	b908      	cbnz	r0, 80058f6 <_dtoa_r+0x186>
 80058f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80058f6:	f1ba 0f16 	cmp.w	sl, #22
 80058fa:	d854      	bhi.n	80059a6 <_dtoa_r+0x236>
 80058fc:	4b61      	ldr	r3, [pc, #388]	; (8005a84 <_dtoa_r+0x314>)
 80058fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005906:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800590a:	f7fb f8ef 	bl	8000aec <__aeabi_dcmplt>
 800590e:	2800      	cmp	r0, #0
 8005910:	d04b      	beq.n	80059aa <_dtoa_r+0x23a>
 8005912:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005916:	2300      	movs	r3, #0
 8005918:	930e      	str	r3, [sp, #56]	; 0x38
 800591a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800591c:	1b5d      	subs	r5, r3, r5
 800591e:	1e6b      	subs	r3, r5, #1
 8005920:	9304      	str	r3, [sp, #16]
 8005922:	bf43      	ittte	mi
 8005924:	2300      	movmi	r3, #0
 8005926:	f1c5 0801 	rsbmi	r8, r5, #1
 800592a:	9304      	strmi	r3, [sp, #16]
 800592c:	f04f 0800 	movpl.w	r8, #0
 8005930:	f1ba 0f00 	cmp.w	sl, #0
 8005934:	db3b      	blt.n	80059ae <_dtoa_r+0x23e>
 8005936:	9b04      	ldr	r3, [sp, #16]
 8005938:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800593c:	4453      	add	r3, sl
 800593e:	9304      	str	r3, [sp, #16]
 8005940:	2300      	movs	r3, #0
 8005942:	9306      	str	r3, [sp, #24]
 8005944:	9b05      	ldr	r3, [sp, #20]
 8005946:	2b09      	cmp	r3, #9
 8005948:	d869      	bhi.n	8005a1e <_dtoa_r+0x2ae>
 800594a:	2b05      	cmp	r3, #5
 800594c:	bfc4      	itt	gt
 800594e:	3b04      	subgt	r3, #4
 8005950:	9305      	strgt	r3, [sp, #20]
 8005952:	9b05      	ldr	r3, [sp, #20]
 8005954:	f1a3 0302 	sub.w	r3, r3, #2
 8005958:	bfcc      	ite	gt
 800595a:	2500      	movgt	r5, #0
 800595c:	2501      	movle	r5, #1
 800595e:	2b03      	cmp	r3, #3
 8005960:	d869      	bhi.n	8005a36 <_dtoa_r+0x2c6>
 8005962:	e8df f003 	tbb	[pc, r3]
 8005966:	4e2c      	.short	0x4e2c
 8005968:	5a4c      	.short	0x5a4c
 800596a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800596e:	441d      	add	r5, r3
 8005970:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005974:	2b20      	cmp	r3, #32
 8005976:	bfc1      	itttt	gt
 8005978:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800597c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005980:	fa09 f303 	lslgt.w	r3, r9, r3
 8005984:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005988:	bfda      	itte	le
 800598a:	f1c3 0320 	rsble	r3, r3, #32
 800598e:	fa06 f003 	lslle.w	r0, r6, r3
 8005992:	4318      	orrgt	r0, r3
 8005994:	f7fa fdbe 	bl	8000514 <__aeabi_ui2d>
 8005998:	2301      	movs	r3, #1
 800599a:	4606      	mov	r6, r0
 800599c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80059a0:	3d01      	subs	r5, #1
 80059a2:	9310      	str	r3, [sp, #64]	; 0x40
 80059a4:	e771      	b.n	800588a <_dtoa_r+0x11a>
 80059a6:	2301      	movs	r3, #1
 80059a8:	e7b6      	b.n	8005918 <_dtoa_r+0x1a8>
 80059aa:	900e      	str	r0, [sp, #56]	; 0x38
 80059ac:	e7b5      	b.n	800591a <_dtoa_r+0x1aa>
 80059ae:	f1ca 0300 	rsb	r3, sl, #0
 80059b2:	9306      	str	r3, [sp, #24]
 80059b4:	2300      	movs	r3, #0
 80059b6:	eba8 080a 	sub.w	r8, r8, sl
 80059ba:	930d      	str	r3, [sp, #52]	; 0x34
 80059bc:	e7c2      	b.n	8005944 <_dtoa_r+0x1d4>
 80059be:	2300      	movs	r3, #0
 80059c0:	9308      	str	r3, [sp, #32]
 80059c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	dc39      	bgt.n	8005a3c <_dtoa_r+0x2cc>
 80059c8:	f04f 0901 	mov.w	r9, #1
 80059cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80059d0:	464b      	mov	r3, r9
 80059d2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80059d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80059d8:	2200      	movs	r2, #0
 80059da:	6042      	str	r2, [r0, #4]
 80059dc:	2204      	movs	r2, #4
 80059de:	f102 0614 	add.w	r6, r2, #20
 80059e2:	429e      	cmp	r6, r3
 80059e4:	6841      	ldr	r1, [r0, #4]
 80059e6:	d92f      	bls.n	8005a48 <_dtoa_r+0x2d8>
 80059e8:	4620      	mov	r0, r4
 80059ea:	f000 fcc7 	bl	800637c <_Balloc>
 80059ee:	9000      	str	r0, [sp, #0]
 80059f0:	2800      	cmp	r0, #0
 80059f2:	d14b      	bne.n	8005a8c <_dtoa_r+0x31c>
 80059f4:	4b24      	ldr	r3, [pc, #144]	; (8005a88 <_dtoa_r+0x318>)
 80059f6:	4602      	mov	r2, r0
 80059f8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80059fc:	e6d1      	b.n	80057a2 <_dtoa_r+0x32>
 80059fe:	2301      	movs	r3, #1
 8005a00:	e7de      	b.n	80059c0 <_dtoa_r+0x250>
 8005a02:	2300      	movs	r3, #0
 8005a04:	9308      	str	r3, [sp, #32]
 8005a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a08:	eb0a 0903 	add.w	r9, sl, r3
 8005a0c:	f109 0301 	add.w	r3, r9, #1
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	9301      	str	r3, [sp, #4]
 8005a14:	bfb8      	it	lt
 8005a16:	2301      	movlt	r3, #1
 8005a18:	e7dd      	b.n	80059d6 <_dtoa_r+0x266>
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e7f2      	b.n	8005a04 <_dtoa_r+0x294>
 8005a1e:	2501      	movs	r5, #1
 8005a20:	2300      	movs	r3, #0
 8005a22:	9305      	str	r3, [sp, #20]
 8005a24:	9508      	str	r5, [sp, #32]
 8005a26:	f04f 39ff 	mov.w	r9, #4294967295
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005a30:	2312      	movs	r3, #18
 8005a32:	9209      	str	r2, [sp, #36]	; 0x24
 8005a34:	e7cf      	b.n	80059d6 <_dtoa_r+0x266>
 8005a36:	2301      	movs	r3, #1
 8005a38:	9308      	str	r3, [sp, #32]
 8005a3a:	e7f4      	b.n	8005a26 <_dtoa_r+0x2b6>
 8005a3c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005a40:	f8cd 9004 	str.w	r9, [sp, #4]
 8005a44:	464b      	mov	r3, r9
 8005a46:	e7c6      	b.n	80059d6 <_dtoa_r+0x266>
 8005a48:	3101      	adds	r1, #1
 8005a4a:	6041      	str	r1, [r0, #4]
 8005a4c:	0052      	lsls	r2, r2, #1
 8005a4e:	e7c6      	b.n	80059de <_dtoa_r+0x26e>
 8005a50:	636f4361 	.word	0x636f4361
 8005a54:	3fd287a7 	.word	0x3fd287a7
 8005a58:	8b60c8b3 	.word	0x8b60c8b3
 8005a5c:	3fc68a28 	.word	0x3fc68a28
 8005a60:	509f79fb 	.word	0x509f79fb
 8005a64:	3fd34413 	.word	0x3fd34413
 8005a68:	08008b4d 	.word	0x08008b4d
 8005a6c:	08008b64 	.word	0x08008b64
 8005a70:	7ff00000 	.word	0x7ff00000
 8005a74:	08008b49 	.word	0x08008b49
 8005a78:	08008b40 	.word	0x08008b40
 8005a7c:	08008b1d 	.word	0x08008b1d
 8005a80:	3ff80000 	.word	0x3ff80000
 8005a84:	08008c60 	.word	0x08008c60
 8005a88:	08008bc3 	.word	0x08008bc3
 8005a8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a8e:	9a00      	ldr	r2, [sp, #0]
 8005a90:	601a      	str	r2, [r3, #0]
 8005a92:	9b01      	ldr	r3, [sp, #4]
 8005a94:	2b0e      	cmp	r3, #14
 8005a96:	f200 80ad 	bhi.w	8005bf4 <_dtoa_r+0x484>
 8005a9a:	2d00      	cmp	r5, #0
 8005a9c:	f000 80aa 	beq.w	8005bf4 <_dtoa_r+0x484>
 8005aa0:	f1ba 0f00 	cmp.w	sl, #0
 8005aa4:	dd36      	ble.n	8005b14 <_dtoa_r+0x3a4>
 8005aa6:	4ac3      	ldr	r2, [pc, #780]	; (8005db4 <_dtoa_r+0x644>)
 8005aa8:	f00a 030f 	and.w	r3, sl, #15
 8005aac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005ab0:	ed93 7b00 	vldr	d7, [r3]
 8005ab4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005ab8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005abc:	eeb0 8a47 	vmov.f32	s16, s14
 8005ac0:	eef0 8a67 	vmov.f32	s17, s15
 8005ac4:	d016      	beq.n	8005af4 <_dtoa_r+0x384>
 8005ac6:	4bbc      	ldr	r3, [pc, #752]	; (8005db8 <_dtoa_r+0x648>)
 8005ac8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005acc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005ad0:	f7fa fec4 	bl	800085c <__aeabi_ddiv>
 8005ad4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ad8:	f007 070f 	and.w	r7, r7, #15
 8005adc:	2503      	movs	r5, #3
 8005ade:	4eb6      	ldr	r6, [pc, #728]	; (8005db8 <_dtoa_r+0x648>)
 8005ae0:	b957      	cbnz	r7, 8005af8 <_dtoa_r+0x388>
 8005ae2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ae6:	ec53 2b18 	vmov	r2, r3, d8
 8005aea:	f7fa feb7 	bl	800085c <__aeabi_ddiv>
 8005aee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005af2:	e029      	b.n	8005b48 <_dtoa_r+0x3d8>
 8005af4:	2502      	movs	r5, #2
 8005af6:	e7f2      	b.n	8005ade <_dtoa_r+0x36e>
 8005af8:	07f9      	lsls	r1, r7, #31
 8005afa:	d508      	bpl.n	8005b0e <_dtoa_r+0x39e>
 8005afc:	ec51 0b18 	vmov	r0, r1, d8
 8005b00:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005b04:	f7fa fd80 	bl	8000608 <__aeabi_dmul>
 8005b08:	ec41 0b18 	vmov	d8, r0, r1
 8005b0c:	3501      	adds	r5, #1
 8005b0e:	107f      	asrs	r7, r7, #1
 8005b10:	3608      	adds	r6, #8
 8005b12:	e7e5      	b.n	8005ae0 <_dtoa_r+0x370>
 8005b14:	f000 80a6 	beq.w	8005c64 <_dtoa_r+0x4f4>
 8005b18:	f1ca 0600 	rsb	r6, sl, #0
 8005b1c:	4ba5      	ldr	r3, [pc, #660]	; (8005db4 <_dtoa_r+0x644>)
 8005b1e:	4fa6      	ldr	r7, [pc, #664]	; (8005db8 <_dtoa_r+0x648>)
 8005b20:	f006 020f 	and.w	r2, r6, #15
 8005b24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b2c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005b30:	f7fa fd6a 	bl	8000608 <__aeabi_dmul>
 8005b34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b38:	1136      	asrs	r6, r6, #4
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	2502      	movs	r5, #2
 8005b3e:	2e00      	cmp	r6, #0
 8005b40:	f040 8085 	bne.w	8005c4e <_dtoa_r+0x4de>
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1d2      	bne.n	8005aee <_dtoa_r+0x37e>
 8005b48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	f000 808c 	beq.w	8005c68 <_dtoa_r+0x4f8>
 8005b50:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005b54:	4b99      	ldr	r3, [pc, #612]	; (8005dbc <_dtoa_r+0x64c>)
 8005b56:	2200      	movs	r2, #0
 8005b58:	4630      	mov	r0, r6
 8005b5a:	4639      	mov	r1, r7
 8005b5c:	f7fa ffc6 	bl	8000aec <__aeabi_dcmplt>
 8005b60:	2800      	cmp	r0, #0
 8005b62:	f000 8081 	beq.w	8005c68 <_dtoa_r+0x4f8>
 8005b66:	9b01      	ldr	r3, [sp, #4]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d07d      	beq.n	8005c68 <_dtoa_r+0x4f8>
 8005b6c:	f1b9 0f00 	cmp.w	r9, #0
 8005b70:	dd3c      	ble.n	8005bec <_dtoa_r+0x47c>
 8005b72:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005b76:	9307      	str	r3, [sp, #28]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	4b91      	ldr	r3, [pc, #580]	; (8005dc0 <_dtoa_r+0x650>)
 8005b7c:	4630      	mov	r0, r6
 8005b7e:	4639      	mov	r1, r7
 8005b80:	f7fa fd42 	bl	8000608 <__aeabi_dmul>
 8005b84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b88:	3501      	adds	r5, #1
 8005b8a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005b8e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005b92:	4628      	mov	r0, r5
 8005b94:	f7fa fcce 	bl	8000534 <__aeabi_i2d>
 8005b98:	4632      	mov	r2, r6
 8005b9a:	463b      	mov	r3, r7
 8005b9c:	f7fa fd34 	bl	8000608 <__aeabi_dmul>
 8005ba0:	4b88      	ldr	r3, [pc, #544]	; (8005dc4 <_dtoa_r+0x654>)
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f7fa fb7a 	bl	800029c <__adddf3>
 8005ba8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005bac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005bb0:	9303      	str	r3, [sp, #12]
 8005bb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d15c      	bne.n	8005c72 <_dtoa_r+0x502>
 8005bb8:	4b83      	ldr	r3, [pc, #524]	; (8005dc8 <_dtoa_r+0x658>)
 8005bba:	2200      	movs	r2, #0
 8005bbc:	4630      	mov	r0, r6
 8005bbe:	4639      	mov	r1, r7
 8005bc0:	f7fa fb6a 	bl	8000298 <__aeabi_dsub>
 8005bc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005bc8:	4606      	mov	r6, r0
 8005bca:	460f      	mov	r7, r1
 8005bcc:	f7fa ffac 	bl	8000b28 <__aeabi_dcmpgt>
 8005bd0:	2800      	cmp	r0, #0
 8005bd2:	f040 8296 	bne.w	8006102 <_dtoa_r+0x992>
 8005bd6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005bda:	4630      	mov	r0, r6
 8005bdc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005be0:	4639      	mov	r1, r7
 8005be2:	f7fa ff83 	bl	8000aec <__aeabi_dcmplt>
 8005be6:	2800      	cmp	r0, #0
 8005be8:	f040 8288 	bne.w	80060fc <_dtoa_r+0x98c>
 8005bec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005bf0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005bf4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	f2c0 8158 	blt.w	8005eac <_dtoa_r+0x73c>
 8005bfc:	f1ba 0f0e 	cmp.w	sl, #14
 8005c00:	f300 8154 	bgt.w	8005eac <_dtoa_r+0x73c>
 8005c04:	4b6b      	ldr	r3, [pc, #428]	; (8005db4 <_dtoa_r+0x644>)
 8005c06:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005c0a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f280 80e3 	bge.w	8005ddc <_dtoa_r+0x66c>
 8005c16:	9b01      	ldr	r3, [sp, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f300 80df 	bgt.w	8005ddc <_dtoa_r+0x66c>
 8005c1e:	f040 826d 	bne.w	80060fc <_dtoa_r+0x98c>
 8005c22:	4b69      	ldr	r3, [pc, #420]	; (8005dc8 <_dtoa_r+0x658>)
 8005c24:	2200      	movs	r2, #0
 8005c26:	4640      	mov	r0, r8
 8005c28:	4649      	mov	r1, r9
 8005c2a:	f7fa fced 	bl	8000608 <__aeabi_dmul>
 8005c2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c32:	f7fa ff6f 	bl	8000b14 <__aeabi_dcmpge>
 8005c36:	9e01      	ldr	r6, [sp, #4]
 8005c38:	4637      	mov	r7, r6
 8005c3a:	2800      	cmp	r0, #0
 8005c3c:	f040 8243 	bne.w	80060c6 <_dtoa_r+0x956>
 8005c40:	9d00      	ldr	r5, [sp, #0]
 8005c42:	2331      	movs	r3, #49	; 0x31
 8005c44:	f805 3b01 	strb.w	r3, [r5], #1
 8005c48:	f10a 0a01 	add.w	sl, sl, #1
 8005c4c:	e23f      	b.n	80060ce <_dtoa_r+0x95e>
 8005c4e:	07f2      	lsls	r2, r6, #31
 8005c50:	d505      	bpl.n	8005c5e <_dtoa_r+0x4ee>
 8005c52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c56:	f7fa fcd7 	bl	8000608 <__aeabi_dmul>
 8005c5a:	3501      	adds	r5, #1
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	1076      	asrs	r6, r6, #1
 8005c60:	3708      	adds	r7, #8
 8005c62:	e76c      	b.n	8005b3e <_dtoa_r+0x3ce>
 8005c64:	2502      	movs	r5, #2
 8005c66:	e76f      	b.n	8005b48 <_dtoa_r+0x3d8>
 8005c68:	9b01      	ldr	r3, [sp, #4]
 8005c6a:	f8cd a01c 	str.w	sl, [sp, #28]
 8005c6e:	930c      	str	r3, [sp, #48]	; 0x30
 8005c70:	e78d      	b.n	8005b8e <_dtoa_r+0x41e>
 8005c72:	9900      	ldr	r1, [sp, #0]
 8005c74:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005c76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c78:	4b4e      	ldr	r3, [pc, #312]	; (8005db4 <_dtoa_r+0x644>)
 8005c7a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005c7e:	4401      	add	r1, r0
 8005c80:	9102      	str	r1, [sp, #8]
 8005c82:	9908      	ldr	r1, [sp, #32]
 8005c84:	eeb0 8a47 	vmov.f32	s16, s14
 8005c88:	eef0 8a67 	vmov.f32	s17, s15
 8005c8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c90:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005c94:	2900      	cmp	r1, #0
 8005c96:	d045      	beq.n	8005d24 <_dtoa_r+0x5b4>
 8005c98:	494c      	ldr	r1, [pc, #304]	; (8005dcc <_dtoa_r+0x65c>)
 8005c9a:	2000      	movs	r0, #0
 8005c9c:	f7fa fdde 	bl	800085c <__aeabi_ddiv>
 8005ca0:	ec53 2b18 	vmov	r2, r3, d8
 8005ca4:	f7fa faf8 	bl	8000298 <__aeabi_dsub>
 8005ca8:	9d00      	ldr	r5, [sp, #0]
 8005caa:	ec41 0b18 	vmov	d8, r0, r1
 8005cae:	4639      	mov	r1, r7
 8005cb0:	4630      	mov	r0, r6
 8005cb2:	f7fa ff59 	bl	8000b68 <__aeabi_d2iz>
 8005cb6:	900c      	str	r0, [sp, #48]	; 0x30
 8005cb8:	f7fa fc3c 	bl	8000534 <__aeabi_i2d>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	4630      	mov	r0, r6
 8005cc2:	4639      	mov	r1, r7
 8005cc4:	f7fa fae8 	bl	8000298 <__aeabi_dsub>
 8005cc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005cca:	3330      	adds	r3, #48	; 0x30
 8005ccc:	f805 3b01 	strb.w	r3, [r5], #1
 8005cd0:	ec53 2b18 	vmov	r2, r3, d8
 8005cd4:	4606      	mov	r6, r0
 8005cd6:	460f      	mov	r7, r1
 8005cd8:	f7fa ff08 	bl	8000aec <__aeabi_dcmplt>
 8005cdc:	2800      	cmp	r0, #0
 8005cde:	d165      	bne.n	8005dac <_dtoa_r+0x63c>
 8005ce0:	4632      	mov	r2, r6
 8005ce2:	463b      	mov	r3, r7
 8005ce4:	4935      	ldr	r1, [pc, #212]	; (8005dbc <_dtoa_r+0x64c>)
 8005ce6:	2000      	movs	r0, #0
 8005ce8:	f7fa fad6 	bl	8000298 <__aeabi_dsub>
 8005cec:	ec53 2b18 	vmov	r2, r3, d8
 8005cf0:	f7fa fefc 	bl	8000aec <__aeabi_dcmplt>
 8005cf4:	2800      	cmp	r0, #0
 8005cf6:	f040 80b9 	bne.w	8005e6c <_dtoa_r+0x6fc>
 8005cfa:	9b02      	ldr	r3, [sp, #8]
 8005cfc:	429d      	cmp	r5, r3
 8005cfe:	f43f af75 	beq.w	8005bec <_dtoa_r+0x47c>
 8005d02:	4b2f      	ldr	r3, [pc, #188]	; (8005dc0 <_dtoa_r+0x650>)
 8005d04:	ec51 0b18 	vmov	r0, r1, d8
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f7fa fc7d 	bl	8000608 <__aeabi_dmul>
 8005d0e:	4b2c      	ldr	r3, [pc, #176]	; (8005dc0 <_dtoa_r+0x650>)
 8005d10:	ec41 0b18 	vmov	d8, r0, r1
 8005d14:	2200      	movs	r2, #0
 8005d16:	4630      	mov	r0, r6
 8005d18:	4639      	mov	r1, r7
 8005d1a:	f7fa fc75 	bl	8000608 <__aeabi_dmul>
 8005d1e:	4606      	mov	r6, r0
 8005d20:	460f      	mov	r7, r1
 8005d22:	e7c4      	b.n	8005cae <_dtoa_r+0x53e>
 8005d24:	ec51 0b17 	vmov	r0, r1, d7
 8005d28:	f7fa fc6e 	bl	8000608 <__aeabi_dmul>
 8005d2c:	9b02      	ldr	r3, [sp, #8]
 8005d2e:	9d00      	ldr	r5, [sp, #0]
 8005d30:	930c      	str	r3, [sp, #48]	; 0x30
 8005d32:	ec41 0b18 	vmov	d8, r0, r1
 8005d36:	4639      	mov	r1, r7
 8005d38:	4630      	mov	r0, r6
 8005d3a:	f7fa ff15 	bl	8000b68 <__aeabi_d2iz>
 8005d3e:	9011      	str	r0, [sp, #68]	; 0x44
 8005d40:	f7fa fbf8 	bl	8000534 <__aeabi_i2d>
 8005d44:	4602      	mov	r2, r0
 8005d46:	460b      	mov	r3, r1
 8005d48:	4630      	mov	r0, r6
 8005d4a:	4639      	mov	r1, r7
 8005d4c:	f7fa faa4 	bl	8000298 <__aeabi_dsub>
 8005d50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d52:	3330      	adds	r3, #48	; 0x30
 8005d54:	f805 3b01 	strb.w	r3, [r5], #1
 8005d58:	9b02      	ldr	r3, [sp, #8]
 8005d5a:	429d      	cmp	r5, r3
 8005d5c:	4606      	mov	r6, r0
 8005d5e:	460f      	mov	r7, r1
 8005d60:	f04f 0200 	mov.w	r2, #0
 8005d64:	d134      	bne.n	8005dd0 <_dtoa_r+0x660>
 8005d66:	4b19      	ldr	r3, [pc, #100]	; (8005dcc <_dtoa_r+0x65c>)
 8005d68:	ec51 0b18 	vmov	r0, r1, d8
 8005d6c:	f7fa fa96 	bl	800029c <__adddf3>
 8005d70:	4602      	mov	r2, r0
 8005d72:	460b      	mov	r3, r1
 8005d74:	4630      	mov	r0, r6
 8005d76:	4639      	mov	r1, r7
 8005d78:	f7fa fed6 	bl	8000b28 <__aeabi_dcmpgt>
 8005d7c:	2800      	cmp	r0, #0
 8005d7e:	d175      	bne.n	8005e6c <_dtoa_r+0x6fc>
 8005d80:	ec53 2b18 	vmov	r2, r3, d8
 8005d84:	4911      	ldr	r1, [pc, #68]	; (8005dcc <_dtoa_r+0x65c>)
 8005d86:	2000      	movs	r0, #0
 8005d88:	f7fa fa86 	bl	8000298 <__aeabi_dsub>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	460b      	mov	r3, r1
 8005d90:	4630      	mov	r0, r6
 8005d92:	4639      	mov	r1, r7
 8005d94:	f7fa feaa 	bl	8000aec <__aeabi_dcmplt>
 8005d98:	2800      	cmp	r0, #0
 8005d9a:	f43f af27 	beq.w	8005bec <_dtoa_r+0x47c>
 8005d9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005da0:	1e6b      	subs	r3, r5, #1
 8005da2:	930c      	str	r3, [sp, #48]	; 0x30
 8005da4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005da8:	2b30      	cmp	r3, #48	; 0x30
 8005daa:	d0f8      	beq.n	8005d9e <_dtoa_r+0x62e>
 8005dac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005db0:	e04a      	b.n	8005e48 <_dtoa_r+0x6d8>
 8005db2:	bf00      	nop
 8005db4:	08008c60 	.word	0x08008c60
 8005db8:	08008c38 	.word	0x08008c38
 8005dbc:	3ff00000 	.word	0x3ff00000
 8005dc0:	40240000 	.word	0x40240000
 8005dc4:	401c0000 	.word	0x401c0000
 8005dc8:	40140000 	.word	0x40140000
 8005dcc:	3fe00000 	.word	0x3fe00000
 8005dd0:	4baf      	ldr	r3, [pc, #700]	; (8006090 <_dtoa_r+0x920>)
 8005dd2:	f7fa fc19 	bl	8000608 <__aeabi_dmul>
 8005dd6:	4606      	mov	r6, r0
 8005dd8:	460f      	mov	r7, r1
 8005dda:	e7ac      	b.n	8005d36 <_dtoa_r+0x5c6>
 8005ddc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005de0:	9d00      	ldr	r5, [sp, #0]
 8005de2:	4642      	mov	r2, r8
 8005de4:	464b      	mov	r3, r9
 8005de6:	4630      	mov	r0, r6
 8005de8:	4639      	mov	r1, r7
 8005dea:	f7fa fd37 	bl	800085c <__aeabi_ddiv>
 8005dee:	f7fa febb 	bl	8000b68 <__aeabi_d2iz>
 8005df2:	9002      	str	r0, [sp, #8]
 8005df4:	f7fa fb9e 	bl	8000534 <__aeabi_i2d>
 8005df8:	4642      	mov	r2, r8
 8005dfa:	464b      	mov	r3, r9
 8005dfc:	f7fa fc04 	bl	8000608 <__aeabi_dmul>
 8005e00:	4602      	mov	r2, r0
 8005e02:	460b      	mov	r3, r1
 8005e04:	4630      	mov	r0, r6
 8005e06:	4639      	mov	r1, r7
 8005e08:	f7fa fa46 	bl	8000298 <__aeabi_dsub>
 8005e0c:	9e02      	ldr	r6, [sp, #8]
 8005e0e:	9f01      	ldr	r7, [sp, #4]
 8005e10:	3630      	adds	r6, #48	; 0x30
 8005e12:	f805 6b01 	strb.w	r6, [r5], #1
 8005e16:	9e00      	ldr	r6, [sp, #0]
 8005e18:	1bae      	subs	r6, r5, r6
 8005e1a:	42b7      	cmp	r7, r6
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	460b      	mov	r3, r1
 8005e20:	d137      	bne.n	8005e92 <_dtoa_r+0x722>
 8005e22:	f7fa fa3b 	bl	800029c <__adddf3>
 8005e26:	4642      	mov	r2, r8
 8005e28:	464b      	mov	r3, r9
 8005e2a:	4606      	mov	r6, r0
 8005e2c:	460f      	mov	r7, r1
 8005e2e:	f7fa fe7b 	bl	8000b28 <__aeabi_dcmpgt>
 8005e32:	b9c8      	cbnz	r0, 8005e68 <_dtoa_r+0x6f8>
 8005e34:	4642      	mov	r2, r8
 8005e36:	464b      	mov	r3, r9
 8005e38:	4630      	mov	r0, r6
 8005e3a:	4639      	mov	r1, r7
 8005e3c:	f7fa fe4c 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e40:	b110      	cbz	r0, 8005e48 <_dtoa_r+0x6d8>
 8005e42:	9b02      	ldr	r3, [sp, #8]
 8005e44:	07d9      	lsls	r1, r3, #31
 8005e46:	d40f      	bmi.n	8005e68 <_dtoa_r+0x6f8>
 8005e48:	4620      	mov	r0, r4
 8005e4a:	4659      	mov	r1, fp
 8005e4c:	f000 fad6 	bl	80063fc <_Bfree>
 8005e50:	2300      	movs	r3, #0
 8005e52:	702b      	strb	r3, [r5, #0]
 8005e54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e56:	f10a 0001 	add.w	r0, sl, #1
 8005e5a:	6018      	str	r0, [r3, #0]
 8005e5c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	f43f acd8 	beq.w	8005814 <_dtoa_r+0xa4>
 8005e64:	601d      	str	r5, [r3, #0]
 8005e66:	e4d5      	b.n	8005814 <_dtoa_r+0xa4>
 8005e68:	f8cd a01c 	str.w	sl, [sp, #28]
 8005e6c:	462b      	mov	r3, r5
 8005e6e:	461d      	mov	r5, r3
 8005e70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e74:	2a39      	cmp	r2, #57	; 0x39
 8005e76:	d108      	bne.n	8005e8a <_dtoa_r+0x71a>
 8005e78:	9a00      	ldr	r2, [sp, #0]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d1f7      	bne.n	8005e6e <_dtoa_r+0x6fe>
 8005e7e:	9a07      	ldr	r2, [sp, #28]
 8005e80:	9900      	ldr	r1, [sp, #0]
 8005e82:	3201      	adds	r2, #1
 8005e84:	9207      	str	r2, [sp, #28]
 8005e86:	2230      	movs	r2, #48	; 0x30
 8005e88:	700a      	strb	r2, [r1, #0]
 8005e8a:	781a      	ldrb	r2, [r3, #0]
 8005e8c:	3201      	adds	r2, #1
 8005e8e:	701a      	strb	r2, [r3, #0]
 8005e90:	e78c      	b.n	8005dac <_dtoa_r+0x63c>
 8005e92:	4b7f      	ldr	r3, [pc, #508]	; (8006090 <_dtoa_r+0x920>)
 8005e94:	2200      	movs	r2, #0
 8005e96:	f7fa fbb7 	bl	8000608 <__aeabi_dmul>
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	4606      	mov	r6, r0
 8005ea0:	460f      	mov	r7, r1
 8005ea2:	f7fa fe19 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ea6:	2800      	cmp	r0, #0
 8005ea8:	d09b      	beq.n	8005de2 <_dtoa_r+0x672>
 8005eaa:	e7cd      	b.n	8005e48 <_dtoa_r+0x6d8>
 8005eac:	9a08      	ldr	r2, [sp, #32]
 8005eae:	2a00      	cmp	r2, #0
 8005eb0:	f000 80c4 	beq.w	800603c <_dtoa_r+0x8cc>
 8005eb4:	9a05      	ldr	r2, [sp, #20]
 8005eb6:	2a01      	cmp	r2, #1
 8005eb8:	f300 80a8 	bgt.w	800600c <_dtoa_r+0x89c>
 8005ebc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005ebe:	2a00      	cmp	r2, #0
 8005ec0:	f000 80a0 	beq.w	8006004 <_dtoa_r+0x894>
 8005ec4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005ec8:	9e06      	ldr	r6, [sp, #24]
 8005eca:	4645      	mov	r5, r8
 8005ecc:	9a04      	ldr	r2, [sp, #16]
 8005ece:	2101      	movs	r1, #1
 8005ed0:	441a      	add	r2, r3
 8005ed2:	4620      	mov	r0, r4
 8005ed4:	4498      	add	r8, r3
 8005ed6:	9204      	str	r2, [sp, #16]
 8005ed8:	f000 fb4c 	bl	8006574 <__i2b>
 8005edc:	4607      	mov	r7, r0
 8005ede:	2d00      	cmp	r5, #0
 8005ee0:	dd0b      	ble.n	8005efa <_dtoa_r+0x78a>
 8005ee2:	9b04      	ldr	r3, [sp, #16]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	dd08      	ble.n	8005efa <_dtoa_r+0x78a>
 8005ee8:	42ab      	cmp	r3, r5
 8005eea:	9a04      	ldr	r2, [sp, #16]
 8005eec:	bfa8      	it	ge
 8005eee:	462b      	movge	r3, r5
 8005ef0:	eba8 0803 	sub.w	r8, r8, r3
 8005ef4:	1aed      	subs	r5, r5, r3
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	9304      	str	r3, [sp, #16]
 8005efa:	9b06      	ldr	r3, [sp, #24]
 8005efc:	b1fb      	cbz	r3, 8005f3e <_dtoa_r+0x7ce>
 8005efe:	9b08      	ldr	r3, [sp, #32]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f000 809f 	beq.w	8006044 <_dtoa_r+0x8d4>
 8005f06:	2e00      	cmp	r6, #0
 8005f08:	dd11      	ble.n	8005f2e <_dtoa_r+0x7be>
 8005f0a:	4639      	mov	r1, r7
 8005f0c:	4632      	mov	r2, r6
 8005f0e:	4620      	mov	r0, r4
 8005f10:	f000 fbec 	bl	80066ec <__pow5mult>
 8005f14:	465a      	mov	r2, fp
 8005f16:	4601      	mov	r1, r0
 8005f18:	4607      	mov	r7, r0
 8005f1a:	4620      	mov	r0, r4
 8005f1c:	f000 fb40 	bl	80065a0 <__multiply>
 8005f20:	4659      	mov	r1, fp
 8005f22:	9007      	str	r0, [sp, #28]
 8005f24:	4620      	mov	r0, r4
 8005f26:	f000 fa69 	bl	80063fc <_Bfree>
 8005f2a:	9b07      	ldr	r3, [sp, #28]
 8005f2c:	469b      	mov	fp, r3
 8005f2e:	9b06      	ldr	r3, [sp, #24]
 8005f30:	1b9a      	subs	r2, r3, r6
 8005f32:	d004      	beq.n	8005f3e <_dtoa_r+0x7ce>
 8005f34:	4659      	mov	r1, fp
 8005f36:	4620      	mov	r0, r4
 8005f38:	f000 fbd8 	bl	80066ec <__pow5mult>
 8005f3c:	4683      	mov	fp, r0
 8005f3e:	2101      	movs	r1, #1
 8005f40:	4620      	mov	r0, r4
 8005f42:	f000 fb17 	bl	8006574 <__i2b>
 8005f46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	4606      	mov	r6, r0
 8005f4c:	dd7c      	ble.n	8006048 <_dtoa_r+0x8d8>
 8005f4e:	461a      	mov	r2, r3
 8005f50:	4601      	mov	r1, r0
 8005f52:	4620      	mov	r0, r4
 8005f54:	f000 fbca 	bl	80066ec <__pow5mult>
 8005f58:	9b05      	ldr	r3, [sp, #20]
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	4606      	mov	r6, r0
 8005f5e:	dd76      	ble.n	800604e <_dtoa_r+0x8de>
 8005f60:	2300      	movs	r3, #0
 8005f62:	9306      	str	r3, [sp, #24]
 8005f64:	6933      	ldr	r3, [r6, #16]
 8005f66:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005f6a:	6918      	ldr	r0, [r3, #16]
 8005f6c:	f000 fab2 	bl	80064d4 <__hi0bits>
 8005f70:	f1c0 0020 	rsb	r0, r0, #32
 8005f74:	9b04      	ldr	r3, [sp, #16]
 8005f76:	4418      	add	r0, r3
 8005f78:	f010 001f 	ands.w	r0, r0, #31
 8005f7c:	f000 8086 	beq.w	800608c <_dtoa_r+0x91c>
 8005f80:	f1c0 0320 	rsb	r3, r0, #32
 8005f84:	2b04      	cmp	r3, #4
 8005f86:	dd7f      	ble.n	8006088 <_dtoa_r+0x918>
 8005f88:	f1c0 001c 	rsb	r0, r0, #28
 8005f8c:	9b04      	ldr	r3, [sp, #16]
 8005f8e:	4403      	add	r3, r0
 8005f90:	4480      	add	r8, r0
 8005f92:	4405      	add	r5, r0
 8005f94:	9304      	str	r3, [sp, #16]
 8005f96:	f1b8 0f00 	cmp.w	r8, #0
 8005f9a:	dd05      	ble.n	8005fa8 <_dtoa_r+0x838>
 8005f9c:	4659      	mov	r1, fp
 8005f9e:	4642      	mov	r2, r8
 8005fa0:	4620      	mov	r0, r4
 8005fa2:	f000 fbfd 	bl	80067a0 <__lshift>
 8005fa6:	4683      	mov	fp, r0
 8005fa8:	9b04      	ldr	r3, [sp, #16]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	dd05      	ble.n	8005fba <_dtoa_r+0x84a>
 8005fae:	4631      	mov	r1, r6
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	4620      	mov	r0, r4
 8005fb4:	f000 fbf4 	bl	80067a0 <__lshift>
 8005fb8:	4606      	mov	r6, r0
 8005fba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d069      	beq.n	8006094 <_dtoa_r+0x924>
 8005fc0:	4631      	mov	r1, r6
 8005fc2:	4658      	mov	r0, fp
 8005fc4:	f000 fc58 	bl	8006878 <__mcmp>
 8005fc8:	2800      	cmp	r0, #0
 8005fca:	da63      	bge.n	8006094 <_dtoa_r+0x924>
 8005fcc:	2300      	movs	r3, #0
 8005fce:	4659      	mov	r1, fp
 8005fd0:	220a      	movs	r2, #10
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	f000 fa34 	bl	8006440 <__multadd>
 8005fd8:	9b08      	ldr	r3, [sp, #32]
 8005fda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005fde:	4683      	mov	fp, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f000 818f 	beq.w	8006304 <_dtoa_r+0xb94>
 8005fe6:	4639      	mov	r1, r7
 8005fe8:	2300      	movs	r3, #0
 8005fea:	220a      	movs	r2, #10
 8005fec:	4620      	mov	r0, r4
 8005fee:	f000 fa27 	bl	8006440 <__multadd>
 8005ff2:	f1b9 0f00 	cmp.w	r9, #0
 8005ff6:	4607      	mov	r7, r0
 8005ff8:	f300 808e 	bgt.w	8006118 <_dtoa_r+0x9a8>
 8005ffc:	9b05      	ldr	r3, [sp, #20]
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	dc50      	bgt.n	80060a4 <_dtoa_r+0x934>
 8006002:	e089      	b.n	8006118 <_dtoa_r+0x9a8>
 8006004:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006006:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800600a:	e75d      	b.n	8005ec8 <_dtoa_r+0x758>
 800600c:	9b01      	ldr	r3, [sp, #4]
 800600e:	1e5e      	subs	r6, r3, #1
 8006010:	9b06      	ldr	r3, [sp, #24]
 8006012:	42b3      	cmp	r3, r6
 8006014:	bfbf      	itttt	lt
 8006016:	9b06      	ldrlt	r3, [sp, #24]
 8006018:	9606      	strlt	r6, [sp, #24]
 800601a:	1af2      	sublt	r2, r6, r3
 800601c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800601e:	bfb6      	itet	lt
 8006020:	189b      	addlt	r3, r3, r2
 8006022:	1b9e      	subge	r6, r3, r6
 8006024:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006026:	9b01      	ldr	r3, [sp, #4]
 8006028:	bfb8      	it	lt
 800602a:	2600      	movlt	r6, #0
 800602c:	2b00      	cmp	r3, #0
 800602e:	bfb5      	itete	lt
 8006030:	eba8 0503 	sublt.w	r5, r8, r3
 8006034:	9b01      	ldrge	r3, [sp, #4]
 8006036:	2300      	movlt	r3, #0
 8006038:	4645      	movge	r5, r8
 800603a:	e747      	b.n	8005ecc <_dtoa_r+0x75c>
 800603c:	9e06      	ldr	r6, [sp, #24]
 800603e:	9f08      	ldr	r7, [sp, #32]
 8006040:	4645      	mov	r5, r8
 8006042:	e74c      	b.n	8005ede <_dtoa_r+0x76e>
 8006044:	9a06      	ldr	r2, [sp, #24]
 8006046:	e775      	b.n	8005f34 <_dtoa_r+0x7c4>
 8006048:	9b05      	ldr	r3, [sp, #20]
 800604a:	2b01      	cmp	r3, #1
 800604c:	dc18      	bgt.n	8006080 <_dtoa_r+0x910>
 800604e:	9b02      	ldr	r3, [sp, #8]
 8006050:	b9b3      	cbnz	r3, 8006080 <_dtoa_r+0x910>
 8006052:	9b03      	ldr	r3, [sp, #12]
 8006054:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006058:	b9a3      	cbnz	r3, 8006084 <_dtoa_r+0x914>
 800605a:	9b03      	ldr	r3, [sp, #12]
 800605c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006060:	0d1b      	lsrs	r3, r3, #20
 8006062:	051b      	lsls	r3, r3, #20
 8006064:	b12b      	cbz	r3, 8006072 <_dtoa_r+0x902>
 8006066:	9b04      	ldr	r3, [sp, #16]
 8006068:	3301      	adds	r3, #1
 800606a:	9304      	str	r3, [sp, #16]
 800606c:	f108 0801 	add.w	r8, r8, #1
 8006070:	2301      	movs	r3, #1
 8006072:	9306      	str	r3, [sp, #24]
 8006074:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006076:	2b00      	cmp	r3, #0
 8006078:	f47f af74 	bne.w	8005f64 <_dtoa_r+0x7f4>
 800607c:	2001      	movs	r0, #1
 800607e:	e779      	b.n	8005f74 <_dtoa_r+0x804>
 8006080:	2300      	movs	r3, #0
 8006082:	e7f6      	b.n	8006072 <_dtoa_r+0x902>
 8006084:	9b02      	ldr	r3, [sp, #8]
 8006086:	e7f4      	b.n	8006072 <_dtoa_r+0x902>
 8006088:	d085      	beq.n	8005f96 <_dtoa_r+0x826>
 800608a:	4618      	mov	r0, r3
 800608c:	301c      	adds	r0, #28
 800608e:	e77d      	b.n	8005f8c <_dtoa_r+0x81c>
 8006090:	40240000 	.word	0x40240000
 8006094:	9b01      	ldr	r3, [sp, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	dc38      	bgt.n	800610c <_dtoa_r+0x99c>
 800609a:	9b05      	ldr	r3, [sp, #20]
 800609c:	2b02      	cmp	r3, #2
 800609e:	dd35      	ble.n	800610c <_dtoa_r+0x99c>
 80060a0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80060a4:	f1b9 0f00 	cmp.w	r9, #0
 80060a8:	d10d      	bne.n	80060c6 <_dtoa_r+0x956>
 80060aa:	4631      	mov	r1, r6
 80060ac:	464b      	mov	r3, r9
 80060ae:	2205      	movs	r2, #5
 80060b0:	4620      	mov	r0, r4
 80060b2:	f000 f9c5 	bl	8006440 <__multadd>
 80060b6:	4601      	mov	r1, r0
 80060b8:	4606      	mov	r6, r0
 80060ba:	4658      	mov	r0, fp
 80060bc:	f000 fbdc 	bl	8006878 <__mcmp>
 80060c0:	2800      	cmp	r0, #0
 80060c2:	f73f adbd 	bgt.w	8005c40 <_dtoa_r+0x4d0>
 80060c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060c8:	9d00      	ldr	r5, [sp, #0]
 80060ca:	ea6f 0a03 	mvn.w	sl, r3
 80060ce:	f04f 0800 	mov.w	r8, #0
 80060d2:	4631      	mov	r1, r6
 80060d4:	4620      	mov	r0, r4
 80060d6:	f000 f991 	bl	80063fc <_Bfree>
 80060da:	2f00      	cmp	r7, #0
 80060dc:	f43f aeb4 	beq.w	8005e48 <_dtoa_r+0x6d8>
 80060e0:	f1b8 0f00 	cmp.w	r8, #0
 80060e4:	d005      	beq.n	80060f2 <_dtoa_r+0x982>
 80060e6:	45b8      	cmp	r8, r7
 80060e8:	d003      	beq.n	80060f2 <_dtoa_r+0x982>
 80060ea:	4641      	mov	r1, r8
 80060ec:	4620      	mov	r0, r4
 80060ee:	f000 f985 	bl	80063fc <_Bfree>
 80060f2:	4639      	mov	r1, r7
 80060f4:	4620      	mov	r0, r4
 80060f6:	f000 f981 	bl	80063fc <_Bfree>
 80060fa:	e6a5      	b.n	8005e48 <_dtoa_r+0x6d8>
 80060fc:	2600      	movs	r6, #0
 80060fe:	4637      	mov	r7, r6
 8006100:	e7e1      	b.n	80060c6 <_dtoa_r+0x956>
 8006102:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006104:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006108:	4637      	mov	r7, r6
 800610a:	e599      	b.n	8005c40 <_dtoa_r+0x4d0>
 800610c:	9b08      	ldr	r3, [sp, #32]
 800610e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006112:	2b00      	cmp	r3, #0
 8006114:	f000 80fd 	beq.w	8006312 <_dtoa_r+0xba2>
 8006118:	2d00      	cmp	r5, #0
 800611a:	dd05      	ble.n	8006128 <_dtoa_r+0x9b8>
 800611c:	4639      	mov	r1, r7
 800611e:	462a      	mov	r2, r5
 8006120:	4620      	mov	r0, r4
 8006122:	f000 fb3d 	bl	80067a0 <__lshift>
 8006126:	4607      	mov	r7, r0
 8006128:	9b06      	ldr	r3, [sp, #24]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d05c      	beq.n	80061e8 <_dtoa_r+0xa78>
 800612e:	6879      	ldr	r1, [r7, #4]
 8006130:	4620      	mov	r0, r4
 8006132:	f000 f923 	bl	800637c <_Balloc>
 8006136:	4605      	mov	r5, r0
 8006138:	b928      	cbnz	r0, 8006146 <_dtoa_r+0x9d6>
 800613a:	4b80      	ldr	r3, [pc, #512]	; (800633c <_dtoa_r+0xbcc>)
 800613c:	4602      	mov	r2, r0
 800613e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006142:	f7ff bb2e 	b.w	80057a2 <_dtoa_r+0x32>
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	3202      	adds	r2, #2
 800614a:	0092      	lsls	r2, r2, #2
 800614c:	f107 010c 	add.w	r1, r7, #12
 8006150:	300c      	adds	r0, #12
 8006152:	f000 f905 	bl	8006360 <memcpy>
 8006156:	2201      	movs	r2, #1
 8006158:	4629      	mov	r1, r5
 800615a:	4620      	mov	r0, r4
 800615c:	f000 fb20 	bl	80067a0 <__lshift>
 8006160:	9b00      	ldr	r3, [sp, #0]
 8006162:	3301      	adds	r3, #1
 8006164:	9301      	str	r3, [sp, #4]
 8006166:	9b00      	ldr	r3, [sp, #0]
 8006168:	444b      	add	r3, r9
 800616a:	9307      	str	r3, [sp, #28]
 800616c:	9b02      	ldr	r3, [sp, #8]
 800616e:	f003 0301 	and.w	r3, r3, #1
 8006172:	46b8      	mov	r8, r7
 8006174:	9306      	str	r3, [sp, #24]
 8006176:	4607      	mov	r7, r0
 8006178:	9b01      	ldr	r3, [sp, #4]
 800617a:	4631      	mov	r1, r6
 800617c:	3b01      	subs	r3, #1
 800617e:	4658      	mov	r0, fp
 8006180:	9302      	str	r3, [sp, #8]
 8006182:	f7ff fa69 	bl	8005658 <quorem>
 8006186:	4603      	mov	r3, r0
 8006188:	3330      	adds	r3, #48	; 0x30
 800618a:	9004      	str	r0, [sp, #16]
 800618c:	4641      	mov	r1, r8
 800618e:	4658      	mov	r0, fp
 8006190:	9308      	str	r3, [sp, #32]
 8006192:	f000 fb71 	bl	8006878 <__mcmp>
 8006196:	463a      	mov	r2, r7
 8006198:	4681      	mov	r9, r0
 800619a:	4631      	mov	r1, r6
 800619c:	4620      	mov	r0, r4
 800619e:	f000 fb87 	bl	80068b0 <__mdiff>
 80061a2:	68c2      	ldr	r2, [r0, #12]
 80061a4:	9b08      	ldr	r3, [sp, #32]
 80061a6:	4605      	mov	r5, r0
 80061a8:	bb02      	cbnz	r2, 80061ec <_dtoa_r+0xa7c>
 80061aa:	4601      	mov	r1, r0
 80061ac:	4658      	mov	r0, fp
 80061ae:	f000 fb63 	bl	8006878 <__mcmp>
 80061b2:	9b08      	ldr	r3, [sp, #32]
 80061b4:	4602      	mov	r2, r0
 80061b6:	4629      	mov	r1, r5
 80061b8:	4620      	mov	r0, r4
 80061ba:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80061be:	f000 f91d 	bl	80063fc <_Bfree>
 80061c2:	9b05      	ldr	r3, [sp, #20]
 80061c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061c6:	9d01      	ldr	r5, [sp, #4]
 80061c8:	ea43 0102 	orr.w	r1, r3, r2
 80061cc:	9b06      	ldr	r3, [sp, #24]
 80061ce:	430b      	orrs	r3, r1
 80061d0:	9b08      	ldr	r3, [sp, #32]
 80061d2:	d10d      	bne.n	80061f0 <_dtoa_r+0xa80>
 80061d4:	2b39      	cmp	r3, #57	; 0x39
 80061d6:	d029      	beq.n	800622c <_dtoa_r+0xabc>
 80061d8:	f1b9 0f00 	cmp.w	r9, #0
 80061dc:	dd01      	ble.n	80061e2 <_dtoa_r+0xa72>
 80061de:	9b04      	ldr	r3, [sp, #16]
 80061e0:	3331      	adds	r3, #49	; 0x31
 80061e2:	9a02      	ldr	r2, [sp, #8]
 80061e4:	7013      	strb	r3, [r2, #0]
 80061e6:	e774      	b.n	80060d2 <_dtoa_r+0x962>
 80061e8:	4638      	mov	r0, r7
 80061ea:	e7b9      	b.n	8006160 <_dtoa_r+0x9f0>
 80061ec:	2201      	movs	r2, #1
 80061ee:	e7e2      	b.n	80061b6 <_dtoa_r+0xa46>
 80061f0:	f1b9 0f00 	cmp.w	r9, #0
 80061f4:	db06      	blt.n	8006204 <_dtoa_r+0xa94>
 80061f6:	9905      	ldr	r1, [sp, #20]
 80061f8:	ea41 0909 	orr.w	r9, r1, r9
 80061fc:	9906      	ldr	r1, [sp, #24]
 80061fe:	ea59 0101 	orrs.w	r1, r9, r1
 8006202:	d120      	bne.n	8006246 <_dtoa_r+0xad6>
 8006204:	2a00      	cmp	r2, #0
 8006206:	ddec      	ble.n	80061e2 <_dtoa_r+0xa72>
 8006208:	4659      	mov	r1, fp
 800620a:	2201      	movs	r2, #1
 800620c:	4620      	mov	r0, r4
 800620e:	9301      	str	r3, [sp, #4]
 8006210:	f000 fac6 	bl	80067a0 <__lshift>
 8006214:	4631      	mov	r1, r6
 8006216:	4683      	mov	fp, r0
 8006218:	f000 fb2e 	bl	8006878 <__mcmp>
 800621c:	2800      	cmp	r0, #0
 800621e:	9b01      	ldr	r3, [sp, #4]
 8006220:	dc02      	bgt.n	8006228 <_dtoa_r+0xab8>
 8006222:	d1de      	bne.n	80061e2 <_dtoa_r+0xa72>
 8006224:	07da      	lsls	r2, r3, #31
 8006226:	d5dc      	bpl.n	80061e2 <_dtoa_r+0xa72>
 8006228:	2b39      	cmp	r3, #57	; 0x39
 800622a:	d1d8      	bne.n	80061de <_dtoa_r+0xa6e>
 800622c:	9a02      	ldr	r2, [sp, #8]
 800622e:	2339      	movs	r3, #57	; 0x39
 8006230:	7013      	strb	r3, [r2, #0]
 8006232:	462b      	mov	r3, r5
 8006234:	461d      	mov	r5, r3
 8006236:	3b01      	subs	r3, #1
 8006238:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800623c:	2a39      	cmp	r2, #57	; 0x39
 800623e:	d050      	beq.n	80062e2 <_dtoa_r+0xb72>
 8006240:	3201      	adds	r2, #1
 8006242:	701a      	strb	r2, [r3, #0]
 8006244:	e745      	b.n	80060d2 <_dtoa_r+0x962>
 8006246:	2a00      	cmp	r2, #0
 8006248:	dd03      	ble.n	8006252 <_dtoa_r+0xae2>
 800624a:	2b39      	cmp	r3, #57	; 0x39
 800624c:	d0ee      	beq.n	800622c <_dtoa_r+0xabc>
 800624e:	3301      	adds	r3, #1
 8006250:	e7c7      	b.n	80061e2 <_dtoa_r+0xa72>
 8006252:	9a01      	ldr	r2, [sp, #4]
 8006254:	9907      	ldr	r1, [sp, #28]
 8006256:	f802 3c01 	strb.w	r3, [r2, #-1]
 800625a:	428a      	cmp	r2, r1
 800625c:	d02a      	beq.n	80062b4 <_dtoa_r+0xb44>
 800625e:	4659      	mov	r1, fp
 8006260:	2300      	movs	r3, #0
 8006262:	220a      	movs	r2, #10
 8006264:	4620      	mov	r0, r4
 8006266:	f000 f8eb 	bl	8006440 <__multadd>
 800626a:	45b8      	cmp	r8, r7
 800626c:	4683      	mov	fp, r0
 800626e:	f04f 0300 	mov.w	r3, #0
 8006272:	f04f 020a 	mov.w	r2, #10
 8006276:	4641      	mov	r1, r8
 8006278:	4620      	mov	r0, r4
 800627a:	d107      	bne.n	800628c <_dtoa_r+0xb1c>
 800627c:	f000 f8e0 	bl	8006440 <__multadd>
 8006280:	4680      	mov	r8, r0
 8006282:	4607      	mov	r7, r0
 8006284:	9b01      	ldr	r3, [sp, #4]
 8006286:	3301      	adds	r3, #1
 8006288:	9301      	str	r3, [sp, #4]
 800628a:	e775      	b.n	8006178 <_dtoa_r+0xa08>
 800628c:	f000 f8d8 	bl	8006440 <__multadd>
 8006290:	4639      	mov	r1, r7
 8006292:	4680      	mov	r8, r0
 8006294:	2300      	movs	r3, #0
 8006296:	220a      	movs	r2, #10
 8006298:	4620      	mov	r0, r4
 800629a:	f000 f8d1 	bl	8006440 <__multadd>
 800629e:	4607      	mov	r7, r0
 80062a0:	e7f0      	b.n	8006284 <_dtoa_r+0xb14>
 80062a2:	f1b9 0f00 	cmp.w	r9, #0
 80062a6:	9a00      	ldr	r2, [sp, #0]
 80062a8:	bfcc      	ite	gt
 80062aa:	464d      	movgt	r5, r9
 80062ac:	2501      	movle	r5, #1
 80062ae:	4415      	add	r5, r2
 80062b0:	f04f 0800 	mov.w	r8, #0
 80062b4:	4659      	mov	r1, fp
 80062b6:	2201      	movs	r2, #1
 80062b8:	4620      	mov	r0, r4
 80062ba:	9301      	str	r3, [sp, #4]
 80062bc:	f000 fa70 	bl	80067a0 <__lshift>
 80062c0:	4631      	mov	r1, r6
 80062c2:	4683      	mov	fp, r0
 80062c4:	f000 fad8 	bl	8006878 <__mcmp>
 80062c8:	2800      	cmp	r0, #0
 80062ca:	dcb2      	bgt.n	8006232 <_dtoa_r+0xac2>
 80062cc:	d102      	bne.n	80062d4 <_dtoa_r+0xb64>
 80062ce:	9b01      	ldr	r3, [sp, #4]
 80062d0:	07db      	lsls	r3, r3, #31
 80062d2:	d4ae      	bmi.n	8006232 <_dtoa_r+0xac2>
 80062d4:	462b      	mov	r3, r5
 80062d6:	461d      	mov	r5, r3
 80062d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80062dc:	2a30      	cmp	r2, #48	; 0x30
 80062de:	d0fa      	beq.n	80062d6 <_dtoa_r+0xb66>
 80062e0:	e6f7      	b.n	80060d2 <_dtoa_r+0x962>
 80062e2:	9a00      	ldr	r2, [sp, #0]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d1a5      	bne.n	8006234 <_dtoa_r+0xac4>
 80062e8:	f10a 0a01 	add.w	sl, sl, #1
 80062ec:	2331      	movs	r3, #49	; 0x31
 80062ee:	e779      	b.n	80061e4 <_dtoa_r+0xa74>
 80062f0:	4b13      	ldr	r3, [pc, #76]	; (8006340 <_dtoa_r+0xbd0>)
 80062f2:	f7ff baaf 	b.w	8005854 <_dtoa_r+0xe4>
 80062f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f47f aa86 	bne.w	800580a <_dtoa_r+0x9a>
 80062fe:	4b11      	ldr	r3, [pc, #68]	; (8006344 <_dtoa_r+0xbd4>)
 8006300:	f7ff baa8 	b.w	8005854 <_dtoa_r+0xe4>
 8006304:	f1b9 0f00 	cmp.w	r9, #0
 8006308:	dc03      	bgt.n	8006312 <_dtoa_r+0xba2>
 800630a:	9b05      	ldr	r3, [sp, #20]
 800630c:	2b02      	cmp	r3, #2
 800630e:	f73f aec9 	bgt.w	80060a4 <_dtoa_r+0x934>
 8006312:	9d00      	ldr	r5, [sp, #0]
 8006314:	4631      	mov	r1, r6
 8006316:	4658      	mov	r0, fp
 8006318:	f7ff f99e 	bl	8005658 <quorem>
 800631c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006320:	f805 3b01 	strb.w	r3, [r5], #1
 8006324:	9a00      	ldr	r2, [sp, #0]
 8006326:	1aaa      	subs	r2, r5, r2
 8006328:	4591      	cmp	r9, r2
 800632a:	ddba      	ble.n	80062a2 <_dtoa_r+0xb32>
 800632c:	4659      	mov	r1, fp
 800632e:	2300      	movs	r3, #0
 8006330:	220a      	movs	r2, #10
 8006332:	4620      	mov	r0, r4
 8006334:	f000 f884 	bl	8006440 <__multadd>
 8006338:	4683      	mov	fp, r0
 800633a:	e7eb      	b.n	8006314 <_dtoa_r+0xba4>
 800633c:	08008bc3 	.word	0x08008bc3
 8006340:	08008b1c 	.word	0x08008b1c
 8006344:	08008b40 	.word	0x08008b40

08006348 <_localeconv_r>:
 8006348:	4800      	ldr	r0, [pc, #0]	; (800634c <_localeconv_r+0x4>)
 800634a:	4770      	bx	lr
 800634c:	20000160 	.word	0x20000160

08006350 <malloc>:
 8006350:	4b02      	ldr	r3, [pc, #8]	; (800635c <malloc+0xc>)
 8006352:	4601      	mov	r1, r0
 8006354:	6818      	ldr	r0, [r3, #0]
 8006356:	f000 bbef 	b.w	8006b38 <_malloc_r>
 800635a:	bf00      	nop
 800635c:	2000000c 	.word	0x2000000c

08006360 <memcpy>:
 8006360:	440a      	add	r2, r1
 8006362:	4291      	cmp	r1, r2
 8006364:	f100 33ff 	add.w	r3, r0, #4294967295
 8006368:	d100      	bne.n	800636c <memcpy+0xc>
 800636a:	4770      	bx	lr
 800636c:	b510      	push	{r4, lr}
 800636e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006372:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006376:	4291      	cmp	r1, r2
 8006378:	d1f9      	bne.n	800636e <memcpy+0xe>
 800637a:	bd10      	pop	{r4, pc}

0800637c <_Balloc>:
 800637c:	b570      	push	{r4, r5, r6, lr}
 800637e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006380:	4604      	mov	r4, r0
 8006382:	460d      	mov	r5, r1
 8006384:	b976      	cbnz	r6, 80063a4 <_Balloc+0x28>
 8006386:	2010      	movs	r0, #16
 8006388:	f7ff ffe2 	bl	8006350 <malloc>
 800638c:	4602      	mov	r2, r0
 800638e:	6260      	str	r0, [r4, #36]	; 0x24
 8006390:	b920      	cbnz	r0, 800639c <_Balloc+0x20>
 8006392:	4b18      	ldr	r3, [pc, #96]	; (80063f4 <_Balloc+0x78>)
 8006394:	4818      	ldr	r0, [pc, #96]	; (80063f8 <_Balloc+0x7c>)
 8006396:	2166      	movs	r1, #102	; 0x66
 8006398:	f000 fd94 	bl	8006ec4 <__assert_func>
 800639c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80063a0:	6006      	str	r6, [r0, #0]
 80063a2:	60c6      	str	r6, [r0, #12]
 80063a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80063a6:	68f3      	ldr	r3, [r6, #12]
 80063a8:	b183      	cbz	r3, 80063cc <_Balloc+0x50>
 80063aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80063b2:	b9b8      	cbnz	r0, 80063e4 <_Balloc+0x68>
 80063b4:	2101      	movs	r1, #1
 80063b6:	fa01 f605 	lsl.w	r6, r1, r5
 80063ba:	1d72      	adds	r2, r6, #5
 80063bc:	0092      	lsls	r2, r2, #2
 80063be:	4620      	mov	r0, r4
 80063c0:	f000 fb5a 	bl	8006a78 <_calloc_r>
 80063c4:	b160      	cbz	r0, 80063e0 <_Balloc+0x64>
 80063c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80063ca:	e00e      	b.n	80063ea <_Balloc+0x6e>
 80063cc:	2221      	movs	r2, #33	; 0x21
 80063ce:	2104      	movs	r1, #4
 80063d0:	4620      	mov	r0, r4
 80063d2:	f000 fb51 	bl	8006a78 <_calloc_r>
 80063d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063d8:	60f0      	str	r0, [r6, #12]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d1e4      	bne.n	80063aa <_Balloc+0x2e>
 80063e0:	2000      	movs	r0, #0
 80063e2:	bd70      	pop	{r4, r5, r6, pc}
 80063e4:	6802      	ldr	r2, [r0, #0]
 80063e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80063ea:	2300      	movs	r3, #0
 80063ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80063f0:	e7f7      	b.n	80063e2 <_Balloc+0x66>
 80063f2:	bf00      	nop
 80063f4:	08008b4d 	.word	0x08008b4d
 80063f8:	08008bd4 	.word	0x08008bd4

080063fc <_Bfree>:
 80063fc:	b570      	push	{r4, r5, r6, lr}
 80063fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006400:	4605      	mov	r5, r0
 8006402:	460c      	mov	r4, r1
 8006404:	b976      	cbnz	r6, 8006424 <_Bfree+0x28>
 8006406:	2010      	movs	r0, #16
 8006408:	f7ff ffa2 	bl	8006350 <malloc>
 800640c:	4602      	mov	r2, r0
 800640e:	6268      	str	r0, [r5, #36]	; 0x24
 8006410:	b920      	cbnz	r0, 800641c <_Bfree+0x20>
 8006412:	4b09      	ldr	r3, [pc, #36]	; (8006438 <_Bfree+0x3c>)
 8006414:	4809      	ldr	r0, [pc, #36]	; (800643c <_Bfree+0x40>)
 8006416:	218a      	movs	r1, #138	; 0x8a
 8006418:	f000 fd54 	bl	8006ec4 <__assert_func>
 800641c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006420:	6006      	str	r6, [r0, #0]
 8006422:	60c6      	str	r6, [r0, #12]
 8006424:	b13c      	cbz	r4, 8006436 <_Bfree+0x3a>
 8006426:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006428:	6862      	ldr	r2, [r4, #4]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006430:	6021      	str	r1, [r4, #0]
 8006432:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006436:	bd70      	pop	{r4, r5, r6, pc}
 8006438:	08008b4d 	.word	0x08008b4d
 800643c:	08008bd4 	.word	0x08008bd4

08006440 <__multadd>:
 8006440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006444:	690e      	ldr	r6, [r1, #16]
 8006446:	4607      	mov	r7, r0
 8006448:	4698      	mov	r8, r3
 800644a:	460c      	mov	r4, r1
 800644c:	f101 0014 	add.w	r0, r1, #20
 8006450:	2300      	movs	r3, #0
 8006452:	6805      	ldr	r5, [r0, #0]
 8006454:	b2a9      	uxth	r1, r5
 8006456:	fb02 8101 	mla	r1, r2, r1, r8
 800645a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800645e:	0c2d      	lsrs	r5, r5, #16
 8006460:	fb02 c505 	mla	r5, r2, r5, ip
 8006464:	b289      	uxth	r1, r1
 8006466:	3301      	adds	r3, #1
 8006468:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800646c:	429e      	cmp	r6, r3
 800646e:	f840 1b04 	str.w	r1, [r0], #4
 8006472:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006476:	dcec      	bgt.n	8006452 <__multadd+0x12>
 8006478:	f1b8 0f00 	cmp.w	r8, #0
 800647c:	d022      	beq.n	80064c4 <__multadd+0x84>
 800647e:	68a3      	ldr	r3, [r4, #8]
 8006480:	42b3      	cmp	r3, r6
 8006482:	dc19      	bgt.n	80064b8 <__multadd+0x78>
 8006484:	6861      	ldr	r1, [r4, #4]
 8006486:	4638      	mov	r0, r7
 8006488:	3101      	adds	r1, #1
 800648a:	f7ff ff77 	bl	800637c <_Balloc>
 800648e:	4605      	mov	r5, r0
 8006490:	b928      	cbnz	r0, 800649e <__multadd+0x5e>
 8006492:	4602      	mov	r2, r0
 8006494:	4b0d      	ldr	r3, [pc, #52]	; (80064cc <__multadd+0x8c>)
 8006496:	480e      	ldr	r0, [pc, #56]	; (80064d0 <__multadd+0x90>)
 8006498:	21b5      	movs	r1, #181	; 0xb5
 800649a:	f000 fd13 	bl	8006ec4 <__assert_func>
 800649e:	6922      	ldr	r2, [r4, #16]
 80064a0:	3202      	adds	r2, #2
 80064a2:	f104 010c 	add.w	r1, r4, #12
 80064a6:	0092      	lsls	r2, r2, #2
 80064a8:	300c      	adds	r0, #12
 80064aa:	f7ff ff59 	bl	8006360 <memcpy>
 80064ae:	4621      	mov	r1, r4
 80064b0:	4638      	mov	r0, r7
 80064b2:	f7ff ffa3 	bl	80063fc <_Bfree>
 80064b6:	462c      	mov	r4, r5
 80064b8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80064bc:	3601      	adds	r6, #1
 80064be:	f8c3 8014 	str.w	r8, [r3, #20]
 80064c2:	6126      	str	r6, [r4, #16]
 80064c4:	4620      	mov	r0, r4
 80064c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064ca:	bf00      	nop
 80064cc:	08008bc3 	.word	0x08008bc3
 80064d0:	08008bd4 	.word	0x08008bd4

080064d4 <__hi0bits>:
 80064d4:	0c03      	lsrs	r3, r0, #16
 80064d6:	041b      	lsls	r3, r3, #16
 80064d8:	b9d3      	cbnz	r3, 8006510 <__hi0bits+0x3c>
 80064da:	0400      	lsls	r0, r0, #16
 80064dc:	2310      	movs	r3, #16
 80064de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80064e2:	bf04      	itt	eq
 80064e4:	0200      	lsleq	r0, r0, #8
 80064e6:	3308      	addeq	r3, #8
 80064e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80064ec:	bf04      	itt	eq
 80064ee:	0100      	lsleq	r0, r0, #4
 80064f0:	3304      	addeq	r3, #4
 80064f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80064f6:	bf04      	itt	eq
 80064f8:	0080      	lsleq	r0, r0, #2
 80064fa:	3302      	addeq	r3, #2
 80064fc:	2800      	cmp	r0, #0
 80064fe:	db05      	blt.n	800650c <__hi0bits+0x38>
 8006500:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006504:	f103 0301 	add.w	r3, r3, #1
 8006508:	bf08      	it	eq
 800650a:	2320      	moveq	r3, #32
 800650c:	4618      	mov	r0, r3
 800650e:	4770      	bx	lr
 8006510:	2300      	movs	r3, #0
 8006512:	e7e4      	b.n	80064de <__hi0bits+0xa>

08006514 <__lo0bits>:
 8006514:	6803      	ldr	r3, [r0, #0]
 8006516:	f013 0207 	ands.w	r2, r3, #7
 800651a:	4601      	mov	r1, r0
 800651c:	d00b      	beq.n	8006536 <__lo0bits+0x22>
 800651e:	07da      	lsls	r2, r3, #31
 8006520:	d424      	bmi.n	800656c <__lo0bits+0x58>
 8006522:	0798      	lsls	r0, r3, #30
 8006524:	bf49      	itett	mi
 8006526:	085b      	lsrmi	r3, r3, #1
 8006528:	089b      	lsrpl	r3, r3, #2
 800652a:	2001      	movmi	r0, #1
 800652c:	600b      	strmi	r3, [r1, #0]
 800652e:	bf5c      	itt	pl
 8006530:	600b      	strpl	r3, [r1, #0]
 8006532:	2002      	movpl	r0, #2
 8006534:	4770      	bx	lr
 8006536:	b298      	uxth	r0, r3
 8006538:	b9b0      	cbnz	r0, 8006568 <__lo0bits+0x54>
 800653a:	0c1b      	lsrs	r3, r3, #16
 800653c:	2010      	movs	r0, #16
 800653e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006542:	bf04      	itt	eq
 8006544:	0a1b      	lsreq	r3, r3, #8
 8006546:	3008      	addeq	r0, #8
 8006548:	071a      	lsls	r2, r3, #28
 800654a:	bf04      	itt	eq
 800654c:	091b      	lsreq	r3, r3, #4
 800654e:	3004      	addeq	r0, #4
 8006550:	079a      	lsls	r2, r3, #30
 8006552:	bf04      	itt	eq
 8006554:	089b      	lsreq	r3, r3, #2
 8006556:	3002      	addeq	r0, #2
 8006558:	07da      	lsls	r2, r3, #31
 800655a:	d403      	bmi.n	8006564 <__lo0bits+0x50>
 800655c:	085b      	lsrs	r3, r3, #1
 800655e:	f100 0001 	add.w	r0, r0, #1
 8006562:	d005      	beq.n	8006570 <__lo0bits+0x5c>
 8006564:	600b      	str	r3, [r1, #0]
 8006566:	4770      	bx	lr
 8006568:	4610      	mov	r0, r2
 800656a:	e7e8      	b.n	800653e <__lo0bits+0x2a>
 800656c:	2000      	movs	r0, #0
 800656e:	4770      	bx	lr
 8006570:	2020      	movs	r0, #32
 8006572:	4770      	bx	lr

08006574 <__i2b>:
 8006574:	b510      	push	{r4, lr}
 8006576:	460c      	mov	r4, r1
 8006578:	2101      	movs	r1, #1
 800657a:	f7ff feff 	bl	800637c <_Balloc>
 800657e:	4602      	mov	r2, r0
 8006580:	b928      	cbnz	r0, 800658e <__i2b+0x1a>
 8006582:	4b05      	ldr	r3, [pc, #20]	; (8006598 <__i2b+0x24>)
 8006584:	4805      	ldr	r0, [pc, #20]	; (800659c <__i2b+0x28>)
 8006586:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800658a:	f000 fc9b 	bl	8006ec4 <__assert_func>
 800658e:	2301      	movs	r3, #1
 8006590:	6144      	str	r4, [r0, #20]
 8006592:	6103      	str	r3, [r0, #16]
 8006594:	bd10      	pop	{r4, pc}
 8006596:	bf00      	nop
 8006598:	08008bc3 	.word	0x08008bc3
 800659c:	08008bd4 	.word	0x08008bd4

080065a0 <__multiply>:
 80065a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a4:	4614      	mov	r4, r2
 80065a6:	690a      	ldr	r2, [r1, #16]
 80065a8:	6923      	ldr	r3, [r4, #16]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	bfb8      	it	lt
 80065ae:	460b      	movlt	r3, r1
 80065b0:	460d      	mov	r5, r1
 80065b2:	bfbc      	itt	lt
 80065b4:	4625      	movlt	r5, r4
 80065b6:	461c      	movlt	r4, r3
 80065b8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80065bc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80065c0:	68ab      	ldr	r3, [r5, #8]
 80065c2:	6869      	ldr	r1, [r5, #4]
 80065c4:	eb0a 0709 	add.w	r7, sl, r9
 80065c8:	42bb      	cmp	r3, r7
 80065ca:	b085      	sub	sp, #20
 80065cc:	bfb8      	it	lt
 80065ce:	3101      	addlt	r1, #1
 80065d0:	f7ff fed4 	bl	800637c <_Balloc>
 80065d4:	b930      	cbnz	r0, 80065e4 <__multiply+0x44>
 80065d6:	4602      	mov	r2, r0
 80065d8:	4b42      	ldr	r3, [pc, #264]	; (80066e4 <__multiply+0x144>)
 80065da:	4843      	ldr	r0, [pc, #268]	; (80066e8 <__multiply+0x148>)
 80065dc:	f240 115d 	movw	r1, #349	; 0x15d
 80065e0:	f000 fc70 	bl	8006ec4 <__assert_func>
 80065e4:	f100 0614 	add.w	r6, r0, #20
 80065e8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80065ec:	4633      	mov	r3, r6
 80065ee:	2200      	movs	r2, #0
 80065f0:	4543      	cmp	r3, r8
 80065f2:	d31e      	bcc.n	8006632 <__multiply+0x92>
 80065f4:	f105 0c14 	add.w	ip, r5, #20
 80065f8:	f104 0314 	add.w	r3, r4, #20
 80065fc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006600:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006604:	9202      	str	r2, [sp, #8]
 8006606:	ebac 0205 	sub.w	r2, ip, r5
 800660a:	3a15      	subs	r2, #21
 800660c:	f022 0203 	bic.w	r2, r2, #3
 8006610:	3204      	adds	r2, #4
 8006612:	f105 0115 	add.w	r1, r5, #21
 8006616:	458c      	cmp	ip, r1
 8006618:	bf38      	it	cc
 800661a:	2204      	movcc	r2, #4
 800661c:	9201      	str	r2, [sp, #4]
 800661e:	9a02      	ldr	r2, [sp, #8]
 8006620:	9303      	str	r3, [sp, #12]
 8006622:	429a      	cmp	r2, r3
 8006624:	d808      	bhi.n	8006638 <__multiply+0x98>
 8006626:	2f00      	cmp	r7, #0
 8006628:	dc55      	bgt.n	80066d6 <__multiply+0x136>
 800662a:	6107      	str	r7, [r0, #16]
 800662c:	b005      	add	sp, #20
 800662e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006632:	f843 2b04 	str.w	r2, [r3], #4
 8006636:	e7db      	b.n	80065f0 <__multiply+0x50>
 8006638:	f8b3 a000 	ldrh.w	sl, [r3]
 800663c:	f1ba 0f00 	cmp.w	sl, #0
 8006640:	d020      	beq.n	8006684 <__multiply+0xe4>
 8006642:	f105 0e14 	add.w	lr, r5, #20
 8006646:	46b1      	mov	r9, r6
 8006648:	2200      	movs	r2, #0
 800664a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800664e:	f8d9 b000 	ldr.w	fp, [r9]
 8006652:	b2a1      	uxth	r1, r4
 8006654:	fa1f fb8b 	uxth.w	fp, fp
 8006658:	fb0a b101 	mla	r1, sl, r1, fp
 800665c:	4411      	add	r1, r2
 800665e:	f8d9 2000 	ldr.w	r2, [r9]
 8006662:	0c24      	lsrs	r4, r4, #16
 8006664:	0c12      	lsrs	r2, r2, #16
 8006666:	fb0a 2404 	mla	r4, sl, r4, r2
 800666a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800666e:	b289      	uxth	r1, r1
 8006670:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006674:	45f4      	cmp	ip, lr
 8006676:	f849 1b04 	str.w	r1, [r9], #4
 800667a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800667e:	d8e4      	bhi.n	800664a <__multiply+0xaa>
 8006680:	9901      	ldr	r1, [sp, #4]
 8006682:	5072      	str	r2, [r6, r1]
 8006684:	9a03      	ldr	r2, [sp, #12]
 8006686:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800668a:	3304      	adds	r3, #4
 800668c:	f1b9 0f00 	cmp.w	r9, #0
 8006690:	d01f      	beq.n	80066d2 <__multiply+0x132>
 8006692:	6834      	ldr	r4, [r6, #0]
 8006694:	f105 0114 	add.w	r1, r5, #20
 8006698:	46b6      	mov	lr, r6
 800669a:	f04f 0a00 	mov.w	sl, #0
 800669e:	880a      	ldrh	r2, [r1, #0]
 80066a0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80066a4:	fb09 b202 	mla	r2, r9, r2, fp
 80066a8:	4492      	add	sl, r2
 80066aa:	b2a4      	uxth	r4, r4
 80066ac:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80066b0:	f84e 4b04 	str.w	r4, [lr], #4
 80066b4:	f851 4b04 	ldr.w	r4, [r1], #4
 80066b8:	f8be 2000 	ldrh.w	r2, [lr]
 80066bc:	0c24      	lsrs	r4, r4, #16
 80066be:	fb09 2404 	mla	r4, r9, r4, r2
 80066c2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80066c6:	458c      	cmp	ip, r1
 80066c8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80066cc:	d8e7      	bhi.n	800669e <__multiply+0xfe>
 80066ce:	9a01      	ldr	r2, [sp, #4]
 80066d0:	50b4      	str	r4, [r6, r2]
 80066d2:	3604      	adds	r6, #4
 80066d4:	e7a3      	b.n	800661e <__multiply+0x7e>
 80066d6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1a5      	bne.n	800662a <__multiply+0x8a>
 80066de:	3f01      	subs	r7, #1
 80066e0:	e7a1      	b.n	8006626 <__multiply+0x86>
 80066e2:	bf00      	nop
 80066e4:	08008bc3 	.word	0x08008bc3
 80066e8:	08008bd4 	.word	0x08008bd4

080066ec <__pow5mult>:
 80066ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066f0:	4615      	mov	r5, r2
 80066f2:	f012 0203 	ands.w	r2, r2, #3
 80066f6:	4606      	mov	r6, r0
 80066f8:	460f      	mov	r7, r1
 80066fa:	d007      	beq.n	800670c <__pow5mult+0x20>
 80066fc:	4c25      	ldr	r4, [pc, #148]	; (8006794 <__pow5mult+0xa8>)
 80066fe:	3a01      	subs	r2, #1
 8006700:	2300      	movs	r3, #0
 8006702:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006706:	f7ff fe9b 	bl	8006440 <__multadd>
 800670a:	4607      	mov	r7, r0
 800670c:	10ad      	asrs	r5, r5, #2
 800670e:	d03d      	beq.n	800678c <__pow5mult+0xa0>
 8006710:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006712:	b97c      	cbnz	r4, 8006734 <__pow5mult+0x48>
 8006714:	2010      	movs	r0, #16
 8006716:	f7ff fe1b 	bl	8006350 <malloc>
 800671a:	4602      	mov	r2, r0
 800671c:	6270      	str	r0, [r6, #36]	; 0x24
 800671e:	b928      	cbnz	r0, 800672c <__pow5mult+0x40>
 8006720:	4b1d      	ldr	r3, [pc, #116]	; (8006798 <__pow5mult+0xac>)
 8006722:	481e      	ldr	r0, [pc, #120]	; (800679c <__pow5mult+0xb0>)
 8006724:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006728:	f000 fbcc 	bl	8006ec4 <__assert_func>
 800672c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006730:	6004      	str	r4, [r0, #0]
 8006732:	60c4      	str	r4, [r0, #12]
 8006734:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006738:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800673c:	b94c      	cbnz	r4, 8006752 <__pow5mult+0x66>
 800673e:	f240 2171 	movw	r1, #625	; 0x271
 8006742:	4630      	mov	r0, r6
 8006744:	f7ff ff16 	bl	8006574 <__i2b>
 8006748:	2300      	movs	r3, #0
 800674a:	f8c8 0008 	str.w	r0, [r8, #8]
 800674e:	4604      	mov	r4, r0
 8006750:	6003      	str	r3, [r0, #0]
 8006752:	f04f 0900 	mov.w	r9, #0
 8006756:	07eb      	lsls	r3, r5, #31
 8006758:	d50a      	bpl.n	8006770 <__pow5mult+0x84>
 800675a:	4639      	mov	r1, r7
 800675c:	4622      	mov	r2, r4
 800675e:	4630      	mov	r0, r6
 8006760:	f7ff ff1e 	bl	80065a0 <__multiply>
 8006764:	4639      	mov	r1, r7
 8006766:	4680      	mov	r8, r0
 8006768:	4630      	mov	r0, r6
 800676a:	f7ff fe47 	bl	80063fc <_Bfree>
 800676e:	4647      	mov	r7, r8
 8006770:	106d      	asrs	r5, r5, #1
 8006772:	d00b      	beq.n	800678c <__pow5mult+0xa0>
 8006774:	6820      	ldr	r0, [r4, #0]
 8006776:	b938      	cbnz	r0, 8006788 <__pow5mult+0x9c>
 8006778:	4622      	mov	r2, r4
 800677a:	4621      	mov	r1, r4
 800677c:	4630      	mov	r0, r6
 800677e:	f7ff ff0f 	bl	80065a0 <__multiply>
 8006782:	6020      	str	r0, [r4, #0]
 8006784:	f8c0 9000 	str.w	r9, [r0]
 8006788:	4604      	mov	r4, r0
 800678a:	e7e4      	b.n	8006756 <__pow5mult+0x6a>
 800678c:	4638      	mov	r0, r7
 800678e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006792:	bf00      	nop
 8006794:	08008d28 	.word	0x08008d28
 8006798:	08008b4d 	.word	0x08008b4d
 800679c:	08008bd4 	.word	0x08008bd4

080067a0 <__lshift>:
 80067a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067a4:	460c      	mov	r4, r1
 80067a6:	6849      	ldr	r1, [r1, #4]
 80067a8:	6923      	ldr	r3, [r4, #16]
 80067aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80067ae:	68a3      	ldr	r3, [r4, #8]
 80067b0:	4607      	mov	r7, r0
 80067b2:	4691      	mov	r9, r2
 80067b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80067b8:	f108 0601 	add.w	r6, r8, #1
 80067bc:	42b3      	cmp	r3, r6
 80067be:	db0b      	blt.n	80067d8 <__lshift+0x38>
 80067c0:	4638      	mov	r0, r7
 80067c2:	f7ff fddb 	bl	800637c <_Balloc>
 80067c6:	4605      	mov	r5, r0
 80067c8:	b948      	cbnz	r0, 80067de <__lshift+0x3e>
 80067ca:	4602      	mov	r2, r0
 80067cc:	4b28      	ldr	r3, [pc, #160]	; (8006870 <__lshift+0xd0>)
 80067ce:	4829      	ldr	r0, [pc, #164]	; (8006874 <__lshift+0xd4>)
 80067d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80067d4:	f000 fb76 	bl	8006ec4 <__assert_func>
 80067d8:	3101      	adds	r1, #1
 80067da:	005b      	lsls	r3, r3, #1
 80067dc:	e7ee      	b.n	80067bc <__lshift+0x1c>
 80067de:	2300      	movs	r3, #0
 80067e0:	f100 0114 	add.w	r1, r0, #20
 80067e4:	f100 0210 	add.w	r2, r0, #16
 80067e8:	4618      	mov	r0, r3
 80067ea:	4553      	cmp	r3, sl
 80067ec:	db33      	blt.n	8006856 <__lshift+0xb6>
 80067ee:	6920      	ldr	r0, [r4, #16]
 80067f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80067f4:	f104 0314 	add.w	r3, r4, #20
 80067f8:	f019 091f 	ands.w	r9, r9, #31
 80067fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006800:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006804:	d02b      	beq.n	800685e <__lshift+0xbe>
 8006806:	f1c9 0e20 	rsb	lr, r9, #32
 800680a:	468a      	mov	sl, r1
 800680c:	2200      	movs	r2, #0
 800680e:	6818      	ldr	r0, [r3, #0]
 8006810:	fa00 f009 	lsl.w	r0, r0, r9
 8006814:	4302      	orrs	r2, r0
 8006816:	f84a 2b04 	str.w	r2, [sl], #4
 800681a:	f853 2b04 	ldr.w	r2, [r3], #4
 800681e:	459c      	cmp	ip, r3
 8006820:	fa22 f20e 	lsr.w	r2, r2, lr
 8006824:	d8f3      	bhi.n	800680e <__lshift+0x6e>
 8006826:	ebac 0304 	sub.w	r3, ip, r4
 800682a:	3b15      	subs	r3, #21
 800682c:	f023 0303 	bic.w	r3, r3, #3
 8006830:	3304      	adds	r3, #4
 8006832:	f104 0015 	add.w	r0, r4, #21
 8006836:	4584      	cmp	ip, r0
 8006838:	bf38      	it	cc
 800683a:	2304      	movcc	r3, #4
 800683c:	50ca      	str	r2, [r1, r3]
 800683e:	b10a      	cbz	r2, 8006844 <__lshift+0xa4>
 8006840:	f108 0602 	add.w	r6, r8, #2
 8006844:	3e01      	subs	r6, #1
 8006846:	4638      	mov	r0, r7
 8006848:	612e      	str	r6, [r5, #16]
 800684a:	4621      	mov	r1, r4
 800684c:	f7ff fdd6 	bl	80063fc <_Bfree>
 8006850:	4628      	mov	r0, r5
 8006852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006856:	f842 0f04 	str.w	r0, [r2, #4]!
 800685a:	3301      	adds	r3, #1
 800685c:	e7c5      	b.n	80067ea <__lshift+0x4a>
 800685e:	3904      	subs	r1, #4
 8006860:	f853 2b04 	ldr.w	r2, [r3], #4
 8006864:	f841 2f04 	str.w	r2, [r1, #4]!
 8006868:	459c      	cmp	ip, r3
 800686a:	d8f9      	bhi.n	8006860 <__lshift+0xc0>
 800686c:	e7ea      	b.n	8006844 <__lshift+0xa4>
 800686e:	bf00      	nop
 8006870:	08008bc3 	.word	0x08008bc3
 8006874:	08008bd4 	.word	0x08008bd4

08006878 <__mcmp>:
 8006878:	b530      	push	{r4, r5, lr}
 800687a:	6902      	ldr	r2, [r0, #16]
 800687c:	690c      	ldr	r4, [r1, #16]
 800687e:	1b12      	subs	r2, r2, r4
 8006880:	d10e      	bne.n	80068a0 <__mcmp+0x28>
 8006882:	f100 0314 	add.w	r3, r0, #20
 8006886:	3114      	adds	r1, #20
 8006888:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800688c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006890:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006894:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006898:	42a5      	cmp	r5, r4
 800689a:	d003      	beq.n	80068a4 <__mcmp+0x2c>
 800689c:	d305      	bcc.n	80068aa <__mcmp+0x32>
 800689e:	2201      	movs	r2, #1
 80068a0:	4610      	mov	r0, r2
 80068a2:	bd30      	pop	{r4, r5, pc}
 80068a4:	4283      	cmp	r3, r0
 80068a6:	d3f3      	bcc.n	8006890 <__mcmp+0x18>
 80068a8:	e7fa      	b.n	80068a0 <__mcmp+0x28>
 80068aa:	f04f 32ff 	mov.w	r2, #4294967295
 80068ae:	e7f7      	b.n	80068a0 <__mcmp+0x28>

080068b0 <__mdiff>:
 80068b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068b4:	460c      	mov	r4, r1
 80068b6:	4606      	mov	r6, r0
 80068b8:	4611      	mov	r1, r2
 80068ba:	4620      	mov	r0, r4
 80068bc:	4617      	mov	r7, r2
 80068be:	f7ff ffdb 	bl	8006878 <__mcmp>
 80068c2:	1e05      	subs	r5, r0, #0
 80068c4:	d110      	bne.n	80068e8 <__mdiff+0x38>
 80068c6:	4629      	mov	r1, r5
 80068c8:	4630      	mov	r0, r6
 80068ca:	f7ff fd57 	bl	800637c <_Balloc>
 80068ce:	b930      	cbnz	r0, 80068de <__mdiff+0x2e>
 80068d0:	4b39      	ldr	r3, [pc, #228]	; (80069b8 <__mdiff+0x108>)
 80068d2:	4602      	mov	r2, r0
 80068d4:	f240 2132 	movw	r1, #562	; 0x232
 80068d8:	4838      	ldr	r0, [pc, #224]	; (80069bc <__mdiff+0x10c>)
 80068da:	f000 faf3 	bl	8006ec4 <__assert_func>
 80068de:	2301      	movs	r3, #1
 80068e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80068e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068e8:	bfa4      	itt	ge
 80068ea:	463b      	movge	r3, r7
 80068ec:	4627      	movge	r7, r4
 80068ee:	4630      	mov	r0, r6
 80068f0:	6879      	ldr	r1, [r7, #4]
 80068f2:	bfa6      	itte	ge
 80068f4:	461c      	movge	r4, r3
 80068f6:	2500      	movge	r5, #0
 80068f8:	2501      	movlt	r5, #1
 80068fa:	f7ff fd3f 	bl	800637c <_Balloc>
 80068fe:	b920      	cbnz	r0, 800690a <__mdiff+0x5a>
 8006900:	4b2d      	ldr	r3, [pc, #180]	; (80069b8 <__mdiff+0x108>)
 8006902:	4602      	mov	r2, r0
 8006904:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006908:	e7e6      	b.n	80068d8 <__mdiff+0x28>
 800690a:	693e      	ldr	r6, [r7, #16]
 800690c:	60c5      	str	r5, [r0, #12]
 800690e:	6925      	ldr	r5, [r4, #16]
 8006910:	f107 0114 	add.w	r1, r7, #20
 8006914:	f104 0914 	add.w	r9, r4, #20
 8006918:	f100 0e14 	add.w	lr, r0, #20
 800691c:	f107 0210 	add.w	r2, r7, #16
 8006920:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006924:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006928:	46f2      	mov	sl, lr
 800692a:	2700      	movs	r7, #0
 800692c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006930:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006934:	fa1f f883 	uxth.w	r8, r3
 8006938:	fa17 f78b 	uxtah	r7, r7, fp
 800693c:	0c1b      	lsrs	r3, r3, #16
 800693e:	eba7 0808 	sub.w	r8, r7, r8
 8006942:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006946:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800694a:	fa1f f888 	uxth.w	r8, r8
 800694e:	141f      	asrs	r7, r3, #16
 8006950:	454d      	cmp	r5, r9
 8006952:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006956:	f84a 3b04 	str.w	r3, [sl], #4
 800695a:	d8e7      	bhi.n	800692c <__mdiff+0x7c>
 800695c:	1b2b      	subs	r3, r5, r4
 800695e:	3b15      	subs	r3, #21
 8006960:	f023 0303 	bic.w	r3, r3, #3
 8006964:	3304      	adds	r3, #4
 8006966:	3415      	adds	r4, #21
 8006968:	42a5      	cmp	r5, r4
 800696a:	bf38      	it	cc
 800696c:	2304      	movcc	r3, #4
 800696e:	4419      	add	r1, r3
 8006970:	4473      	add	r3, lr
 8006972:	469e      	mov	lr, r3
 8006974:	460d      	mov	r5, r1
 8006976:	4565      	cmp	r5, ip
 8006978:	d30e      	bcc.n	8006998 <__mdiff+0xe8>
 800697a:	f10c 0203 	add.w	r2, ip, #3
 800697e:	1a52      	subs	r2, r2, r1
 8006980:	f022 0203 	bic.w	r2, r2, #3
 8006984:	3903      	subs	r1, #3
 8006986:	458c      	cmp	ip, r1
 8006988:	bf38      	it	cc
 800698a:	2200      	movcc	r2, #0
 800698c:	441a      	add	r2, r3
 800698e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006992:	b17b      	cbz	r3, 80069b4 <__mdiff+0x104>
 8006994:	6106      	str	r6, [r0, #16]
 8006996:	e7a5      	b.n	80068e4 <__mdiff+0x34>
 8006998:	f855 8b04 	ldr.w	r8, [r5], #4
 800699c:	fa17 f488 	uxtah	r4, r7, r8
 80069a0:	1422      	asrs	r2, r4, #16
 80069a2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80069a6:	b2a4      	uxth	r4, r4
 80069a8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80069ac:	f84e 4b04 	str.w	r4, [lr], #4
 80069b0:	1417      	asrs	r7, r2, #16
 80069b2:	e7e0      	b.n	8006976 <__mdiff+0xc6>
 80069b4:	3e01      	subs	r6, #1
 80069b6:	e7ea      	b.n	800698e <__mdiff+0xde>
 80069b8:	08008bc3 	.word	0x08008bc3
 80069bc:	08008bd4 	.word	0x08008bd4

080069c0 <__d2b>:
 80069c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80069c4:	4689      	mov	r9, r1
 80069c6:	2101      	movs	r1, #1
 80069c8:	ec57 6b10 	vmov	r6, r7, d0
 80069cc:	4690      	mov	r8, r2
 80069ce:	f7ff fcd5 	bl	800637c <_Balloc>
 80069d2:	4604      	mov	r4, r0
 80069d4:	b930      	cbnz	r0, 80069e4 <__d2b+0x24>
 80069d6:	4602      	mov	r2, r0
 80069d8:	4b25      	ldr	r3, [pc, #148]	; (8006a70 <__d2b+0xb0>)
 80069da:	4826      	ldr	r0, [pc, #152]	; (8006a74 <__d2b+0xb4>)
 80069dc:	f240 310a 	movw	r1, #778	; 0x30a
 80069e0:	f000 fa70 	bl	8006ec4 <__assert_func>
 80069e4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80069e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80069ec:	bb35      	cbnz	r5, 8006a3c <__d2b+0x7c>
 80069ee:	2e00      	cmp	r6, #0
 80069f0:	9301      	str	r3, [sp, #4]
 80069f2:	d028      	beq.n	8006a46 <__d2b+0x86>
 80069f4:	4668      	mov	r0, sp
 80069f6:	9600      	str	r6, [sp, #0]
 80069f8:	f7ff fd8c 	bl	8006514 <__lo0bits>
 80069fc:	9900      	ldr	r1, [sp, #0]
 80069fe:	b300      	cbz	r0, 8006a42 <__d2b+0x82>
 8006a00:	9a01      	ldr	r2, [sp, #4]
 8006a02:	f1c0 0320 	rsb	r3, r0, #32
 8006a06:	fa02 f303 	lsl.w	r3, r2, r3
 8006a0a:	430b      	orrs	r3, r1
 8006a0c:	40c2      	lsrs	r2, r0
 8006a0e:	6163      	str	r3, [r4, #20]
 8006a10:	9201      	str	r2, [sp, #4]
 8006a12:	9b01      	ldr	r3, [sp, #4]
 8006a14:	61a3      	str	r3, [r4, #24]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	bf14      	ite	ne
 8006a1a:	2202      	movne	r2, #2
 8006a1c:	2201      	moveq	r2, #1
 8006a1e:	6122      	str	r2, [r4, #16]
 8006a20:	b1d5      	cbz	r5, 8006a58 <__d2b+0x98>
 8006a22:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006a26:	4405      	add	r5, r0
 8006a28:	f8c9 5000 	str.w	r5, [r9]
 8006a2c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006a30:	f8c8 0000 	str.w	r0, [r8]
 8006a34:	4620      	mov	r0, r4
 8006a36:	b003      	add	sp, #12
 8006a38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a40:	e7d5      	b.n	80069ee <__d2b+0x2e>
 8006a42:	6161      	str	r1, [r4, #20]
 8006a44:	e7e5      	b.n	8006a12 <__d2b+0x52>
 8006a46:	a801      	add	r0, sp, #4
 8006a48:	f7ff fd64 	bl	8006514 <__lo0bits>
 8006a4c:	9b01      	ldr	r3, [sp, #4]
 8006a4e:	6163      	str	r3, [r4, #20]
 8006a50:	2201      	movs	r2, #1
 8006a52:	6122      	str	r2, [r4, #16]
 8006a54:	3020      	adds	r0, #32
 8006a56:	e7e3      	b.n	8006a20 <__d2b+0x60>
 8006a58:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006a5c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006a60:	f8c9 0000 	str.w	r0, [r9]
 8006a64:	6918      	ldr	r0, [r3, #16]
 8006a66:	f7ff fd35 	bl	80064d4 <__hi0bits>
 8006a6a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006a6e:	e7df      	b.n	8006a30 <__d2b+0x70>
 8006a70:	08008bc3 	.word	0x08008bc3
 8006a74:	08008bd4 	.word	0x08008bd4

08006a78 <_calloc_r>:
 8006a78:	b513      	push	{r0, r1, r4, lr}
 8006a7a:	434a      	muls	r2, r1
 8006a7c:	4611      	mov	r1, r2
 8006a7e:	9201      	str	r2, [sp, #4]
 8006a80:	f000 f85a 	bl	8006b38 <_malloc_r>
 8006a84:	4604      	mov	r4, r0
 8006a86:	b118      	cbz	r0, 8006a90 <_calloc_r+0x18>
 8006a88:	9a01      	ldr	r2, [sp, #4]
 8006a8a:	2100      	movs	r1, #0
 8006a8c:	f7fe f952 	bl	8004d34 <memset>
 8006a90:	4620      	mov	r0, r4
 8006a92:	b002      	add	sp, #8
 8006a94:	bd10      	pop	{r4, pc}
	...

08006a98 <_free_r>:
 8006a98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a9a:	2900      	cmp	r1, #0
 8006a9c:	d048      	beq.n	8006b30 <_free_r+0x98>
 8006a9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006aa2:	9001      	str	r0, [sp, #4]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	f1a1 0404 	sub.w	r4, r1, #4
 8006aaa:	bfb8      	it	lt
 8006aac:	18e4      	addlt	r4, r4, r3
 8006aae:	f000 fa65 	bl	8006f7c <__malloc_lock>
 8006ab2:	4a20      	ldr	r2, [pc, #128]	; (8006b34 <_free_r+0x9c>)
 8006ab4:	9801      	ldr	r0, [sp, #4]
 8006ab6:	6813      	ldr	r3, [r2, #0]
 8006ab8:	4615      	mov	r5, r2
 8006aba:	b933      	cbnz	r3, 8006aca <_free_r+0x32>
 8006abc:	6063      	str	r3, [r4, #4]
 8006abe:	6014      	str	r4, [r2, #0]
 8006ac0:	b003      	add	sp, #12
 8006ac2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ac6:	f000 ba5f 	b.w	8006f88 <__malloc_unlock>
 8006aca:	42a3      	cmp	r3, r4
 8006acc:	d90b      	bls.n	8006ae6 <_free_r+0x4e>
 8006ace:	6821      	ldr	r1, [r4, #0]
 8006ad0:	1862      	adds	r2, r4, r1
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	bf04      	itt	eq
 8006ad6:	681a      	ldreq	r2, [r3, #0]
 8006ad8:	685b      	ldreq	r3, [r3, #4]
 8006ada:	6063      	str	r3, [r4, #4]
 8006adc:	bf04      	itt	eq
 8006ade:	1852      	addeq	r2, r2, r1
 8006ae0:	6022      	streq	r2, [r4, #0]
 8006ae2:	602c      	str	r4, [r5, #0]
 8006ae4:	e7ec      	b.n	8006ac0 <_free_r+0x28>
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	b10b      	cbz	r3, 8006af0 <_free_r+0x58>
 8006aec:	42a3      	cmp	r3, r4
 8006aee:	d9fa      	bls.n	8006ae6 <_free_r+0x4e>
 8006af0:	6811      	ldr	r1, [r2, #0]
 8006af2:	1855      	adds	r5, r2, r1
 8006af4:	42a5      	cmp	r5, r4
 8006af6:	d10b      	bne.n	8006b10 <_free_r+0x78>
 8006af8:	6824      	ldr	r4, [r4, #0]
 8006afa:	4421      	add	r1, r4
 8006afc:	1854      	adds	r4, r2, r1
 8006afe:	42a3      	cmp	r3, r4
 8006b00:	6011      	str	r1, [r2, #0]
 8006b02:	d1dd      	bne.n	8006ac0 <_free_r+0x28>
 8006b04:	681c      	ldr	r4, [r3, #0]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	6053      	str	r3, [r2, #4]
 8006b0a:	4421      	add	r1, r4
 8006b0c:	6011      	str	r1, [r2, #0]
 8006b0e:	e7d7      	b.n	8006ac0 <_free_r+0x28>
 8006b10:	d902      	bls.n	8006b18 <_free_r+0x80>
 8006b12:	230c      	movs	r3, #12
 8006b14:	6003      	str	r3, [r0, #0]
 8006b16:	e7d3      	b.n	8006ac0 <_free_r+0x28>
 8006b18:	6825      	ldr	r5, [r4, #0]
 8006b1a:	1961      	adds	r1, r4, r5
 8006b1c:	428b      	cmp	r3, r1
 8006b1e:	bf04      	itt	eq
 8006b20:	6819      	ldreq	r1, [r3, #0]
 8006b22:	685b      	ldreq	r3, [r3, #4]
 8006b24:	6063      	str	r3, [r4, #4]
 8006b26:	bf04      	itt	eq
 8006b28:	1949      	addeq	r1, r1, r5
 8006b2a:	6021      	streq	r1, [r4, #0]
 8006b2c:	6054      	str	r4, [r2, #4]
 8006b2e:	e7c7      	b.n	8006ac0 <_free_r+0x28>
 8006b30:	b003      	add	sp, #12
 8006b32:	bd30      	pop	{r4, r5, pc}
 8006b34:	20000200 	.word	0x20000200

08006b38 <_malloc_r>:
 8006b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b3a:	1ccd      	adds	r5, r1, #3
 8006b3c:	f025 0503 	bic.w	r5, r5, #3
 8006b40:	3508      	adds	r5, #8
 8006b42:	2d0c      	cmp	r5, #12
 8006b44:	bf38      	it	cc
 8006b46:	250c      	movcc	r5, #12
 8006b48:	2d00      	cmp	r5, #0
 8006b4a:	4606      	mov	r6, r0
 8006b4c:	db01      	blt.n	8006b52 <_malloc_r+0x1a>
 8006b4e:	42a9      	cmp	r1, r5
 8006b50:	d903      	bls.n	8006b5a <_malloc_r+0x22>
 8006b52:	230c      	movs	r3, #12
 8006b54:	6033      	str	r3, [r6, #0]
 8006b56:	2000      	movs	r0, #0
 8006b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b5a:	f000 fa0f 	bl	8006f7c <__malloc_lock>
 8006b5e:	4921      	ldr	r1, [pc, #132]	; (8006be4 <_malloc_r+0xac>)
 8006b60:	680a      	ldr	r2, [r1, #0]
 8006b62:	4614      	mov	r4, r2
 8006b64:	b99c      	cbnz	r4, 8006b8e <_malloc_r+0x56>
 8006b66:	4f20      	ldr	r7, [pc, #128]	; (8006be8 <_malloc_r+0xb0>)
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	b923      	cbnz	r3, 8006b76 <_malloc_r+0x3e>
 8006b6c:	4621      	mov	r1, r4
 8006b6e:	4630      	mov	r0, r6
 8006b70:	f000 f998 	bl	8006ea4 <_sbrk_r>
 8006b74:	6038      	str	r0, [r7, #0]
 8006b76:	4629      	mov	r1, r5
 8006b78:	4630      	mov	r0, r6
 8006b7a:	f000 f993 	bl	8006ea4 <_sbrk_r>
 8006b7e:	1c43      	adds	r3, r0, #1
 8006b80:	d123      	bne.n	8006bca <_malloc_r+0x92>
 8006b82:	230c      	movs	r3, #12
 8006b84:	6033      	str	r3, [r6, #0]
 8006b86:	4630      	mov	r0, r6
 8006b88:	f000 f9fe 	bl	8006f88 <__malloc_unlock>
 8006b8c:	e7e3      	b.n	8006b56 <_malloc_r+0x1e>
 8006b8e:	6823      	ldr	r3, [r4, #0]
 8006b90:	1b5b      	subs	r3, r3, r5
 8006b92:	d417      	bmi.n	8006bc4 <_malloc_r+0x8c>
 8006b94:	2b0b      	cmp	r3, #11
 8006b96:	d903      	bls.n	8006ba0 <_malloc_r+0x68>
 8006b98:	6023      	str	r3, [r4, #0]
 8006b9a:	441c      	add	r4, r3
 8006b9c:	6025      	str	r5, [r4, #0]
 8006b9e:	e004      	b.n	8006baa <_malloc_r+0x72>
 8006ba0:	6863      	ldr	r3, [r4, #4]
 8006ba2:	42a2      	cmp	r2, r4
 8006ba4:	bf0c      	ite	eq
 8006ba6:	600b      	streq	r3, [r1, #0]
 8006ba8:	6053      	strne	r3, [r2, #4]
 8006baa:	4630      	mov	r0, r6
 8006bac:	f000 f9ec 	bl	8006f88 <__malloc_unlock>
 8006bb0:	f104 000b 	add.w	r0, r4, #11
 8006bb4:	1d23      	adds	r3, r4, #4
 8006bb6:	f020 0007 	bic.w	r0, r0, #7
 8006bba:	1ac2      	subs	r2, r0, r3
 8006bbc:	d0cc      	beq.n	8006b58 <_malloc_r+0x20>
 8006bbe:	1a1b      	subs	r3, r3, r0
 8006bc0:	50a3      	str	r3, [r4, r2]
 8006bc2:	e7c9      	b.n	8006b58 <_malloc_r+0x20>
 8006bc4:	4622      	mov	r2, r4
 8006bc6:	6864      	ldr	r4, [r4, #4]
 8006bc8:	e7cc      	b.n	8006b64 <_malloc_r+0x2c>
 8006bca:	1cc4      	adds	r4, r0, #3
 8006bcc:	f024 0403 	bic.w	r4, r4, #3
 8006bd0:	42a0      	cmp	r0, r4
 8006bd2:	d0e3      	beq.n	8006b9c <_malloc_r+0x64>
 8006bd4:	1a21      	subs	r1, r4, r0
 8006bd6:	4630      	mov	r0, r6
 8006bd8:	f000 f964 	bl	8006ea4 <_sbrk_r>
 8006bdc:	3001      	adds	r0, #1
 8006bde:	d1dd      	bne.n	8006b9c <_malloc_r+0x64>
 8006be0:	e7cf      	b.n	8006b82 <_malloc_r+0x4a>
 8006be2:	bf00      	nop
 8006be4:	20000200 	.word	0x20000200
 8006be8:	20000204 	.word	0x20000204

08006bec <__ssputs_r>:
 8006bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bf0:	688e      	ldr	r6, [r1, #8]
 8006bf2:	429e      	cmp	r6, r3
 8006bf4:	4682      	mov	sl, r0
 8006bf6:	460c      	mov	r4, r1
 8006bf8:	4690      	mov	r8, r2
 8006bfa:	461f      	mov	r7, r3
 8006bfc:	d838      	bhi.n	8006c70 <__ssputs_r+0x84>
 8006bfe:	898a      	ldrh	r2, [r1, #12]
 8006c00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c04:	d032      	beq.n	8006c6c <__ssputs_r+0x80>
 8006c06:	6825      	ldr	r5, [r4, #0]
 8006c08:	6909      	ldr	r1, [r1, #16]
 8006c0a:	eba5 0901 	sub.w	r9, r5, r1
 8006c0e:	6965      	ldr	r5, [r4, #20]
 8006c10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c18:	3301      	adds	r3, #1
 8006c1a:	444b      	add	r3, r9
 8006c1c:	106d      	asrs	r5, r5, #1
 8006c1e:	429d      	cmp	r5, r3
 8006c20:	bf38      	it	cc
 8006c22:	461d      	movcc	r5, r3
 8006c24:	0553      	lsls	r3, r2, #21
 8006c26:	d531      	bpl.n	8006c8c <__ssputs_r+0xa0>
 8006c28:	4629      	mov	r1, r5
 8006c2a:	f7ff ff85 	bl	8006b38 <_malloc_r>
 8006c2e:	4606      	mov	r6, r0
 8006c30:	b950      	cbnz	r0, 8006c48 <__ssputs_r+0x5c>
 8006c32:	230c      	movs	r3, #12
 8006c34:	f8ca 3000 	str.w	r3, [sl]
 8006c38:	89a3      	ldrh	r3, [r4, #12]
 8006c3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c3e:	81a3      	strh	r3, [r4, #12]
 8006c40:	f04f 30ff 	mov.w	r0, #4294967295
 8006c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c48:	6921      	ldr	r1, [r4, #16]
 8006c4a:	464a      	mov	r2, r9
 8006c4c:	f7ff fb88 	bl	8006360 <memcpy>
 8006c50:	89a3      	ldrh	r3, [r4, #12]
 8006c52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c5a:	81a3      	strh	r3, [r4, #12]
 8006c5c:	6126      	str	r6, [r4, #16]
 8006c5e:	6165      	str	r5, [r4, #20]
 8006c60:	444e      	add	r6, r9
 8006c62:	eba5 0509 	sub.w	r5, r5, r9
 8006c66:	6026      	str	r6, [r4, #0]
 8006c68:	60a5      	str	r5, [r4, #8]
 8006c6a:	463e      	mov	r6, r7
 8006c6c:	42be      	cmp	r6, r7
 8006c6e:	d900      	bls.n	8006c72 <__ssputs_r+0x86>
 8006c70:	463e      	mov	r6, r7
 8006c72:	4632      	mov	r2, r6
 8006c74:	6820      	ldr	r0, [r4, #0]
 8006c76:	4641      	mov	r1, r8
 8006c78:	f000 f966 	bl	8006f48 <memmove>
 8006c7c:	68a3      	ldr	r3, [r4, #8]
 8006c7e:	6822      	ldr	r2, [r4, #0]
 8006c80:	1b9b      	subs	r3, r3, r6
 8006c82:	4432      	add	r2, r6
 8006c84:	60a3      	str	r3, [r4, #8]
 8006c86:	6022      	str	r2, [r4, #0]
 8006c88:	2000      	movs	r0, #0
 8006c8a:	e7db      	b.n	8006c44 <__ssputs_r+0x58>
 8006c8c:	462a      	mov	r2, r5
 8006c8e:	f000 f981 	bl	8006f94 <_realloc_r>
 8006c92:	4606      	mov	r6, r0
 8006c94:	2800      	cmp	r0, #0
 8006c96:	d1e1      	bne.n	8006c5c <__ssputs_r+0x70>
 8006c98:	6921      	ldr	r1, [r4, #16]
 8006c9a:	4650      	mov	r0, sl
 8006c9c:	f7ff fefc 	bl	8006a98 <_free_r>
 8006ca0:	e7c7      	b.n	8006c32 <__ssputs_r+0x46>
	...

08006ca4 <_svfiprintf_r>:
 8006ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ca8:	4698      	mov	r8, r3
 8006caa:	898b      	ldrh	r3, [r1, #12]
 8006cac:	061b      	lsls	r3, r3, #24
 8006cae:	b09d      	sub	sp, #116	; 0x74
 8006cb0:	4607      	mov	r7, r0
 8006cb2:	460d      	mov	r5, r1
 8006cb4:	4614      	mov	r4, r2
 8006cb6:	d50e      	bpl.n	8006cd6 <_svfiprintf_r+0x32>
 8006cb8:	690b      	ldr	r3, [r1, #16]
 8006cba:	b963      	cbnz	r3, 8006cd6 <_svfiprintf_r+0x32>
 8006cbc:	2140      	movs	r1, #64	; 0x40
 8006cbe:	f7ff ff3b 	bl	8006b38 <_malloc_r>
 8006cc2:	6028      	str	r0, [r5, #0]
 8006cc4:	6128      	str	r0, [r5, #16]
 8006cc6:	b920      	cbnz	r0, 8006cd2 <_svfiprintf_r+0x2e>
 8006cc8:	230c      	movs	r3, #12
 8006cca:	603b      	str	r3, [r7, #0]
 8006ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd0:	e0d1      	b.n	8006e76 <_svfiprintf_r+0x1d2>
 8006cd2:	2340      	movs	r3, #64	; 0x40
 8006cd4:	616b      	str	r3, [r5, #20]
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	9309      	str	r3, [sp, #36]	; 0x24
 8006cda:	2320      	movs	r3, #32
 8006cdc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ce0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ce4:	2330      	movs	r3, #48	; 0x30
 8006ce6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006e90 <_svfiprintf_r+0x1ec>
 8006cea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006cee:	f04f 0901 	mov.w	r9, #1
 8006cf2:	4623      	mov	r3, r4
 8006cf4:	469a      	mov	sl, r3
 8006cf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cfa:	b10a      	cbz	r2, 8006d00 <_svfiprintf_r+0x5c>
 8006cfc:	2a25      	cmp	r2, #37	; 0x25
 8006cfe:	d1f9      	bne.n	8006cf4 <_svfiprintf_r+0x50>
 8006d00:	ebba 0b04 	subs.w	fp, sl, r4
 8006d04:	d00b      	beq.n	8006d1e <_svfiprintf_r+0x7a>
 8006d06:	465b      	mov	r3, fp
 8006d08:	4622      	mov	r2, r4
 8006d0a:	4629      	mov	r1, r5
 8006d0c:	4638      	mov	r0, r7
 8006d0e:	f7ff ff6d 	bl	8006bec <__ssputs_r>
 8006d12:	3001      	adds	r0, #1
 8006d14:	f000 80aa 	beq.w	8006e6c <_svfiprintf_r+0x1c8>
 8006d18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d1a:	445a      	add	r2, fp
 8006d1c:	9209      	str	r2, [sp, #36]	; 0x24
 8006d1e:	f89a 3000 	ldrb.w	r3, [sl]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	f000 80a2 	beq.w	8006e6c <_svfiprintf_r+0x1c8>
 8006d28:	2300      	movs	r3, #0
 8006d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d32:	f10a 0a01 	add.w	sl, sl, #1
 8006d36:	9304      	str	r3, [sp, #16]
 8006d38:	9307      	str	r3, [sp, #28]
 8006d3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d3e:	931a      	str	r3, [sp, #104]	; 0x68
 8006d40:	4654      	mov	r4, sl
 8006d42:	2205      	movs	r2, #5
 8006d44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d48:	4851      	ldr	r0, [pc, #324]	; (8006e90 <_svfiprintf_r+0x1ec>)
 8006d4a:	f7f9 fa51 	bl	80001f0 <memchr>
 8006d4e:	9a04      	ldr	r2, [sp, #16]
 8006d50:	b9d8      	cbnz	r0, 8006d8a <_svfiprintf_r+0xe6>
 8006d52:	06d0      	lsls	r0, r2, #27
 8006d54:	bf44      	itt	mi
 8006d56:	2320      	movmi	r3, #32
 8006d58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d5c:	0711      	lsls	r1, r2, #28
 8006d5e:	bf44      	itt	mi
 8006d60:	232b      	movmi	r3, #43	; 0x2b
 8006d62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d66:	f89a 3000 	ldrb.w	r3, [sl]
 8006d6a:	2b2a      	cmp	r3, #42	; 0x2a
 8006d6c:	d015      	beq.n	8006d9a <_svfiprintf_r+0xf6>
 8006d6e:	9a07      	ldr	r2, [sp, #28]
 8006d70:	4654      	mov	r4, sl
 8006d72:	2000      	movs	r0, #0
 8006d74:	f04f 0c0a 	mov.w	ip, #10
 8006d78:	4621      	mov	r1, r4
 8006d7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d7e:	3b30      	subs	r3, #48	; 0x30
 8006d80:	2b09      	cmp	r3, #9
 8006d82:	d94e      	bls.n	8006e22 <_svfiprintf_r+0x17e>
 8006d84:	b1b0      	cbz	r0, 8006db4 <_svfiprintf_r+0x110>
 8006d86:	9207      	str	r2, [sp, #28]
 8006d88:	e014      	b.n	8006db4 <_svfiprintf_r+0x110>
 8006d8a:	eba0 0308 	sub.w	r3, r0, r8
 8006d8e:	fa09 f303 	lsl.w	r3, r9, r3
 8006d92:	4313      	orrs	r3, r2
 8006d94:	9304      	str	r3, [sp, #16]
 8006d96:	46a2      	mov	sl, r4
 8006d98:	e7d2      	b.n	8006d40 <_svfiprintf_r+0x9c>
 8006d9a:	9b03      	ldr	r3, [sp, #12]
 8006d9c:	1d19      	adds	r1, r3, #4
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	9103      	str	r1, [sp, #12]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	bfbb      	ittet	lt
 8006da6:	425b      	neglt	r3, r3
 8006da8:	f042 0202 	orrlt.w	r2, r2, #2
 8006dac:	9307      	strge	r3, [sp, #28]
 8006dae:	9307      	strlt	r3, [sp, #28]
 8006db0:	bfb8      	it	lt
 8006db2:	9204      	strlt	r2, [sp, #16]
 8006db4:	7823      	ldrb	r3, [r4, #0]
 8006db6:	2b2e      	cmp	r3, #46	; 0x2e
 8006db8:	d10c      	bne.n	8006dd4 <_svfiprintf_r+0x130>
 8006dba:	7863      	ldrb	r3, [r4, #1]
 8006dbc:	2b2a      	cmp	r3, #42	; 0x2a
 8006dbe:	d135      	bne.n	8006e2c <_svfiprintf_r+0x188>
 8006dc0:	9b03      	ldr	r3, [sp, #12]
 8006dc2:	1d1a      	adds	r2, r3, #4
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	9203      	str	r2, [sp, #12]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	bfb8      	it	lt
 8006dcc:	f04f 33ff 	movlt.w	r3, #4294967295
 8006dd0:	3402      	adds	r4, #2
 8006dd2:	9305      	str	r3, [sp, #20]
 8006dd4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006ea0 <_svfiprintf_r+0x1fc>
 8006dd8:	7821      	ldrb	r1, [r4, #0]
 8006dda:	2203      	movs	r2, #3
 8006ddc:	4650      	mov	r0, sl
 8006dde:	f7f9 fa07 	bl	80001f0 <memchr>
 8006de2:	b140      	cbz	r0, 8006df6 <_svfiprintf_r+0x152>
 8006de4:	2340      	movs	r3, #64	; 0x40
 8006de6:	eba0 000a 	sub.w	r0, r0, sl
 8006dea:	fa03 f000 	lsl.w	r0, r3, r0
 8006dee:	9b04      	ldr	r3, [sp, #16]
 8006df0:	4303      	orrs	r3, r0
 8006df2:	3401      	adds	r4, #1
 8006df4:	9304      	str	r3, [sp, #16]
 8006df6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dfa:	4826      	ldr	r0, [pc, #152]	; (8006e94 <_svfiprintf_r+0x1f0>)
 8006dfc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e00:	2206      	movs	r2, #6
 8006e02:	f7f9 f9f5 	bl	80001f0 <memchr>
 8006e06:	2800      	cmp	r0, #0
 8006e08:	d038      	beq.n	8006e7c <_svfiprintf_r+0x1d8>
 8006e0a:	4b23      	ldr	r3, [pc, #140]	; (8006e98 <_svfiprintf_r+0x1f4>)
 8006e0c:	bb1b      	cbnz	r3, 8006e56 <_svfiprintf_r+0x1b2>
 8006e0e:	9b03      	ldr	r3, [sp, #12]
 8006e10:	3307      	adds	r3, #7
 8006e12:	f023 0307 	bic.w	r3, r3, #7
 8006e16:	3308      	adds	r3, #8
 8006e18:	9303      	str	r3, [sp, #12]
 8006e1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e1c:	4433      	add	r3, r6
 8006e1e:	9309      	str	r3, [sp, #36]	; 0x24
 8006e20:	e767      	b.n	8006cf2 <_svfiprintf_r+0x4e>
 8006e22:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e26:	460c      	mov	r4, r1
 8006e28:	2001      	movs	r0, #1
 8006e2a:	e7a5      	b.n	8006d78 <_svfiprintf_r+0xd4>
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	3401      	adds	r4, #1
 8006e30:	9305      	str	r3, [sp, #20]
 8006e32:	4619      	mov	r1, r3
 8006e34:	f04f 0c0a 	mov.w	ip, #10
 8006e38:	4620      	mov	r0, r4
 8006e3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e3e:	3a30      	subs	r2, #48	; 0x30
 8006e40:	2a09      	cmp	r2, #9
 8006e42:	d903      	bls.n	8006e4c <_svfiprintf_r+0x1a8>
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d0c5      	beq.n	8006dd4 <_svfiprintf_r+0x130>
 8006e48:	9105      	str	r1, [sp, #20]
 8006e4a:	e7c3      	b.n	8006dd4 <_svfiprintf_r+0x130>
 8006e4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e50:	4604      	mov	r4, r0
 8006e52:	2301      	movs	r3, #1
 8006e54:	e7f0      	b.n	8006e38 <_svfiprintf_r+0x194>
 8006e56:	ab03      	add	r3, sp, #12
 8006e58:	9300      	str	r3, [sp, #0]
 8006e5a:	462a      	mov	r2, r5
 8006e5c:	4b0f      	ldr	r3, [pc, #60]	; (8006e9c <_svfiprintf_r+0x1f8>)
 8006e5e:	a904      	add	r1, sp, #16
 8006e60:	4638      	mov	r0, r7
 8006e62:	f7fe f80f 	bl	8004e84 <_printf_float>
 8006e66:	1c42      	adds	r2, r0, #1
 8006e68:	4606      	mov	r6, r0
 8006e6a:	d1d6      	bne.n	8006e1a <_svfiprintf_r+0x176>
 8006e6c:	89ab      	ldrh	r3, [r5, #12]
 8006e6e:	065b      	lsls	r3, r3, #25
 8006e70:	f53f af2c 	bmi.w	8006ccc <_svfiprintf_r+0x28>
 8006e74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e76:	b01d      	add	sp, #116	; 0x74
 8006e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e7c:	ab03      	add	r3, sp, #12
 8006e7e:	9300      	str	r3, [sp, #0]
 8006e80:	462a      	mov	r2, r5
 8006e82:	4b06      	ldr	r3, [pc, #24]	; (8006e9c <_svfiprintf_r+0x1f8>)
 8006e84:	a904      	add	r1, sp, #16
 8006e86:	4638      	mov	r0, r7
 8006e88:	f7fe faa0 	bl	80053cc <_printf_i>
 8006e8c:	e7eb      	b.n	8006e66 <_svfiprintf_r+0x1c2>
 8006e8e:	bf00      	nop
 8006e90:	08008d34 	.word	0x08008d34
 8006e94:	08008d3e 	.word	0x08008d3e
 8006e98:	08004e85 	.word	0x08004e85
 8006e9c:	08006bed 	.word	0x08006bed
 8006ea0:	08008d3a 	.word	0x08008d3a

08006ea4 <_sbrk_r>:
 8006ea4:	b538      	push	{r3, r4, r5, lr}
 8006ea6:	4d06      	ldr	r5, [pc, #24]	; (8006ec0 <_sbrk_r+0x1c>)
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	4604      	mov	r4, r0
 8006eac:	4608      	mov	r0, r1
 8006eae:	602b      	str	r3, [r5, #0]
 8006eb0:	f7fa ff98 	bl	8001de4 <_sbrk>
 8006eb4:	1c43      	adds	r3, r0, #1
 8006eb6:	d102      	bne.n	8006ebe <_sbrk_r+0x1a>
 8006eb8:	682b      	ldr	r3, [r5, #0]
 8006eba:	b103      	cbz	r3, 8006ebe <_sbrk_r+0x1a>
 8006ebc:	6023      	str	r3, [r4, #0]
 8006ebe:	bd38      	pop	{r3, r4, r5, pc}
 8006ec0:	20000364 	.word	0x20000364

08006ec4 <__assert_func>:
 8006ec4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006ec6:	4614      	mov	r4, r2
 8006ec8:	461a      	mov	r2, r3
 8006eca:	4b09      	ldr	r3, [pc, #36]	; (8006ef0 <__assert_func+0x2c>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4605      	mov	r5, r0
 8006ed0:	68d8      	ldr	r0, [r3, #12]
 8006ed2:	b14c      	cbz	r4, 8006ee8 <__assert_func+0x24>
 8006ed4:	4b07      	ldr	r3, [pc, #28]	; (8006ef4 <__assert_func+0x30>)
 8006ed6:	9100      	str	r1, [sp, #0]
 8006ed8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006edc:	4906      	ldr	r1, [pc, #24]	; (8006ef8 <__assert_func+0x34>)
 8006ede:	462b      	mov	r3, r5
 8006ee0:	f000 f80e 	bl	8006f00 <fiprintf>
 8006ee4:	f000 faa4 	bl	8007430 <abort>
 8006ee8:	4b04      	ldr	r3, [pc, #16]	; (8006efc <__assert_func+0x38>)
 8006eea:	461c      	mov	r4, r3
 8006eec:	e7f3      	b.n	8006ed6 <__assert_func+0x12>
 8006eee:	bf00      	nop
 8006ef0:	2000000c 	.word	0x2000000c
 8006ef4:	08008d45 	.word	0x08008d45
 8006ef8:	08008d52 	.word	0x08008d52
 8006efc:	08008d80 	.word	0x08008d80

08006f00 <fiprintf>:
 8006f00:	b40e      	push	{r1, r2, r3}
 8006f02:	b503      	push	{r0, r1, lr}
 8006f04:	4601      	mov	r1, r0
 8006f06:	ab03      	add	r3, sp, #12
 8006f08:	4805      	ldr	r0, [pc, #20]	; (8006f20 <fiprintf+0x20>)
 8006f0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f0e:	6800      	ldr	r0, [r0, #0]
 8006f10:	9301      	str	r3, [sp, #4]
 8006f12:	f000 f88f 	bl	8007034 <_vfiprintf_r>
 8006f16:	b002      	add	sp, #8
 8006f18:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f1c:	b003      	add	sp, #12
 8006f1e:	4770      	bx	lr
 8006f20:	2000000c 	.word	0x2000000c

08006f24 <__ascii_mbtowc>:
 8006f24:	b082      	sub	sp, #8
 8006f26:	b901      	cbnz	r1, 8006f2a <__ascii_mbtowc+0x6>
 8006f28:	a901      	add	r1, sp, #4
 8006f2a:	b142      	cbz	r2, 8006f3e <__ascii_mbtowc+0x1a>
 8006f2c:	b14b      	cbz	r3, 8006f42 <__ascii_mbtowc+0x1e>
 8006f2e:	7813      	ldrb	r3, [r2, #0]
 8006f30:	600b      	str	r3, [r1, #0]
 8006f32:	7812      	ldrb	r2, [r2, #0]
 8006f34:	1e10      	subs	r0, r2, #0
 8006f36:	bf18      	it	ne
 8006f38:	2001      	movne	r0, #1
 8006f3a:	b002      	add	sp, #8
 8006f3c:	4770      	bx	lr
 8006f3e:	4610      	mov	r0, r2
 8006f40:	e7fb      	b.n	8006f3a <__ascii_mbtowc+0x16>
 8006f42:	f06f 0001 	mvn.w	r0, #1
 8006f46:	e7f8      	b.n	8006f3a <__ascii_mbtowc+0x16>

08006f48 <memmove>:
 8006f48:	4288      	cmp	r0, r1
 8006f4a:	b510      	push	{r4, lr}
 8006f4c:	eb01 0402 	add.w	r4, r1, r2
 8006f50:	d902      	bls.n	8006f58 <memmove+0x10>
 8006f52:	4284      	cmp	r4, r0
 8006f54:	4623      	mov	r3, r4
 8006f56:	d807      	bhi.n	8006f68 <memmove+0x20>
 8006f58:	1e43      	subs	r3, r0, #1
 8006f5a:	42a1      	cmp	r1, r4
 8006f5c:	d008      	beq.n	8006f70 <memmove+0x28>
 8006f5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f66:	e7f8      	b.n	8006f5a <memmove+0x12>
 8006f68:	4402      	add	r2, r0
 8006f6a:	4601      	mov	r1, r0
 8006f6c:	428a      	cmp	r2, r1
 8006f6e:	d100      	bne.n	8006f72 <memmove+0x2a>
 8006f70:	bd10      	pop	{r4, pc}
 8006f72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f7a:	e7f7      	b.n	8006f6c <memmove+0x24>

08006f7c <__malloc_lock>:
 8006f7c:	4801      	ldr	r0, [pc, #4]	; (8006f84 <__malloc_lock+0x8>)
 8006f7e:	f000 bc17 	b.w	80077b0 <__retarget_lock_acquire_recursive>
 8006f82:	bf00      	nop
 8006f84:	2000036c 	.word	0x2000036c

08006f88 <__malloc_unlock>:
 8006f88:	4801      	ldr	r0, [pc, #4]	; (8006f90 <__malloc_unlock+0x8>)
 8006f8a:	f000 bc12 	b.w	80077b2 <__retarget_lock_release_recursive>
 8006f8e:	bf00      	nop
 8006f90:	2000036c 	.word	0x2000036c

08006f94 <_realloc_r>:
 8006f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f96:	4607      	mov	r7, r0
 8006f98:	4614      	mov	r4, r2
 8006f9a:	460e      	mov	r6, r1
 8006f9c:	b921      	cbnz	r1, 8006fa8 <_realloc_r+0x14>
 8006f9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006fa2:	4611      	mov	r1, r2
 8006fa4:	f7ff bdc8 	b.w	8006b38 <_malloc_r>
 8006fa8:	b922      	cbnz	r2, 8006fb4 <_realloc_r+0x20>
 8006faa:	f7ff fd75 	bl	8006a98 <_free_r>
 8006fae:	4625      	mov	r5, r4
 8006fb0:	4628      	mov	r0, r5
 8006fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fb4:	f000 fc62 	bl	800787c <_malloc_usable_size_r>
 8006fb8:	42a0      	cmp	r0, r4
 8006fba:	d20f      	bcs.n	8006fdc <_realloc_r+0x48>
 8006fbc:	4621      	mov	r1, r4
 8006fbe:	4638      	mov	r0, r7
 8006fc0:	f7ff fdba 	bl	8006b38 <_malloc_r>
 8006fc4:	4605      	mov	r5, r0
 8006fc6:	2800      	cmp	r0, #0
 8006fc8:	d0f2      	beq.n	8006fb0 <_realloc_r+0x1c>
 8006fca:	4631      	mov	r1, r6
 8006fcc:	4622      	mov	r2, r4
 8006fce:	f7ff f9c7 	bl	8006360 <memcpy>
 8006fd2:	4631      	mov	r1, r6
 8006fd4:	4638      	mov	r0, r7
 8006fd6:	f7ff fd5f 	bl	8006a98 <_free_r>
 8006fda:	e7e9      	b.n	8006fb0 <_realloc_r+0x1c>
 8006fdc:	4635      	mov	r5, r6
 8006fde:	e7e7      	b.n	8006fb0 <_realloc_r+0x1c>

08006fe0 <__sfputc_r>:
 8006fe0:	6893      	ldr	r3, [r2, #8]
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	b410      	push	{r4}
 8006fe8:	6093      	str	r3, [r2, #8]
 8006fea:	da08      	bge.n	8006ffe <__sfputc_r+0x1e>
 8006fec:	6994      	ldr	r4, [r2, #24]
 8006fee:	42a3      	cmp	r3, r4
 8006ff0:	db01      	blt.n	8006ff6 <__sfputc_r+0x16>
 8006ff2:	290a      	cmp	r1, #10
 8006ff4:	d103      	bne.n	8006ffe <__sfputc_r+0x1e>
 8006ff6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ffa:	f000 b94b 	b.w	8007294 <__swbuf_r>
 8006ffe:	6813      	ldr	r3, [r2, #0]
 8007000:	1c58      	adds	r0, r3, #1
 8007002:	6010      	str	r0, [r2, #0]
 8007004:	7019      	strb	r1, [r3, #0]
 8007006:	4608      	mov	r0, r1
 8007008:	f85d 4b04 	ldr.w	r4, [sp], #4
 800700c:	4770      	bx	lr

0800700e <__sfputs_r>:
 800700e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007010:	4606      	mov	r6, r0
 8007012:	460f      	mov	r7, r1
 8007014:	4614      	mov	r4, r2
 8007016:	18d5      	adds	r5, r2, r3
 8007018:	42ac      	cmp	r4, r5
 800701a:	d101      	bne.n	8007020 <__sfputs_r+0x12>
 800701c:	2000      	movs	r0, #0
 800701e:	e007      	b.n	8007030 <__sfputs_r+0x22>
 8007020:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007024:	463a      	mov	r2, r7
 8007026:	4630      	mov	r0, r6
 8007028:	f7ff ffda 	bl	8006fe0 <__sfputc_r>
 800702c:	1c43      	adds	r3, r0, #1
 800702e:	d1f3      	bne.n	8007018 <__sfputs_r+0xa>
 8007030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007034 <_vfiprintf_r>:
 8007034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007038:	460d      	mov	r5, r1
 800703a:	b09d      	sub	sp, #116	; 0x74
 800703c:	4614      	mov	r4, r2
 800703e:	4698      	mov	r8, r3
 8007040:	4606      	mov	r6, r0
 8007042:	b118      	cbz	r0, 800704c <_vfiprintf_r+0x18>
 8007044:	6983      	ldr	r3, [r0, #24]
 8007046:	b90b      	cbnz	r3, 800704c <_vfiprintf_r+0x18>
 8007048:	f000 fb14 	bl	8007674 <__sinit>
 800704c:	4b89      	ldr	r3, [pc, #548]	; (8007274 <_vfiprintf_r+0x240>)
 800704e:	429d      	cmp	r5, r3
 8007050:	d11b      	bne.n	800708a <_vfiprintf_r+0x56>
 8007052:	6875      	ldr	r5, [r6, #4]
 8007054:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007056:	07d9      	lsls	r1, r3, #31
 8007058:	d405      	bmi.n	8007066 <_vfiprintf_r+0x32>
 800705a:	89ab      	ldrh	r3, [r5, #12]
 800705c:	059a      	lsls	r2, r3, #22
 800705e:	d402      	bmi.n	8007066 <_vfiprintf_r+0x32>
 8007060:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007062:	f000 fba5 	bl	80077b0 <__retarget_lock_acquire_recursive>
 8007066:	89ab      	ldrh	r3, [r5, #12]
 8007068:	071b      	lsls	r3, r3, #28
 800706a:	d501      	bpl.n	8007070 <_vfiprintf_r+0x3c>
 800706c:	692b      	ldr	r3, [r5, #16]
 800706e:	b9eb      	cbnz	r3, 80070ac <_vfiprintf_r+0x78>
 8007070:	4629      	mov	r1, r5
 8007072:	4630      	mov	r0, r6
 8007074:	f000 f96e 	bl	8007354 <__swsetup_r>
 8007078:	b1c0      	cbz	r0, 80070ac <_vfiprintf_r+0x78>
 800707a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800707c:	07dc      	lsls	r4, r3, #31
 800707e:	d50e      	bpl.n	800709e <_vfiprintf_r+0x6a>
 8007080:	f04f 30ff 	mov.w	r0, #4294967295
 8007084:	b01d      	add	sp, #116	; 0x74
 8007086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800708a:	4b7b      	ldr	r3, [pc, #492]	; (8007278 <_vfiprintf_r+0x244>)
 800708c:	429d      	cmp	r5, r3
 800708e:	d101      	bne.n	8007094 <_vfiprintf_r+0x60>
 8007090:	68b5      	ldr	r5, [r6, #8]
 8007092:	e7df      	b.n	8007054 <_vfiprintf_r+0x20>
 8007094:	4b79      	ldr	r3, [pc, #484]	; (800727c <_vfiprintf_r+0x248>)
 8007096:	429d      	cmp	r5, r3
 8007098:	bf08      	it	eq
 800709a:	68f5      	ldreq	r5, [r6, #12]
 800709c:	e7da      	b.n	8007054 <_vfiprintf_r+0x20>
 800709e:	89ab      	ldrh	r3, [r5, #12]
 80070a0:	0598      	lsls	r0, r3, #22
 80070a2:	d4ed      	bmi.n	8007080 <_vfiprintf_r+0x4c>
 80070a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070a6:	f000 fb84 	bl	80077b2 <__retarget_lock_release_recursive>
 80070aa:	e7e9      	b.n	8007080 <_vfiprintf_r+0x4c>
 80070ac:	2300      	movs	r3, #0
 80070ae:	9309      	str	r3, [sp, #36]	; 0x24
 80070b0:	2320      	movs	r3, #32
 80070b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80070ba:	2330      	movs	r3, #48	; 0x30
 80070bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007280 <_vfiprintf_r+0x24c>
 80070c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070c4:	f04f 0901 	mov.w	r9, #1
 80070c8:	4623      	mov	r3, r4
 80070ca:	469a      	mov	sl, r3
 80070cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070d0:	b10a      	cbz	r2, 80070d6 <_vfiprintf_r+0xa2>
 80070d2:	2a25      	cmp	r2, #37	; 0x25
 80070d4:	d1f9      	bne.n	80070ca <_vfiprintf_r+0x96>
 80070d6:	ebba 0b04 	subs.w	fp, sl, r4
 80070da:	d00b      	beq.n	80070f4 <_vfiprintf_r+0xc0>
 80070dc:	465b      	mov	r3, fp
 80070de:	4622      	mov	r2, r4
 80070e0:	4629      	mov	r1, r5
 80070e2:	4630      	mov	r0, r6
 80070e4:	f7ff ff93 	bl	800700e <__sfputs_r>
 80070e8:	3001      	adds	r0, #1
 80070ea:	f000 80aa 	beq.w	8007242 <_vfiprintf_r+0x20e>
 80070ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070f0:	445a      	add	r2, fp
 80070f2:	9209      	str	r2, [sp, #36]	; 0x24
 80070f4:	f89a 3000 	ldrb.w	r3, [sl]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f000 80a2 	beq.w	8007242 <_vfiprintf_r+0x20e>
 80070fe:	2300      	movs	r3, #0
 8007100:	f04f 32ff 	mov.w	r2, #4294967295
 8007104:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007108:	f10a 0a01 	add.w	sl, sl, #1
 800710c:	9304      	str	r3, [sp, #16]
 800710e:	9307      	str	r3, [sp, #28]
 8007110:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007114:	931a      	str	r3, [sp, #104]	; 0x68
 8007116:	4654      	mov	r4, sl
 8007118:	2205      	movs	r2, #5
 800711a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800711e:	4858      	ldr	r0, [pc, #352]	; (8007280 <_vfiprintf_r+0x24c>)
 8007120:	f7f9 f866 	bl	80001f0 <memchr>
 8007124:	9a04      	ldr	r2, [sp, #16]
 8007126:	b9d8      	cbnz	r0, 8007160 <_vfiprintf_r+0x12c>
 8007128:	06d1      	lsls	r1, r2, #27
 800712a:	bf44      	itt	mi
 800712c:	2320      	movmi	r3, #32
 800712e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007132:	0713      	lsls	r3, r2, #28
 8007134:	bf44      	itt	mi
 8007136:	232b      	movmi	r3, #43	; 0x2b
 8007138:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800713c:	f89a 3000 	ldrb.w	r3, [sl]
 8007140:	2b2a      	cmp	r3, #42	; 0x2a
 8007142:	d015      	beq.n	8007170 <_vfiprintf_r+0x13c>
 8007144:	9a07      	ldr	r2, [sp, #28]
 8007146:	4654      	mov	r4, sl
 8007148:	2000      	movs	r0, #0
 800714a:	f04f 0c0a 	mov.w	ip, #10
 800714e:	4621      	mov	r1, r4
 8007150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007154:	3b30      	subs	r3, #48	; 0x30
 8007156:	2b09      	cmp	r3, #9
 8007158:	d94e      	bls.n	80071f8 <_vfiprintf_r+0x1c4>
 800715a:	b1b0      	cbz	r0, 800718a <_vfiprintf_r+0x156>
 800715c:	9207      	str	r2, [sp, #28]
 800715e:	e014      	b.n	800718a <_vfiprintf_r+0x156>
 8007160:	eba0 0308 	sub.w	r3, r0, r8
 8007164:	fa09 f303 	lsl.w	r3, r9, r3
 8007168:	4313      	orrs	r3, r2
 800716a:	9304      	str	r3, [sp, #16]
 800716c:	46a2      	mov	sl, r4
 800716e:	e7d2      	b.n	8007116 <_vfiprintf_r+0xe2>
 8007170:	9b03      	ldr	r3, [sp, #12]
 8007172:	1d19      	adds	r1, r3, #4
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	9103      	str	r1, [sp, #12]
 8007178:	2b00      	cmp	r3, #0
 800717a:	bfbb      	ittet	lt
 800717c:	425b      	neglt	r3, r3
 800717e:	f042 0202 	orrlt.w	r2, r2, #2
 8007182:	9307      	strge	r3, [sp, #28]
 8007184:	9307      	strlt	r3, [sp, #28]
 8007186:	bfb8      	it	lt
 8007188:	9204      	strlt	r2, [sp, #16]
 800718a:	7823      	ldrb	r3, [r4, #0]
 800718c:	2b2e      	cmp	r3, #46	; 0x2e
 800718e:	d10c      	bne.n	80071aa <_vfiprintf_r+0x176>
 8007190:	7863      	ldrb	r3, [r4, #1]
 8007192:	2b2a      	cmp	r3, #42	; 0x2a
 8007194:	d135      	bne.n	8007202 <_vfiprintf_r+0x1ce>
 8007196:	9b03      	ldr	r3, [sp, #12]
 8007198:	1d1a      	adds	r2, r3, #4
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	9203      	str	r2, [sp, #12]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	bfb8      	it	lt
 80071a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80071a6:	3402      	adds	r4, #2
 80071a8:	9305      	str	r3, [sp, #20]
 80071aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007290 <_vfiprintf_r+0x25c>
 80071ae:	7821      	ldrb	r1, [r4, #0]
 80071b0:	2203      	movs	r2, #3
 80071b2:	4650      	mov	r0, sl
 80071b4:	f7f9 f81c 	bl	80001f0 <memchr>
 80071b8:	b140      	cbz	r0, 80071cc <_vfiprintf_r+0x198>
 80071ba:	2340      	movs	r3, #64	; 0x40
 80071bc:	eba0 000a 	sub.w	r0, r0, sl
 80071c0:	fa03 f000 	lsl.w	r0, r3, r0
 80071c4:	9b04      	ldr	r3, [sp, #16]
 80071c6:	4303      	orrs	r3, r0
 80071c8:	3401      	adds	r4, #1
 80071ca:	9304      	str	r3, [sp, #16]
 80071cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071d0:	482c      	ldr	r0, [pc, #176]	; (8007284 <_vfiprintf_r+0x250>)
 80071d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071d6:	2206      	movs	r2, #6
 80071d8:	f7f9 f80a 	bl	80001f0 <memchr>
 80071dc:	2800      	cmp	r0, #0
 80071de:	d03f      	beq.n	8007260 <_vfiprintf_r+0x22c>
 80071e0:	4b29      	ldr	r3, [pc, #164]	; (8007288 <_vfiprintf_r+0x254>)
 80071e2:	bb1b      	cbnz	r3, 800722c <_vfiprintf_r+0x1f8>
 80071e4:	9b03      	ldr	r3, [sp, #12]
 80071e6:	3307      	adds	r3, #7
 80071e8:	f023 0307 	bic.w	r3, r3, #7
 80071ec:	3308      	adds	r3, #8
 80071ee:	9303      	str	r3, [sp, #12]
 80071f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071f2:	443b      	add	r3, r7
 80071f4:	9309      	str	r3, [sp, #36]	; 0x24
 80071f6:	e767      	b.n	80070c8 <_vfiprintf_r+0x94>
 80071f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80071fc:	460c      	mov	r4, r1
 80071fe:	2001      	movs	r0, #1
 8007200:	e7a5      	b.n	800714e <_vfiprintf_r+0x11a>
 8007202:	2300      	movs	r3, #0
 8007204:	3401      	adds	r4, #1
 8007206:	9305      	str	r3, [sp, #20]
 8007208:	4619      	mov	r1, r3
 800720a:	f04f 0c0a 	mov.w	ip, #10
 800720e:	4620      	mov	r0, r4
 8007210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007214:	3a30      	subs	r2, #48	; 0x30
 8007216:	2a09      	cmp	r2, #9
 8007218:	d903      	bls.n	8007222 <_vfiprintf_r+0x1ee>
 800721a:	2b00      	cmp	r3, #0
 800721c:	d0c5      	beq.n	80071aa <_vfiprintf_r+0x176>
 800721e:	9105      	str	r1, [sp, #20]
 8007220:	e7c3      	b.n	80071aa <_vfiprintf_r+0x176>
 8007222:	fb0c 2101 	mla	r1, ip, r1, r2
 8007226:	4604      	mov	r4, r0
 8007228:	2301      	movs	r3, #1
 800722a:	e7f0      	b.n	800720e <_vfiprintf_r+0x1da>
 800722c:	ab03      	add	r3, sp, #12
 800722e:	9300      	str	r3, [sp, #0]
 8007230:	462a      	mov	r2, r5
 8007232:	4b16      	ldr	r3, [pc, #88]	; (800728c <_vfiprintf_r+0x258>)
 8007234:	a904      	add	r1, sp, #16
 8007236:	4630      	mov	r0, r6
 8007238:	f7fd fe24 	bl	8004e84 <_printf_float>
 800723c:	4607      	mov	r7, r0
 800723e:	1c78      	adds	r0, r7, #1
 8007240:	d1d6      	bne.n	80071f0 <_vfiprintf_r+0x1bc>
 8007242:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007244:	07d9      	lsls	r1, r3, #31
 8007246:	d405      	bmi.n	8007254 <_vfiprintf_r+0x220>
 8007248:	89ab      	ldrh	r3, [r5, #12]
 800724a:	059a      	lsls	r2, r3, #22
 800724c:	d402      	bmi.n	8007254 <_vfiprintf_r+0x220>
 800724e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007250:	f000 faaf 	bl	80077b2 <__retarget_lock_release_recursive>
 8007254:	89ab      	ldrh	r3, [r5, #12]
 8007256:	065b      	lsls	r3, r3, #25
 8007258:	f53f af12 	bmi.w	8007080 <_vfiprintf_r+0x4c>
 800725c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800725e:	e711      	b.n	8007084 <_vfiprintf_r+0x50>
 8007260:	ab03      	add	r3, sp, #12
 8007262:	9300      	str	r3, [sp, #0]
 8007264:	462a      	mov	r2, r5
 8007266:	4b09      	ldr	r3, [pc, #36]	; (800728c <_vfiprintf_r+0x258>)
 8007268:	a904      	add	r1, sp, #16
 800726a:	4630      	mov	r0, r6
 800726c:	f7fe f8ae 	bl	80053cc <_printf_i>
 8007270:	e7e4      	b.n	800723c <_vfiprintf_r+0x208>
 8007272:	bf00      	nop
 8007274:	08008eac 	.word	0x08008eac
 8007278:	08008ecc 	.word	0x08008ecc
 800727c:	08008e8c 	.word	0x08008e8c
 8007280:	08008d34 	.word	0x08008d34
 8007284:	08008d3e 	.word	0x08008d3e
 8007288:	08004e85 	.word	0x08004e85
 800728c:	0800700f 	.word	0x0800700f
 8007290:	08008d3a 	.word	0x08008d3a

08007294 <__swbuf_r>:
 8007294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007296:	460e      	mov	r6, r1
 8007298:	4614      	mov	r4, r2
 800729a:	4605      	mov	r5, r0
 800729c:	b118      	cbz	r0, 80072a6 <__swbuf_r+0x12>
 800729e:	6983      	ldr	r3, [r0, #24]
 80072a0:	b90b      	cbnz	r3, 80072a6 <__swbuf_r+0x12>
 80072a2:	f000 f9e7 	bl	8007674 <__sinit>
 80072a6:	4b21      	ldr	r3, [pc, #132]	; (800732c <__swbuf_r+0x98>)
 80072a8:	429c      	cmp	r4, r3
 80072aa:	d12b      	bne.n	8007304 <__swbuf_r+0x70>
 80072ac:	686c      	ldr	r4, [r5, #4]
 80072ae:	69a3      	ldr	r3, [r4, #24]
 80072b0:	60a3      	str	r3, [r4, #8]
 80072b2:	89a3      	ldrh	r3, [r4, #12]
 80072b4:	071a      	lsls	r2, r3, #28
 80072b6:	d52f      	bpl.n	8007318 <__swbuf_r+0x84>
 80072b8:	6923      	ldr	r3, [r4, #16]
 80072ba:	b36b      	cbz	r3, 8007318 <__swbuf_r+0x84>
 80072bc:	6923      	ldr	r3, [r4, #16]
 80072be:	6820      	ldr	r0, [r4, #0]
 80072c0:	1ac0      	subs	r0, r0, r3
 80072c2:	6963      	ldr	r3, [r4, #20]
 80072c4:	b2f6      	uxtb	r6, r6
 80072c6:	4283      	cmp	r3, r0
 80072c8:	4637      	mov	r7, r6
 80072ca:	dc04      	bgt.n	80072d6 <__swbuf_r+0x42>
 80072cc:	4621      	mov	r1, r4
 80072ce:	4628      	mov	r0, r5
 80072d0:	f000 f93c 	bl	800754c <_fflush_r>
 80072d4:	bb30      	cbnz	r0, 8007324 <__swbuf_r+0x90>
 80072d6:	68a3      	ldr	r3, [r4, #8]
 80072d8:	3b01      	subs	r3, #1
 80072da:	60a3      	str	r3, [r4, #8]
 80072dc:	6823      	ldr	r3, [r4, #0]
 80072de:	1c5a      	adds	r2, r3, #1
 80072e0:	6022      	str	r2, [r4, #0]
 80072e2:	701e      	strb	r6, [r3, #0]
 80072e4:	6963      	ldr	r3, [r4, #20]
 80072e6:	3001      	adds	r0, #1
 80072e8:	4283      	cmp	r3, r0
 80072ea:	d004      	beq.n	80072f6 <__swbuf_r+0x62>
 80072ec:	89a3      	ldrh	r3, [r4, #12]
 80072ee:	07db      	lsls	r3, r3, #31
 80072f0:	d506      	bpl.n	8007300 <__swbuf_r+0x6c>
 80072f2:	2e0a      	cmp	r6, #10
 80072f4:	d104      	bne.n	8007300 <__swbuf_r+0x6c>
 80072f6:	4621      	mov	r1, r4
 80072f8:	4628      	mov	r0, r5
 80072fa:	f000 f927 	bl	800754c <_fflush_r>
 80072fe:	b988      	cbnz	r0, 8007324 <__swbuf_r+0x90>
 8007300:	4638      	mov	r0, r7
 8007302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007304:	4b0a      	ldr	r3, [pc, #40]	; (8007330 <__swbuf_r+0x9c>)
 8007306:	429c      	cmp	r4, r3
 8007308:	d101      	bne.n	800730e <__swbuf_r+0x7a>
 800730a:	68ac      	ldr	r4, [r5, #8]
 800730c:	e7cf      	b.n	80072ae <__swbuf_r+0x1a>
 800730e:	4b09      	ldr	r3, [pc, #36]	; (8007334 <__swbuf_r+0xa0>)
 8007310:	429c      	cmp	r4, r3
 8007312:	bf08      	it	eq
 8007314:	68ec      	ldreq	r4, [r5, #12]
 8007316:	e7ca      	b.n	80072ae <__swbuf_r+0x1a>
 8007318:	4621      	mov	r1, r4
 800731a:	4628      	mov	r0, r5
 800731c:	f000 f81a 	bl	8007354 <__swsetup_r>
 8007320:	2800      	cmp	r0, #0
 8007322:	d0cb      	beq.n	80072bc <__swbuf_r+0x28>
 8007324:	f04f 37ff 	mov.w	r7, #4294967295
 8007328:	e7ea      	b.n	8007300 <__swbuf_r+0x6c>
 800732a:	bf00      	nop
 800732c:	08008eac 	.word	0x08008eac
 8007330:	08008ecc 	.word	0x08008ecc
 8007334:	08008e8c 	.word	0x08008e8c

08007338 <__ascii_wctomb>:
 8007338:	b149      	cbz	r1, 800734e <__ascii_wctomb+0x16>
 800733a:	2aff      	cmp	r2, #255	; 0xff
 800733c:	bf85      	ittet	hi
 800733e:	238a      	movhi	r3, #138	; 0x8a
 8007340:	6003      	strhi	r3, [r0, #0]
 8007342:	700a      	strbls	r2, [r1, #0]
 8007344:	f04f 30ff 	movhi.w	r0, #4294967295
 8007348:	bf98      	it	ls
 800734a:	2001      	movls	r0, #1
 800734c:	4770      	bx	lr
 800734e:	4608      	mov	r0, r1
 8007350:	4770      	bx	lr
	...

08007354 <__swsetup_r>:
 8007354:	4b32      	ldr	r3, [pc, #200]	; (8007420 <__swsetup_r+0xcc>)
 8007356:	b570      	push	{r4, r5, r6, lr}
 8007358:	681d      	ldr	r5, [r3, #0]
 800735a:	4606      	mov	r6, r0
 800735c:	460c      	mov	r4, r1
 800735e:	b125      	cbz	r5, 800736a <__swsetup_r+0x16>
 8007360:	69ab      	ldr	r3, [r5, #24]
 8007362:	b913      	cbnz	r3, 800736a <__swsetup_r+0x16>
 8007364:	4628      	mov	r0, r5
 8007366:	f000 f985 	bl	8007674 <__sinit>
 800736a:	4b2e      	ldr	r3, [pc, #184]	; (8007424 <__swsetup_r+0xd0>)
 800736c:	429c      	cmp	r4, r3
 800736e:	d10f      	bne.n	8007390 <__swsetup_r+0x3c>
 8007370:	686c      	ldr	r4, [r5, #4]
 8007372:	89a3      	ldrh	r3, [r4, #12]
 8007374:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007378:	0719      	lsls	r1, r3, #28
 800737a:	d42c      	bmi.n	80073d6 <__swsetup_r+0x82>
 800737c:	06dd      	lsls	r5, r3, #27
 800737e:	d411      	bmi.n	80073a4 <__swsetup_r+0x50>
 8007380:	2309      	movs	r3, #9
 8007382:	6033      	str	r3, [r6, #0]
 8007384:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007388:	81a3      	strh	r3, [r4, #12]
 800738a:	f04f 30ff 	mov.w	r0, #4294967295
 800738e:	e03e      	b.n	800740e <__swsetup_r+0xba>
 8007390:	4b25      	ldr	r3, [pc, #148]	; (8007428 <__swsetup_r+0xd4>)
 8007392:	429c      	cmp	r4, r3
 8007394:	d101      	bne.n	800739a <__swsetup_r+0x46>
 8007396:	68ac      	ldr	r4, [r5, #8]
 8007398:	e7eb      	b.n	8007372 <__swsetup_r+0x1e>
 800739a:	4b24      	ldr	r3, [pc, #144]	; (800742c <__swsetup_r+0xd8>)
 800739c:	429c      	cmp	r4, r3
 800739e:	bf08      	it	eq
 80073a0:	68ec      	ldreq	r4, [r5, #12]
 80073a2:	e7e6      	b.n	8007372 <__swsetup_r+0x1e>
 80073a4:	0758      	lsls	r0, r3, #29
 80073a6:	d512      	bpl.n	80073ce <__swsetup_r+0x7a>
 80073a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073aa:	b141      	cbz	r1, 80073be <__swsetup_r+0x6a>
 80073ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80073b0:	4299      	cmp	r1, r3
 80073b2:	d002      	beq.n	80073ba <__swsetup_r+0x66>
 80073b4:	4630      	mov	r0, r6
 80073b6:	f7ff fb6f 	bl	8006a98 <_free_r>
 80073ba:	2300      	movs	r3, #0
 80073bc:	6363      	str	r3, [r4, #52]	; 0x34
 80073be:	89a3      	ldrh	r3, [r4, #12]
 80073c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80073c4:	81a3      	strh	r3, [r4, #12]
 80073c6:	2300      	movs	r3, #0
 80073c8:	6063      	str	r3, [r4, #4]
 80073ca:	6923      	ldr	r3, [r4, #16]
 80073cc:	6023      	str	r3, [r4, #0]
 80073ce:	89a3      	ldrh	r3, [r4, #12]
 80073d0:	f043 0308 	orr.w	r3, r3, #8
 80073d4:	81a3      	strh	r3, [r4, #12]
 80073d6:	6923      	ldr	r3, [r4, #16]
 80073d8:	b94b      	cbnz	r3, 80073ee <__swsetup_r+0x9a>
 80073da:	89a3      	ldrh	r3, [r4, #12]
 80073dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80073e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073e4:	d003      	beq.n	80073ee <__swsetup_r+0x9a>
 80073e6:	4621      	mov	r1, r4
 80073e8:	4630      	mov	r0, r6
 80073ea:	f000 fa07 	bl	80077fc <__smakebuf_r>
 80073ee:	89a0      	ldrh	r0, [r4, #12]
 80073f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073f4:	f010 0301 	ands.w	r3, r0, #1
 80073f8:	d00a      	beq.n	8007410 <__swsetup_r+0xbc>
 80073fa:	2300      	movs	r3, #0
 80073fc:	60a3      	str	r3, [r4, #8]
 80073fe:	6963      	ldr	r3, [r4, #20]
 8007400:	425b      	negs	r3, r3
 8007402:	61a3      	str	r3, [r4, #24]
 8007404:	6923      	ldr	r3, [r4, #16]
 8007406:	b943      	cbnz	r3, 800741a <__swsetup_r+0xc6>
 8007408:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800740c:	d1ba      	bne.n	8007384 <__swsetup_r+0x30>
 800740e:	bd70      	pop	{r4, r5, r6, pc}
 8007410:	0781      	lsls	r1, r0, #30
 8007412:	bf58      	it	pl
 8007414:	6963      	ldrpl	r3, [r4, #20]
 8007416:	60a3      	str	r3, [r4, #8]
 8007418:	e7f4      	b.n	8007404 <__swsetup_r+0xb0>
 800741a:	2000      	movs	r0, #0
 800741c:	e7f7      	b.n	800740e <__swsetup_r+0xba>
 800741e:	bf00      	nop
 8007420:	2000000c 	.word	0x2000000c
 8007424:	08008eac 	.word	0x08008eac
 8007428:	08008ecc 	.word	0x08008ecc
 800742c:	08008e8c 	.word	0x08008e8c

08007430 <abort>:
 8007430:	b508      	push	{r3, lr}
 8007432:	2006      	movs	r0, #6
 8007434:	f000 fa52 	bl	80078dc <raise>
 8007438:	2001      	movs	r0, #1
 800743a:	f7fa fc5b 	bl	8001cf4 <_exit>
	...

08007440 <__sflush_r>:
 8007440:	898a      	ldrh	r2, [r1, #12]
 8007442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007446:	4605      	mov	r5, r0
 8007448:	0710      	lsls	r0, r2, #28
 800744a:	460c      	mov	r4, r1
 800744c:	d458      	bmi.n	8007500 <__sflush_r+0xc0>
 800744e:	684b      	ldr	r3, [r1, #4]
 8007450:	2b00      	cmp	r3, #0
 8007452:	dc05      	bgt.n	8007460 <__sflush_r+0x20>
 8007454:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007456:	2b00      	cmp	r3, #0
 8007458:	dc02      	bgt.n	8007460 <__sflush_r+0x20>
 800745a:	2000      	movs	r0, #0
 800745c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007460:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007462:	2e00      	cmp	r6, #0
 8007464:	d0f9      	beq.n	800745a <__sflush_r+0x1a>
 8007466:	2300      	movs	r3, #0
 8007468:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800746c:	682f      	ldr	r7, [r5, #0]
 800746e:	602b      	str	r3, [r5, #0]
 8007470:	d032      	beq.n	80074d8 <__sflush_r+0x98>
 8007472:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007474:	89a3      	ldrh	r3, [r4, #12]
 8007476:	075a      	lsls	r2, r3, #29
 8007478:	d505      	bpl.n	8007486 <__sflush_r+0x46>
 800747a:	6863      	ldr	r3, [r4, #4]
 800747c:	1ac0      	subs	r0, r0, r3
 800747e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007480:	b10b      	cbz	r3, 8007486 <__sflush_r+0x46>
 8007482:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007484:	1ac0      	subs	r0, r0, r3
 8007486:	2300      	movs	r3, #0
 8007488:	4602      	mov	r2, r0
 800748a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800748c:	6a21      	ldr	r1, [r4, #32]
 800748e:	4628      	mov	r0, r5
 8007490:	47b0      	blx	r6
 8007492:	1c43      	adds	r3, r0, #1
 8007494:	89a3      	ldrh	r3, [r4, #12]
 8007496:	d106      	bne.n	80074a6 <__sflush_r+0x66>
 8007498:	6829      	ldr	r1, [r5, #0]
 800749a:	291d      	cmp	r1, #29
 800749c:	d82c      	bhi.n	80074f8 <__sflush_r+0xb8>
 800749e:	4a2a      	ldr	r2, [pc, #168]	; (8007548 <__sflush_r+0x108>)
 80074a0:	40ca      	lsrs	r2, r1
 80074a2:	07d6      	lsls	r6, r2, #31
 80074a4:	d528      	bpl.n	80074f8 <__sflush_r+0xb8>
 80074a6:	2200      	movs	r2, #0
 80074a8:	6062      	str	r2, [r4, #4]
 80074aa:	04d9      	lsls	r1, r3, #19
 80074ac:	6922      	ldr	r2, [r4, #16]
 80074ae:	6022      	str	r2, [r4, #0]
 80074b0:	d504      	bpl.n	80074bc <__sflush_r+0x7c>
 80074b2:	1c42      	adds	r2, r0, #1
 80074b4:	d101      	bne.n	80074ba <__sflush_r+0x7a>
 80074b6:	682b      	ldr	r3, [r5, #0]
 80074b8:	b903      	cbnz	r3, 80074bc <__sflush_r+0x7c>
 80074ba:	6560      	str	r0, [r4, #84]	; 0x54
 80074bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074be:	602f      	str	r7, [r5, #0]
 80074c0:	2900      	cmp	r1, #0
 80074c2:	d0ca      	beq.n	800745a <__sflush_r+0x1a>
 80074c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074c8:	4299      	cmp	r1, r3
 80074ca:	d002      	beq.n	80074d2 <__sflush_r+0x92>
 80074cc:	4628      	mov	r0, r5
 80074ce:	f7ff fae3 	bl	8006a98 <_free_r>
 80074d2:	2000      	movs	r0, #0
 80074d4:	6360      	str	r0, [r4, #52]	; 0x34
 80074d6:	e7c1      	b.n	800745c <__sflush_r+0x1c>
 80074d8:	6a21      	ldr	r1, [r4, #32]
 80074da:	2301      	movs	r3, #1
 80074dc:	4628      	mov	r0, r5
 80074de:	47b0      	blx	r6
 80074e0:	1c41      	adds	r1, r0, #1
 80074e2:	d1c7      	bne.n	8007474 <__sflush_r+0x34>
 80074e4:	682b      	ldr	r3, [r5, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d0c4      	beq.n	8007474 <__sflush_r+0x34>
 80074ea:	2b1d      	cmp	r3, #29
 80074ec:	d001      	beq.n	80074f2 <__sflush_r+0xb2>
 80074ee:	2b16      	cmp	r3, #22
 80074f0:	d101      	bne.n	80074f6 <__sflush_r+0xb6>
 80074f2:	602f      	str	r7, [r5, #0]
 80074f4:	e7b1      	b.n	800745a <__sflush_r+0x1a>
 80074f6:	89a3      	ldrh	r3, [r4, #12]
 80074f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074fc:	81a3      	strh	r3, [r4, #12]
 80074fe:	e7ad      	b.n	800745c <__sflush_r+0x1c>
 8007500:	690f      	ldr	r7, [r1, #16]
 8007502:	2f00      	cmp	r7, #0
 8007504:	d0a9      	beq.n	800745a <__sflush_r+0x1a>
 8007506:	0793      	lsls	r3, r2, #30
 8007508:	680e      	ldr	r6, [r1, #0]
 800750a:	bf08      	it	eq
 800750c:	694b      	ldreq	r3, [r1, #20]
 800750e:	600f      	str	r7, [r1, #0]
 8007510:	bf18      	it	ne
 8007512:	2300      	movne	r3, #0
 8007514:	eba6 0807 	sub.w	r8, r6, r7
 8007518:	608b      	str	r3, [r1, #8]
 800751a:	f1b8 0f00 	cmp.w	r8, #0
 800751e:	dd9c      	ble.n	800745a <__sflush_r+0x1a>
 8007520:	6a21      	ldr	r1, [r4, #32]
 8007522:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007524:	4643      	mov	r3, r8
 8007526:	463a      	mov	r2, r7
 8007528:	4628      	mov	r0, r5
 800752a:	47b0      	blx	r6
 800752c:	2800      	cmp	r0, #0
 800752e:	dc06      	bgt.n	800753e <__sflush_r+0xfe>
 8007530:	89a3      	ldrh	r3, [r4, #12]
 8007532:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007536:	81a3      	strh	r3, [r4, #12]
 8007538:	f04f 30ff 	mov.w	r0, #4294967295
 800753c:	e78e      	b.n	800745c <__sflush_r+0x1c>
 800753e:	4407      	add	r7, r0
 8007540:	eba8 0800 	sub.w	r8, r8, r0
 8007544:	e7e9      	b.n	800751a <__sflush_r+0xda>
 8007546:	bf00      	nop
 8007548:	20400001 	.word	0x20400001

0800754c <_fflush_r>:
 800754c:	b538      	push	{r3, r4, r5, lr}
 800754e:	690b      	ldr	r3, [r1, #16]
 8007550:	4605      	mov	r5, r0
 8007552:	460c      	mov	r4, r1
 8007554:	b913      	cbnz	r3, 800755c <_fflush_r+0x10>
 8007556:	2500      	movs	r5, #0
 8007558:	4628      	mov	r0, r5
 800755a:	bd38      	pop	{r3, r4, r5, pc}
 800755c:	b118      	cbz	r0, 8007566 <_fflush_r+0x1a>
 800755e:	6983      	ldr	r3, [r0, #24]
 8007560:	b90b      	cbnz	r3, 8007566 <_fflush_r+0x1a>
 8007562:	f000 f887 	bl	8007674 <__sinit>
 8007566:	4b14      	ldr	r3, [pc, #80]	; (80075b8 <_fflush_r+0x6c>)
 8007568:	429c      	cmp	r4, r3
 800756a:	d11b      	bne.n	80075a4 <_fflush_r+0x58>
 800756c:	686c      	ldr	r4, [r5, #4]
 800756e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d0ef      	beq.n	8007556 <_fflush_r+0xa>
 8007576:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007578:	07d0      	lsls	r0, r2, #31
 800757a:	d404      	bmi.n	8007586 <_fflush_r+0x3a>
 800757c:	0599      	lsls	r1, r3, #22
 800757e:	d402      	bmi.n	8007586 <_fflush_r+0x3a>
 8007580:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007582:	f000 f915 	bl	80077b0 <__retarget_lock_acquire_recursive>
 8007586:	4628      	mov	r0, r5
 8007588:	4621      	mov	r1, r4
 800758a:	f7ff ff59 	bl	8007440 <__sflush_r>
 800758e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007590:	07da      	lsls	r2, r3, #31
 8007592:	4605      	mov	r5, r0
 8007594:	d4e0      	bmi.n	8007558 <_fflush_r+0xc>
 8007596:	89a3      	ldrh	r3, [r4, #12]
 8007598:	059b      	lsls	r3, r3, #22
 800759a:	d4dd      	bmi.n	8007558 <_fflush_r+0xc>
 800759c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800759e:	f000 f908 	bl	80077b2 <__retarget_lock_release_recursive>
 80075a2:	e7d9      	b.n	8007558 <_fflush_r+0xc>
 80075a4:	4b05      	ldr	r3, [pc, #20]	; (80075bc <_fflush_r+0x70>)
 80075a6:	429c      	cmp	r4, r3
 80075a8:	d101      	bne.n	80075ae <_fflush_r+0x62>
 80075aa:	68ac      	ldr	r4, [r5, #8]
 80075ac:	e7df      	b.n	800756e <_fflush_r+0x22>
 80075ae:	4b04      	ldr	r3, [pc, #16]	; (80075c0 <_fflush_r+0x74>)
 80075b0:	429c      	cmp	r4, r3
 80075b2:	bf08      	it	eq
 80075b4:	68ec      	ldreq	r4, [r5, #12]
 80075b6:	e7da      	b.n	800756e <_fflush_r+0x22>
 80075b8:	08008eac 	.word	0x08008eac
 80075bc:	08008ecc 	.word	0x08008ecc
 80075c0:	08008e8c 	.word	0x08008e8c

080075c4 <std>:
 80075c4:	2300      	movs	r3, #0
 80075c6:	b510      	push	{r4, lr}
 80075c8:	4604      	mov	r4, r0
 80075ca:	e9c0 3300 	strd	r3, r3, [r0]
 80075ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075d2:	6083      	str	r3, [r0, #8]
 80075d4:	8181      	strh	r1, [r0, #12]
 80075d6:	6643      	str	r3, [r0, #100]	; 0x64
 80075d8:	81c2      	strh	r2, [r0, #14]
 80075da:	6183      	str	r3, [r0, #24]
 80075dc:	4619      	mov	r1, r3
 80075de:	2208      	movs	r2, #8
 80075e0:	305c      	adds	r0, #92	; 0x5c
 80075e2:	f7fd fba7 	bl	8004d34 <memset>
 80075e6:	4b05      	ldr	r3, [pc, #20]	; (80075fc <std+0x38>)
 80075e8:	6263      	str	r3, [r4, #36]	; 0x24
 80075ea:	4b05      	ldr	r3, [pc, #20]	; (8007600 <std+0x3c>)
 80075ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80075ee:	4b05      	ldr	r3, [pc, #20]	; (8007604 <std+0x40>)
 80075f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80075f2:	4b05      	ldr	r3, [pc, #20]	; (8007608 <std+0x44>)
 80075f4:	6224      	str	r4, [r4, #32]
 80075f6:	6323      	str	r3, [r4, #48]	; 0x30
 80075f8:	bd10      	pop	{r4, pc}
 80075fa:	bf00      	nop
 80075fc:	08007915 	.word	0x08007915
 8007600:	08007937 	.word	0x08007937
 8007604:	0800796f 	.word	0x0800796f
 8007608:	08007993 	.word	0x08007993

0800760c <_cleanup_r>:
 800760c:	4901      	ldr	r1, [pc, #4]	; (8007614 <_cleanup_r+0x8>)
 800760e:	f000 b8af 	b.w	8007770 <_fwalk_reent>
 8007612:	bf00      	nop
 8007614:	0800754d 	.word	0x0800754d

08007618 <__sfmoreglue>:
 8007618:	b570      	push	{r4, r5, r6, lr}
 800761a:	1e4a      	subs	r2, r1, #1
 800761c:	2568      	movs	r5, #104	; 0x68
 800761e:	4355      	muls	r5, r2
 8007620:	460e      	mov	r6, r1
 8007622:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007626:	f7ff fa87 	bl	8006b38 <_malloc_r>
 800762a:	4604      	mov	r4, r0
 800762c:	b140      	cbz	r0, 8007640 <__sfmoreglue+0x28>
 800762e:	2100      	movs	r1, #0
 8007630:	e9c0 1600 	strd	r1, r6, [r0]
 8007634:	300c      	adds	r0, #12
 8007636:	60a0      	str	r0, [r4, #8]
 8007638:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800763c:	f7fd fb7a 	bl	8004d34 <memset>
 8007640:	4620      	mov	r0, r4
 8007642:	bd70      	pop	{r4, r5, r6, pc}

08007644 <__sfp_lock_acquire>:
 8007644:	4801      	ldr	r0, [pc, #4]	; (800764c <__sfp_lock_acquire+0x8>)
 8007646:	f000 b8b3 	b.w	80077b0 <__retarget_lock_acquire_recursive>
 800764a:	bf00      	nop
 800764c:	20000370 	.word	0x20000370

08007650 <__sfp_lock_release>:
 8007650:	4801      	ldr	r0, [pc, #4]	; (8007658 <__sfp_lock_release+0x8>)
 8007652:	f000 b8ae 	b.w	80077b2 <__retarget_lock_release_recursive>
 8007656:	bf00      	nop
 8007658:	20000370 	.word	0x20000370

0800765c <__sinit_lock_acquire>:
 800765c:	4801      	ldr	r0, [pc, #4]	; (8007664 <__sinit_lock_acquire+0x8>)
 800765e:	f000 b8a7 	b.w	80077b0 <__retarget_lock_acquire_recursive>
 8007662:	bf00      	nop
 8007664:	2000036b 	.word	0x2000036b

08007668 <__sinit_lock_release>:
 8007668:	4801      	ldr	r0, [pc, #4]	; (8007670 <__sinit_lock_release+0x8>)
 800766a:	f000 b8a2 	b.w	80077b2 <__retarget_lock_release_recursive>
 800766e:	bf00      	nop
 8007670:	2000036b 	.word	0x2000036b

08007674 <__sinit>:
 8007674:	b510      	push	{r4, lr}
 8007676:	4604      	mov	r4, r0
 8007678:	f7ff fff0 	bl	800765c <__sinit_lock_acquire>
 800767c:	69a3      	ldr	r3, [r4, #24]
 800767e:	b11b      	cbz	r3, 8007688 <__sinit+0x14>
 8007680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007684:	f7ff bff0 	b.w	8007668 <__sinit_lock_release>
 8007688:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800768c:	6523      	str	r3, [r4, #80]	; 0x50
 800768e:	4b13      	ldr	r3, [pc, #76]	; (80076dc <__sinit+0x68>)
 8007690:	4a13      	ldr	r2, [pc, #76]	; (80076e0 <__sinit+0x6c>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	62a2      	str	r2, [r4, #40]	; 0x28
 8007696:	42a3      	cmp	r3, r4
 8007698:	bf04      	itt	eq
 800769a:	2301      	moveq	r3, #1
 800769c:	61a3      	streq	r3, [r4, #24]
 800769e:	4620      	mov	r0, r4
 80076a0:	f000 f820 	bl	80076e4 <__sfp>
 80076a4:	6060      	str	r0, [r4, #4]
 80076a6:	4620      	mov	r0, r4
 80076a8:	f000 f81c 	bl	80076e4 <__sfp>
 80076ac:	60a0      	str	r0, [r4, #8]
 80076ae:	4620      	mov	r0, r4
 80076b0:	f000 f818 	bl	80076e4 <__sfp>
 80076b4:	2200      	movs	r2, #0
 80076b6:	60e0      	str	r0, [r4, #12]
 80076b8:	2104      	movs	r1, #4
 80076ba:	6860      	ldr	r0, [r4, #4]
 80076bc:	f7ff ff82 	bl	80075c4 <std>
 80076c0:	68a0      	ldr	r0, [r4, #8]
 80076c2:	2201      	movs	r2, #1
 80076c4:	2109      	movs	r1, #9
 80076c6:	f7ff ff7d 	bl	80075c4 <std>
 80076ca:	68e0      	ldr	r0, [r4, #12]
 80076cc:	2202      	movs	r2, #2
 80076ce:	2112      	movs	r1, #18
 80076d0:	f7ff ff78 	bl	80075c4 <std>
 80076d4:	2301      	movs	r3, #1
 80076d6:	61a3      	str	r3, [r4, #24]
 80076d8:	e7d2      	b.n	8007680 <__sinit+0xc>
 80076da:	bf00      	nop
 80076dc:	08008b08 	.word	0x08008b08
 80076e0:	0800760d 	.word	0x0800760d

080076e4 <__sfp>:
 80076e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076e6:	4607      	mov	r7, r0
 80076e8:	f7ff ffac 	bl	8007644 <__sfp_lock_acquire>
 80076ec:	4b1e      	ldr	r3, [pc, #120]	; (8007768 <__sfp+0x84>)
 80076ee:	681e      	ldr	r6, [r3, #0]
 80076f0:	69b3      	ldr	r3, [r6, #24]
 80076f2:	b913      	cbnz	r3, 80076fa <__sfp+0x16>
 80076f4:	4630      	mov	r0, r6
 80076f6:	f7ff ffbd 	bl	8007674 <__sinit>
 80076fa:	3648      	adds	r6, #72	; 0x48
 80076fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007700:	3b01      	subs	r3, #1
 8007702:	d503      	bpl.n	800770c <__sfp+0x28>
 8007704:	6833      	ldr	r3, [r6, #0]
 8007706:	b30b      	cbz	r3, 800774c <__sfp+0x68>
 8007708:	6836      	ldr	r6, [r6, #0]
 800770a:	e7f7      	b.n	80076fc <__sfp+0x18>
 800770c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007710:	b9d5      	cbnz	r5, 8007748 <__sfp+0x64>
 8007712:	4b16      	ldr	r3, [pc, #88]	; (800776c <__sfp+0x88>)
 8007714:	60e3      	str	r3, [r4, #12]
 8007716:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800771a:	6665      	str	r5, [r4, #100]	; 0x64
 800771c:	f000 f847 	bl	80077ae <__retarget_lock_init_recursive>
 8007720:	f7ff ff96 	bl	8007650 <__sfp_lock_release>
 8007724:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007728:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800772c:	6025      	str	r5, [r4, #0]
 800772e:	61a5      	str	r5, [r4, #24]
 8007730:	2208      	movs	r2, #8
 8007732:	4629      	mov	r1, r5
 8007734:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007738:	f7fd fafc 	bl	8004d34 <memset>
 800773c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007740:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007744:	4620      	mov	r0, r4
 8007746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007748:	3468      	adds	r4, #104	; 0x68
 800774a:	e7d9      	b.n	8007700 <__sfp+0x1c>
 800774c:	2104      	movs	r1, #4
 800774e:	4638      	mov	r0, r7
 8007750:	f7ff ff62 	bl	8007618 <__sfmoreglue>
 8007754:	4604      	mov	r4, r0
 8007756:	6030      	str	r0, [r6, #0]
 8007758:	2800      	cmp	r0, #0
 800775a:	d1d5      	bne.n	8007708 <__sfp+0x24>
 800775c:	f7ff ff78 	bl	8007650 <__sfp_lock_release>
 8007760:	230c      	movs	r3, #12
 8007762:	603b      	str	r3, [r7, #0]
 8007764:	e7ee      	b.n	8007744 <__sfp+0x60>
 8007766:	bf00      	nop
 8007768:	08008b08 	.word	0x08008b08
 800776c:	ffff0001 	.word	0xffff0001

08007770 <_fwalk_reent>:
 8007770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007774:	4606      	mov	r6, r0
 8007776:	4688      	mov	r8, r1
 8007778:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800777c:	2700      	movs	r7, #0
 800777e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007782:	f1b9 0901 	subs.w	r9, r9, #1
 8007786:	d505      	bpl.n	8007794 <_fwalk_reent+0x24>
 8007788:	6824      	ldr	r4, [r4, #0]
 800778a:	2c00      	cmp	r4, #0
 800778c:	d1f7      	bne.n	800777e <_fwalk_reent+0xe>
 800778e:	4638      	mov	r0, r7
 8007790:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007794:	89ab      	ldrh	r3, [r5, #12]
 8007796:	2b01      	cmp	r3, #1
 8007798:	d907      	bls.n	80077aa <_fwalk_reent+0x3a>
 800779a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800779e:	3301      	adds	r3, #1
 80077a0:	d003      	beq.n	80077aa <_fwalk_reent+0x3a>
 80077a2:	4629      	mov	r1, r5
 80077a4:	4630      	mov	r0, r6
 80077a6:	47c0      	blx	r8
 80077a8:	4307      	orrs	r7, r0
 80077aa:	3568      	adds	r5, #104	; 0x68
 80077ac:	e7e9      	b.n	8007782 <_fwalk_reent+0x12>

080077ae <__retarget_lock_init_recursive>:
 80077ae:	4770      	bx	lr

080077b0 <__retarget_lock_acquire_recursive>:
 80077b0:	4770      	bx	lr

080077b2 <__retarget_lock_release_recursive>:
 80077b2:	4770      	bx	lr

080077b4 <__swhatbuf_r>:
 80077b4:	b570      	push	{r4, r5, r6, lr}
 80077b6:	460e      	mov	r6, r1
 80077b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077bc:	2900      	cmp	r1, #0
 80077be:	b096      	sub	sp, #88	; 0x58
 80077c0:	4614      	mov	r4, r2
 80077c2:	461d      	mov	r5, r3
 80077c4:	da07      	bge.n	80077d6 <__swhatbuf_r+0x22>
 80077c6:	2300      	movs	r3, #0
 80077c8:	602b      	str	r3, [r5, #0]
 80077ca:	89b3      	ldrh	r3, [r6, #12]
 80077cc:	061a      	lsls	r2, r3, #24
 80077ce:	d410      	bmi.n	80077f2 <__swhatbuf_r+0x3e>
 80077d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077d4:	e00e      	b.n	80077f4 <__swhatbuf_r+0x40>
 80077d6:	466a      	mov	r2, sp
 80077d8:	f000 f902 	bl	80079e0 <_fstat_r>
 80077dc:	2800      	cmp	r0, #0
 80077de:	dbf2      	blt.n	80077c6 <__swhatbuf_r+0x12>
 80077e0:	9a01      	ldr	r2, [sp, #4]
 80077e2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80077e6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80077ea:	425a      	negs	r2, r3
 80077ec:	415a      	adcs	r2, r3
 80077ee:	602a      	str	r2, [r5, #0]
 80077f0:	e7ee      	b.n	80077d0 <__swhatbuf_r+0x1c>
 80077f2:	2340      	movs	r3, #64	; 0x40
 80077f4:	2000      	movs	r0, #0
 80077f6:	6023      	str	r3, [r4, #0]
 80077f8:	b016      	add	sp, #88	; 0x58
 80077fa:	bd70      	pop	{r4, r5, r6, pc}

080077fc <__smakebuf_r>:
 80077fc:	898b      	ldrh	r3, [r1, #12]
 80077fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007800:	079d      	lsls	r5, r3, #30
 8007802:	4606      	mov	r6, r0
 8007804:	460c      	mov	r4, r1
 8007806:	d507      	bpl.n	8007818 <__smakebuf_r+0x1c>
 8007808:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800780c:	6023      	str	r3, [r4, #0]
 800780e:	6123      	str	r3, [r4, #16]
 8007810:	2301      	movs	r3, #1
 8007812:	6163      	str	r3, [r4, #20]
 8007814:	b002      	add	sp, #8
 8007816:	bd70      	pop	{r4, r5, r6, pc}
 8007818:	ab01      	add	r3, sp, #4
 800781a:	466a      	mov	r2, sp
 800781c:	f7ff ffca 	bl	80077b4 <__swhatbuf_r>
 8007820:	9900      	ldr	r1, [sp, #0]
 8007822:	4605      	mov	r5, r0
 8007824:	4630      	mov	r0, r6
 8007826:	f7ff f987 	bl	8006b38 <_malloc_r>
 800782a:	b948      	cbnz	r0, 8007840 <__smakebuf_r+0x44>
 800782c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007830:	059a      	lsls	r2, r3, #22
 8007832:	d4ef      	bmi.n	8007814 <__smakebuf_r+0x18>
 8007834:	f023 0303 	bic.w	r3, r3, #3
 8007838:	f043 0302 	orr.w	r3, r3, #2
 800783c:	81a3      	strh	r3, [r4, #12]
 800783e:	e7e3      	b.n	8007808 <__smakebuf_r+0xc>
 8007840:	4b0d      	ldr	r3, [pc, #52]	; (8007878 <__smakebuf_r+0x7c>)
 8007842:	62b3      	str	r3, [r6, #40]	; 0x28
 8007844:	89a3      	ldrh	r3, [r4, #12]
 8007846:	6020      	str	r0, [r4, #0]
 8007848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800784c:	81a3      	strh	r3, [r4, #12]
 800784e:	9b00      	ldr	r3, [sp, #0]
 8007850:	6163      	str	r3, [r4, #20]
 8007852:	9b01      	ldr	r3, [sp, #4]
 8007854:	6120      	str	r0, [r4, #16]
 8007856:	b15b      	cbz	r3, 8007870 <__smakebuf_r+0x74>
 8007858:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800785c:	4630      	mov	r0, r6
 800785e:	f000 f8d1 	bl	8007a04 <_isatty_r>
 8007862:	b128      	cbz	r0, 8007870 <__smakebuf_r+0x74>
 8007864:	89a3      	ldrh	r3, [r4, #12]
 8007866:	f023 0303 	bic.w	r3, r3, #3
 800786a:	f043 0301 	orr.w	r3, r3, #1
 800786e:	81a3      	strh	r3, [r4, #12]
 8007870:	89a0      	ldrh	r0, [r4, #12]
 8007872:	4305      	orrs	r5, r0
 8007874:	81a5      	strh	r5, [r4, #12]
 8007876:	e7cd      	b.n	8007814 <__smakebuf_r+0x18>
 8007878:	0800760d 	.word	0x0800760d

0800787c <_malloc_usable_size_r>:
 800787c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007880:	1f18      	subs	r0, r3, #4
 8007882:	2b00      	cmp	r3, #0
 8007884:	bfbc      	itt	lt
 8007886:	580b      	ldrlt	r3, [r1, r0]
 8007888:	18c0      	addlt	r0, r0, r3
 800788a:	4770      	bx	lr

0800788c <_raise_r>:
 800788c:	291f      	cmp	r1, #31
 800788e:	b538      	push	{r3, r4, r5, lr}
 8007890:	4604      	mov	r4, r0
 8007892:	460d      	mov	r5, r1
 8007894:	d904      	bls.n	80078a0 <_raise_r+0x14>
 8007896:	2316      	movs	r3, #22
 8007898:	6003      	str	r3, [r0, #0]
 800789a:	f04f 30ff 	mov.w	r0, #4294967295
 800789e:	bd38      	pop	{r3, r4, r5, pc}
 80078a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80078a2:	b112      	cbz	r2, 80078aa <_raise_r+0x1e>
 80078a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80078a8:	b94b      	cbnz	r3, 80078be <_raise_r+0x32>
 80078aa:	4620      	mov	r0, r4
 80078ac:	f000 f830 	bl	8007910 <_getpid_r>
 80078b0:	462a      	mov	r2, r5
 80078b2:	4601      	mov	r1, r0
 80078b4:	4620      	mov	r0, r4
 80078b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078ba:	f000 b817 	b.w	80078ec <_kill_r>
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d00a      	beq.n	80078d8 <_raise_r+0x4c>
 80078c2:	1c59      	adds	r1, r3, #1
 80078c4:	d103      	bne.n	80078ce <_raise_r+0x42>
 80078c6:	2316      	movs	r3, #22
 80078c8:	6003      	str	r3, [r0, #0]
 80078ca:	2001      	movs	r0, #1
 80078cc:	e7e7      	b.n	800789e <_raise_r+0x12>
 80078ce:	2400      	movs	r4, #0
 80078d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80078d4:	4628      	mov	r0, r5
 80078d6:	4798      	blx	r3
 80078d8:	2000      	movs	r0, #0
 80078da:	e7e0      	b.n	800789e <_raise_r+0x12>

080078dc <raise>:
 80078dc:	4b02      	ldr	r3, [pc, #8]	; (80078e8 <raise+0xc>)
 80078de:	4601      	mov	r1, r0
 80078e0:	6818      	ldr	r0, [r3, #0]
 80078e2:	f7ff bfd3 	b.w	800788c <_raise_r>
 80078e6:	bf00      	nop
 80078e8:	2000000c 	.word	0x2000000c

080078ec <_kill_r>:
 80078ec:	b538      	push	{r3, r4, r5, lr}
 80078ee:	4d07      	ldr	r5, [pc, #28]	; (800790c <_kill_r+0x20>)
 80078f0:	2300      	movs	r3, #0
 80078f2:	4604      	mov	r4, r0
 80078f4:	4608      	mov	r0, r1
 80078f6:	4611      	mov	r1, r2
 80078f8:	602b      	str	r3, [r5, #0]
 80078fa:	f7fa f9eb 	bl	8001cd4 <_kill>
 80078fe:	1c43      	adds	r3, r0, #1
 8007900:	d102      	bne.n	8007908 <_kill_r+0x1c>
 8007902:	682b      	ldr	r3, [r5, #0]
 8007904:	b103      	cbz	r3, 8007908 <_kill_r+0x1c>
 8007906:	6023      	str	r3, [r4, #0]
 8007908:	bd38      	pop	{r3, r4, r5, pc}
 800790a:	bf00      	nop
 800790c:	20000364 	.word	0x20000364

08007910 <_getpid_r>:
 8007910:	f7fa b9d8 	b.w	8001cc4 <_getpid>

08007914 <__sread>:
 8007914:	b510      	push	{r4, lr}
 8007916:	460c      	mov	r4, r1
 8007918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800791c:	f000 f894 	bl	8007a48 <_read_r>
 8007920:	2800      	cmp	r0, #0
 8007922:	bfab      	itete	ge
 8007924:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007926:	89a3      	ldrhlt	r3, [r4, #12]
 8007928:	181b      	addge	r3, r3, r0
 800792a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800792e:	bfac      	ite	ge
 8007930:	6563      	strge	r3, [r4, #84]	; 0x54
 8007932:	81a3      	strhlt	r3, [r4, #12]
 8007934:	bd10      	pop	{r4, pc}

08007936 <__swrite>:
 8007936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800793a:	461f      	mov	r7, r3
 800793c:	898b      	ldrh	r3, [r1, #12]
 800793e:	05db      	lsls	r3, r3, #23
 8007940:	4605      	mov	r5, r0
 8007942:	460c      	mov	r4, r1
 8007944:	4616      	mov	r6, r2
 8007946:	d505      	bpl.n	8007954 <__swrite+0x1e>
 8007948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800794c:	2302      	movs	r3, #2
 800794e:	2200      	movs	r2, #0
 8007950:	f000 f868 	bl	8007a24 <_lseek_r>
 8007954:	89a3      	ldrh	r3, [r4, #12]
 8007956:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800795a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800795e:	81a3      	strh	r3, [r4, #12]
 8007960:	4632      	mov	r2, r6
 8007962:	463b      	mov	r3, r7
 8007964:	4628      	mov	r0, r5
 8007966:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800796a:	f000 b817 	b.w	800799c <_write_r>

0800796e <__sseek>:
 800796e:	b510      	push	{r4, lr}
 8007970:	460c      	mov	r4, r1
 8007972:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007976:	f000 f855 	bl	8007a24 <_lseek_r>
 800797a:	1c43      	adds	r3, r0, #1
 800797c:	89a3      	ldrh	r3, [r4, #12]
 800797e:	bf15      	itete	ne
 8007980:	6560      	strne	r0, [r4, #84]	; 0x54
 8007982:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007986:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800798a:	81a3      	strheq	r3, [r4, #12]
 800798c:	bf18      	it	ne
 800798e:	81a3      	strhne	r3, [r4, #12]
 8007990:	bd10      	pop	{r4, pc}

08007992 <__sclose>:
 8007992:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007996:	f000 b813 	b.w	80079c0 <_close_r>
	...

0800799c <_write_r>:
 800799c:	b538      	push	{r3, r4, r5, lr}
 800799e:	4d07      	ldr	r5, [pc, #28]	; (80079bc <_write_r+0x20>)
 80079a0:	4604      	mov	r4, r0
 80079a2:	4608      	mov	r0, r1
 80079a4:	4611      	mov	r1, r2
 80079a6:	2200      	movs	r2, #0
 80079a8:	602a      	str	r2, [r5, #0]
 80079aa:	461a      	mov	r2, r3
 80079ac:	f7fa f9c9 	bl	8001d42 <_write>
 80079b0:	1c43      	adds	r3, r0, #1
 80079b2:	d102      	bne.n	80079ba <_write_r+0x1e>
 80079b4:	682b      	ldr	r3, [r5, #0]
 80079b6:	b103      	cbz	r3, 80079ba <_write_r+0x1e>
 80079b8:	6023      	str	r3, [r4, #0]
 80079ba:	bd38      	pop	{r3, r4, r5, pc}
 80079bc:	20000364 	.word	0x20000364

080079c0 <_close_r>:
 80079c0:	b538      	push	{r3, r4, r5, lr}
 80079c2:	4d06      	ldr	r5, [pc, #24]	; (80079dc <_close_r+0x1c>)
 80079c4:	2300      	movs	r3, #0
 80079c6:	4604      	mov	r4, r0
 80079c8:	4608      	mov	r0, r1
 80079ca:	602b      	str	r3, [r5, #0]
 80079cc:	f7fa f9d5 	bl	8001d7a <_close>
 80079d0:	1c43      	adds	r3, r0, #1
 80079d2:	d102      	bne.n	80079da <_close_r+0x1a>
 80079d4:	682b      	ldr	r3, [r5, #0]
 80079d6:	b103      	cbz	r3, 80079da <_close_r+0x1a>
 80079d8:	6023      	str	r3, [r4, #0]
 80079da:	bd38      	pop	{r3, r4, r5, pc}
 80079dc:	20000364 	.word	0x20000364

080079e0 <_fstat_r>:
 80079e0:	b538      	push	{r3, r4, r5, lr}
 80079e2:	4d07      	ldr	r5, [pc, #28]	; (8007a00 <_fstat_r+0x20>)
 80079e4:	2300      	movs	r3, #0
 80079e6:	4604      	mov	r4, r0
 80079e8:	4608      	mov	r0, r1
 80079ea:	4611      	mov	r1, r2
 80079ec:	602b      	str	r3, [r5, #0]
 80079ee:	f7fa f9d0 	bl	8001d92 <_fstat>
 80079f2:	1c43      	adds	r3, r0, #1
 80079f4:	d102      	bne.n	80079fc <_fstat_r+0x1c>
 80079f6:	682b      	ldr	r3, [r5, #0]
 80079f8:	b103      	cbz	r3, 80079fc <_fstat_r+0x1c>
 80079fa:	6023      	str	r3, [r4, #0]
 80079fc:	bd38      	pop	{r3, r4, r5, pc}
 80079fe:	bf00      	nop
 8007a00:	20000364 	.word	0x20000364

08007a04 <_isatty_r>:
 8007a04:	b538      	push	{r3, r4, r5, lr}
 8007a06:	4d06      	ldr	r5, [pc, #24]	; (8007a20 <_isatty_r+0x1c>)
 8007a08:	2300      	movs	r3, #0
 8007a0a:	4604      	mov	r4, r0
 8007a0c:	4608      	mov	r0, r1
 8007a0e:	602b      	str	r3, [r5, #0]
 8007a10:	f7fa f9cf 	bl	8001db2 <_isatty>
 8007a14:	1c43      	adds	r3, r0, #1
 8007a16:	d102      	bne.n	8007a1e <_isatty_r+0x1a>
 8007a18:	682b      	ldr	r3, [r5, #0]
 8007a1a:	b103      	cbz	r3, 8007a1e <_isatty_r+0x1a>
 8007a1c:	6023      	str	r3, [r4, #0]
 8007a1e:	bd38      	pop	{r3, r4, r5, pc}
 8007a20:	20000364 	.word	0x20000364

08007a24 <_lseek_r>:
 8007a24:	b538      	push	{r3, r4, r5, lr}
 8007a26:	4d07      	ldr	r5, [pc, #28]	; (8007a44 <_lseek_r+0x20>)
 8007a28:	4604      	mov	r4, r0
 8007a2a:	4608      	mov	r0, r1
 8007a2c:	4611      	mov	r1, r2
 8007a2e:	2200      	movs	r2, #0
 8007a30:	602a      	str	r2, [r5, #0]
 8007a32:	461a      	mov	r2, r3
 8007a34:	f7fa f9c8 	bl	8001dc8 <_lseek>
 8007a38:	1c43      	adds	r3, r0, #1
 8007a3a:	d102      	bne.n	8007a42 <_lseek_r+0x1e>
 8007a3c:	682b      	ldr	r3, [r5, #0]
 8007a3e:	b103      	cbz	r3, 8007a42 <_lseek_r+0x1e>
 8007a40:	6023      	str	r3, [r4, #0]
 8007a42:	bd38      	pop	{r3, r4, r5, pc}
 8007a44:	20000364 	.word	0x20000364

08007a48 <_read_r>:
 8007a48:	b538      	push	{r3, r4, r5, lr}
 8007a4a:	4d07      	ldr	r5, [pc, #28]	; (8007a68 <_read_r+0x20>)
 8007a4c:	4604      	mov	r4, r0
 8007a4e:	4608      	mov	r0, r1
 8007a50:	4611      	mov	r1, r2
 8007a52:	2200      	movs	r2, #0
 8007a54:	602a      	str	r2, [r5, #0]
 8007a56:	461a      	mov	r2, r3
 8007a58:	f7fa f956 	bl	8001d08 <_read>
 8007a5c:	1c43      	adds	r3, r0, #1
 8007a5e:	d102      	bne.n	8007a66 <_read_r+0x1e>
 8007a60:	682b      	ldr	r3, [r5, #0]
 8007a62:	b103      	cbz	r3, 8007a66 <_read_r+0x1e>
 8007a64:	6023      	str	r3, [r4, #0]
 8007a66:	bd38      	pop	{r3, r4, r5, pc}
 8007a68:	20000364 	.word	0x20000364

08007a6c <atan2f>:
 8007a6c:	f000 b800 	b.w	8007a70 <__ieee754_atan2f>

08007a70 <__ieee754_atan2f>:
 8007a70:	ee10 2a90 	vmov	r2, s1
 8007a74:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8007a78:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007a7c:	b510      	push	{r4, lr}
 8007a7e:	eef0 7a40 	vmov.f32	s15, s0
 8007a82:	dc06      	bgt.n	8007a92 <__ieee754_atan2f+0x22>
 8007a84:	ee10 0a10 	vmov	r0, s0
 8007a88:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8007a8c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007a90:	dd04      	ble.n	8007a9c <__ieee754_atan2f+0x2c>
 8007a92:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8007a96:	eeb0 0a67 	vmov.f32	s0, s15
 8007a9a:	bd10      	pop	{r4, pc}
 8007a9c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8007aa0:	d103      	bne.n	8007aaa <__ieee754_atan2f+0x3a>
 8007aa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007aa6:	f000 b883 	b.w	8007bb0 <atanf>
 8007aaa:	1794      	asrs	r4, r2, #30
 8007aac:	f004 0402 	and.w	r4, r4, #2
 8007ab0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8007ab4:	b943      	cbnz	r3, 8007ac8 <__ieee754_atan2f+0x58>
 8007ab6:	2c02      	cmp	r4, #2
 8007ab8:	d05e      	beq.n	8007b78 <__ieee754_atan2f+0x108>
 8007aba:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8007b8c <__ieee754_atan2f+0x11c>
 8007abe:	2c03      	cmp	r4, #3
 8007ac0:	bf08      	it	eq
 8007ac2:	eef0 7a47 	vmoveq.f32	s15, s14
 8007ac6:	e7e6      	b.n	8007a96 <__ieee754_atan2f+0x26>
 8007ac8:	b941      	cbnz	r1, 8007adc <__ieee754_atan2f+0x6c>
 8007aca:	eddf 7a31 	vldr	s15, [pc, #196]	; 8007b90 <__ieee754_atan2f+0x120>
 8007ace:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8007b94 <__ieee754_atan2f+0x124>
 8007ad2:	2800      	cmp	r0, #0
 8007ad4:	bfb8      	it	lt
 8007ad6:	eef0 7a40 	vmovlt.f32	s15, s0
 8007ada:	e7dc      	b.n	8007a96 <__ieee754_atan2f+0x26>
 8007adc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007ae0:	d110      	bne.n	8007b04 <__ieee754_atan2f+0x94>
 8007ae2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007ae6:	f104 34ff 	add.w	r4, r4, #4294967295
 8007aea:	d107      	bne.n	8007afc <__ieee754_atan2f+0x8c>
 8007aec:	2c02      	cmp	r4, #2
 8007aee:	d846      	bhi.n	8007b7e <__ieee754_atan2f+0x10e>
 8007af0:	4b29      	ldr	r3, [pc, #164]	; (8007b98 <__ieee754_atan2f+0x128>)
 8007af2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007af6:	edd4 7a00 	vldr	s15, [r4]
 8007afa:	e7cc      	b.n	8007a96 <__ieee754_atan2f+0x26>
 8007afc:	2c02      	cmp	r4, #2
 8007afe:	d841      	bhi.n	8007b84 <__ieee754_atan2f+0x114>
 8007b00:	4b26      	ldr	r3, [pc, #152]	; (8007b9c <__ieee754_atan2f+0x12c>)
 8007b02:	e7f6      	b.n	8007af2 <__ieee754_atan2f+0x82>
 8007b04:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007b08:	d0df      	beq.n	8007aca <__ieee754_atan2f+0x5a>
 8007b0a:	1a5b      	subs	r3, r3, r1
 8007b0c:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8007b10:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8007b14:	da1a      	bge.n	8007b4c <__ieee754_atan2f+0xdc>
 8007b16:	2a00      	cmp	r2, #0
 8007b18:	da01      	bge.n	8007b1e <__ieee754_atan2f+0xae>
 8007b1a:	313c      	adds	r1, #60	; 0x3c
 8007b1c:	db19      	blt.n	8007b52 <__ieee754_atan2f+0xe2>
 8007b1e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8007b22:	f000 f919 	bl	8007d58 <fabsf>
 8007b26:	f000 f843 	bl	8007bb0 <atanf>
 8007b2a:	eef0 7a40 	vmov.f32	s15, s0
 8007b2e:	2c01      	cmp	r4, #1
 8007b30:	d012      	beq.n	8007b58 <__ieee754_atan2f+0xe8>
 8007b32:	2c02      	cmp	r4, #2
 8007b34:	d017      	beq.n	8007b66 <__ieee754_atan2f+0xf6>
 8007b36:	2c00      	cmp	r4, #0
 8007b38:	d0ad      	beq.n	8007a96 <__ieee754_atan2f+0x26>
 8007b3a:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8007ba0 <__ieee754_atan2f+0x130>
 8007b3e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007b42:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8007ba4 <__ieee754_atan2f+0x134>
 8007b46:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007b4a:	e7a4      	b.n	8007a96 <__ieee754_atan2f+0x26>
 8007b4c:	eddf 7a10 	vldr	s15, [pc, #64]	; 8007b90 <__ieee754_atan2f+0x120>
 8007b50:	e7ed      	b.n	8007b2e <__ieee754_atan2f+0xbe>
 8007b52:	eddf 7a15 	vldr	s15, [pc, #84]	; 8007ba8 <__ieee754_atan2f+0x138>
 8007b56:	e7ea      	b.n	8007b2e <__ieee754_atan2f+0xbe>
 8007b58:	ee17 3a90 	vmov	r3, s15
 8007b5c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007b60:	ee07 3a90 	vmov	s15, r3
 8007b64:	e797      	b.n	8007a96 <__ieee754_atan2f+0x26>
 8007b66:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8007ba0 <__ieee754_atan2f+0x130>
 8007b6a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007b6e:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8007ba4 <__ieee754_atan2f+0x134>
 8007b72:	ee70 7a67 	vsub.f32	s15, s0, s15
 8007b76:	e78e      	b.n	8007a96 <__ieee754_atan2f+0x26>
 8007b78:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8007ba4 <__ieee754_atan2f+0x134>
 8007b7c:	e78b      	b.n	8007a96 <__ieee754_atan2f+0x26>
 8007b7e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8007bac <__ieee754_atan2f+0x13c>
 8007b82:	e788      	b.n	8007a96 <__ieee754_atan2f+0x26>
 8007b84:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007ba8 <__ieee754_atan2f+0x138>
 8007b88:	e785      	b.n	8007a96 <__ieee754_atan2f+0x26>
 8007b8a:	bf00      	nop
 8007b8c:	c0490fdb 	.word	0xc0490fdb
 8007b90:	3fc90fdb 	.word	0x3fc90fdb
 8007b94:	bfc90fdb 	.word	0xbfc90fdb
 8007b98:	08008eec 	.word	0x08008eec
 8007b9c:	08008ef8 	.word	0x08008ef8
 8007ba0:	33bbbd2e 	.word	0x33bbbd2e
 8007ba4:	40490fdb 	.word	0x40490fdb
 8007ba8:	00000000 	.word	0x00000000
 8007bac:	3f490fdb 	.word	0x3f490fdb

08007bb0 <atanf>:
 8007bb0:	b538      	push	{r3, r4, r5, lr}
 8007bb2:	ee10 5a10 	vmov	r5, s0
 8007bb6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8007bba:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8007bbe:	eef0 7a40 	vmov.f32	s15, s0
 8007bc2:	db10      	blt.n	8007be6 <atanf+0x36>
 8007bc4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8007bc8:	dd04      	ble.n	8007bd4 <atanf+0x24>
 8007bca:	ee70 7a00 	vadd.f32	s15, s0, s0
 8007bce:	eeb0 0a67 	vmov.f32	s0, s15
 8007bd2:	bd38      	pop	{r3, r4, r5, pc}
 8007bd4:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8007d0c <atanf+0x15c>
 8007bd8:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8007d10 <atanf+0x160>
 8007bdc:	2d00      	cmp	r5, #0
 8007bde:	bfd8      	it	le
 8007be0:	eef0 7a40 	vmovle.f32	s15, s0
 8007be4:	e7f3      	b.n	8007bce <atanf+0x1e>
 8007be6:	4b4b      	ldr	r3, [pc, #300]	; (8007d14 <atanf+0x164>)
 8007be8:	429c      	cmp	r4, r3
 8007bea:	dc10      	bgt.n	8007c0e <atanf+0x5e>
 8007bec:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8007bf0:	da0a      	bge.n	8007c08 <atanf+0x58>
 8007bf2:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8007d18 <atanf+0x168>
 8007bf6:	ee30 7a07 	vadd.f32	s14, s0, s14
 8007bfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bfe:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8007c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c06:	dce2      	bgt.n	8007bce <atanf+0x1e>
 8007c08:	f04f 33ff 	mov.w	r3, #4294967295
 8007c0c:	e013      	b.n	8007c36 <atanf+0x86>
 8007c0e:	f000 f8a3 	bl	8007d58 <fabsf>
 8007c12:	4b42      	ldr	r3, [pc, #264]	; (8007d1c <atanf+0x16c>)
 8007c14:	429c      	cmp	r4, r3
 8007c16:	dc4f      	bgt.n	8007cb8 <atanf+0x108>
 8007c18:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8007c1c:	429c      	cmp	r4, r3
 8007c1e:	dc41      	bgt.n	8007ca4 <atanf+0xf4>
 8007c20:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8007c24:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007c28:	eea0 7a27 	vfma.f32	s14, s0, s15
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007c32:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007c36:	1c5a      	adds	r2, r3, #1
 8007c38:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8007c3c:	eddf 5a38 	vldr	s11, [pc, #224]	; 8007d20 <atanf+0x170>
 8007c40:	ed9f 6a38 	vldr	s12, [pc, #224]	; 8007d24 <atanf+0x174>
 8007c44:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8007d28 <atanf+0x178>
 8007c48:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8007d2c <atanf+0x17c>
 8007c4c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8007c50:	eea7 6a25 	vfma.f32	s12, s14, s11
 8007c54:	eddf 5a36 	vldr	s11, [pc, #216]	; 8007d30 <atanf+0x180>
 8007c58:	eee6 5a07 	vfma.f32	s11, s12, s14
 8007c5c:	ed9f 6a35 	vldr	s12, [pc, #212]	; 8007d34 <atanf+0x184>
 8007c60:	eea5 6a87 	vfma.f32	s12, s11, s14
 8007c64:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007d38 <atanf+0x188>
 8007c68:	eee6 5a07 	vfma.f32	s11, s12, s14
 8007c6c:	ed9f 6a33 	vldr	s12, [pc, #204]	; 8007d3c <atanf+0x18c>
 8007c70:	eea5 6a87 	vfma.f32	s12, s11, s14
 8007c74:	eddf 5a32 	vldr	s11, [pc, #200]	; 8007d40 <atanf+0x190>
 8007c78:	eee7 5a05 	vfma.f32	s11, s14, s10
 8007c7c:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8007d44 <atanf+0x194>
 8007c80:	eea5 5a87 	vfma.f32	s10, s11, s14
 8007c84:	eddf 5a30 	vldr	s11, [pc, #192]	; 8007d48 <atanf+0x198>
 8007c88:	eee5 5a07 	vfma.f32	s11, s10, s14
 8007c8c:	eea5 0a87 	vfma.f32	s0, s11, s14
 8007c90:	ee20 0a07 	vmul.f32	s0, s0, s14
 8007c94:	eea6 0a26 	vfma.f32	s0, s12, s13
 8007c98:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007c9c:	d121      	bne.n	8007ce2 <atanf+0x132>
 8007c9e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007ca2:	e794      	b.n	8007bce <atanf+0x1e>
 8007ca4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007ca8:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007cac:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007cb6:	e7be      	b.n	8007c36 <atanf+0x86>
 8007cb8:	4b24      	ldr	r3, [pc, #144]	; (8007d4c <atanf+0x19c>)
 8007cba:	429c      	cmp	r4, r3
 8007cbc:	dc0b      	bgt.n	8007cd6 <atanf+0x126>
 8007cbe:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8007cc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007cc6:	eea0 7a27 	vfma.f32	s14, s0, s15
 8007cca:	2302      	movs	r3, #2
 8007ccc:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007cd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cd4:	e7af      	b.n	8007c36 <atanf+0x86>
 8007cd6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007cda:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007cde:	2303      	movs	r3, #3
 8007ce0:	e7a9      	b.n	8007c36 <atanf+0x86>
 8007ce2:	4a1b      	ldr	r2, [pc, #108]	; (8007d50 <atanf+0x1a0>)
 8007ce4:	491b      	ldr	r1, [pc, #108]	; (8007d54 <atanf+0x1a4>)
 8007ce6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8007cea:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8007cee:	ed93 7a00 	vldr	s14, [r3]
 8007cf2:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007cf6:	2d00      	cmp	r5, #0
 8007cf8:	ee70 7a67 	vsub.f32	s15, s0, s15
 8007cfc:	ed92 0a00 	vldr	s0, [r2]
 8007d00:	ee70 7a67 	vsub.f32	s15, s0, s15
 8007d04:	bfb8      	it	lt
 8007d06:	eef1 7a67 	vneglt.f32	s15, s15
 8007d0a:	e760      	b.n	8007bce <atanf+0x1e>
 8007d0c:	3fc90fdb 	.word	0x3fc90fdb
 8007d10:	bfc90fdb 	.word	0xbfc90fdb
 8007d14:	3edfffff 	.word	0x3edfffff
 8007d18:	7149f2ca 	.word	0x7149f2ca
 8007d1c:	3f97ffff 	.word	0x3f97ffff
 8007d20:	3c8569d7 	.word	0x3c8569d7
 8007d24:	3d4bda59 	.word	0x3d4bda59
 8007d28:	bd15a221 	.word	0xbd15a221
 8007d2c:	be4ccccd 	.word	0xbe4ccccd
 8007d30:	3d886b35 	.word	0x3d886b35
 8007d34:	3dba2e6e 	.word	0x3dba2e6e
 8007d38:	3e124925 	.word	0x3e124925
 8007d3c:	3eaaaaab 	.word	0x3eaaaaab
 8007d40:	bd6ef16b 	.word	0xbd6ef16b
 8007d44:	bd9d8795 	.word	0xbd9d8795
 8007d48:	bde38e38 	.word	0xbde38e38
 8007d4c:	401bffff 	.word	0x401bffff
 8007d50:	08008f04 	.word	0x08008f04
 8007d54:	08008f14 	.word	0x08008f14

08007d58 <fabsf>:
 8007d58:	ee10 3a10 	vmov	r3, s0
 8007d5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d60:	ee00 3a10 	vmov	s0, r3
 8007d64:	4770      	bx	lr
	...

08007d68 <_init>:
 8007d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d6a:	bf00      	nop
 8007d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d6e:	bc08      	pop	{r3}
 8007d70:	469e      	mov	lr, r3
 8007d72:	4770      	bx	lr

08007d74 <_fini>:
 8007d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d76:	bf00      	nop
 8007d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d7a:	bc08      	pop	{r3}
 8007d7c:	469e      	mov	lr, r3
 8007d7e:	4770      	bx	lr
